[{"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\index.js":"1","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\reportWebVitals.js":"2","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\App.js":"3","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\routes.js":"4","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\GlobalStyles.js":"5","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\index.js":"6","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\RegisterView.js":"7","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\errors\\NotFoundView.js":"8","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\LoginView.js":"9","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\shadows.js":"10","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\typography.js":"11","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\index.js":"12","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\index.js":"13","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\index.js":"14","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\index.js":"15","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\index.js":"16","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\index.js":"17","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\Room\\index.js":"18","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js":"19","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\index.js":"20","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\index.js":"21","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\index.js":"22","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\linearGradient.js":"23","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Page.js":"24","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\TopBar.js":"25","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\createMeetingForm.js":"26","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\Notifications.js":"27","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\TopBar.js":"28","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js":"29","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js":"30","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\data.js":"31","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Results.js":"32","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js":"33","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js":"34","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Logo.js":"35","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js":"36","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Password.js":"37","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\ProfileDetails.js":"38","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Profile.js":"39","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\topicList.js":"40","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\createTopicForm.js":"41"},{"size":649,"mtime":1617288545000,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":1617288545000,"results":"44","hashOfConfig":"43"},{"size":506,"mtime":1617288545000,"results":"45","hashOfConfig":"43"},{"size":2030,"mtime":1617288545000,"results":"46","hashOfConfig":"43"},{"size":672,"mtime":1617288545000,"results":"47","hashOfConfig":"43"},{"size":551,"mtime":1617288545000,"results":"48","hashOfConfig":"43"},{"size":9762,"mtime":1617288545000,"results":"49","hashOfConfig":"43"},{"size":1547,"mtime":1617288545000,"results":"50","hashOfConfig":"43"},{"size":5610,"mtime":1617288545000,"results":"51","hashOfConfig":"43"},{"size":1618,"mtime":1617288545000,"results":"52","hashOfConfig":"43"},{"size":544,"mtime":1617288545000,"results":"53","hashOfConfig":"43"},{"size":900,"mtime":1617288545000,"results":"54","hashOfConfig":"43"},{"size":702,"mtime":1617288545000,"results":"55","hashOfConfig":"43"},{"size":985,"mtime":1617288545000,"results":"56","hashOfConfig":"43"},{"size":1368,"mtime":1617288545000,"results":"57","hashOfConfig":"43"},{"size":896,"mtime":1617288545000,"results":"58","hashOfConfig":"43"},{"size":661,"mtime":1617288545000,"results":"59","hashOfConfig":"43"},{"size":3558,"mtime":1617367880499,"results":"60","hashOfConfig":"43"},{"size":410,"mtime":1617288545000,"results":"61","hashOfConfig":"43"},{"size":1343,"mtime":1617288545000,"results":"62","hashOfConfig":"43"},{"size":1001,"mtime":1617288545000,"results":"63","hashOfConfig":"43"},{"size":3349,"mtime":1617288545000,"results":"64","hashOfConfig":"43"},{"size":369,"mtime":1617288545000,"results":"65","hashOfConfig":"43"},{"size":462,"mtime":1617288545000,"results":"66","hashOfConfig":"43"},{"size":1635,"mtime":1617288545000,"results":"67","hashOfConfig":"43"},{"size":16971,"mtime":1617288545000,"results":"68","hashOfConfig":"43"},{"size":3107,"mtime":1617288545000,"results":"69","hashOfConfig":"43"},{"size":722,"mtime":1617288545000,"results":"70","hashOfConfig":"43"},{"size":1444,"mtime":1617288545000,"results":"71","hashOfConfig":"43"},{"size":1919,"mtime":1617288545000,"results":"72","hashOfConfig":"43"},{"size":2540,"mtime":1617288545000,"results":"73","hashOfConfig":"43"},{"size":4783,"mtime":1617288545000,"results":"74","hashOfConfig":"43"},{"size":3173,"mtime":1617288545000,"results":"75","hashOfConfig":"43"},{"size":3761,"mtime":1617288545000,"results":"76","hashOfConfig":"43"},{"size":174,"mtime":1617288545000,"results":"77","hashOfConfig":"43"},{"size":1637,"mtime":1617288545000,"results":"78","hashOfConfig":"43"},{"size":1765,"mtime":1617288545000,"results":"79","hashOfConfig":"43"},{"size":3395,"mtime":1617288545000,"results":"80","hashOfConfig":"43"},{"size":1738,"mtime":1617288545000,"results":"81","hashOfConfig":"43"},{"size":4300,"mtime":1617288545000,"results":"82","hashOfConfig":"43"},{"size":8425,"mtime":1617288545000,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"6izvbt",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"86"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"86"},"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\index.js",[],["179","180"],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\reportWebVitals.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\App.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\routes.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\GlobalStyles.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\RegisterView.js",["181","182","183"],"import React, {useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Container,\n  FormHelperText,\n  Link,\n  TextField,\n  Typography,\n  Grid,\n  Snackbar,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport linearGradient from 'src/components/linearGradient';\nimport Image from 'src/imgs/meeting_register_img_2.jpg'; // Import using relative path\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst styles = {\n    root: {\n       \n    }\n};\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n    height: '100vh'\n  },\n  image:{\n    backgroundImage: `url(${Image})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    height: '100vh',\n    marginTop: '-24px',\n  }\n}));\n\nconst RegisterView = props => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [open, setOpen] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n\n  //Alert Function \n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n//Close func for closing the alert\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  // The function that handles the logic when submitting the form\n  const handleSubmit = async values => {\n    // This function received the values from the form\n    // The line below extract the two fields from the values object.\n    const { email, password, firstName, lastName, companyName } = values;\n    var body = {\n      password: password,\n      email: email,\n      firstName: firstName,\n      lastName: lastName,\n      companyName: companyName\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/auth/signup\";\n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n      console.log(text)\n\n      if (text.status == \"success\") {\n        console.log(\"success\")\n        navigate('/login', { replace: true });\n      } else {\n        console.log(text.message);\n        setErrorMessage(text.message)\n        setOpen(true);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  return (\n    <Page\n      className={classes.root}\n      title=\"Register\"\n    >\n       \n        <Grid\n          container\n          spacing={0}\n        >\n            <CssBaseline />\n            <Grid\n            className={classes.image}\n          \n            lg={6}\n            md={2}\n            xl={6}\n            xs={0}\n          >\n            \n          </Grid>\n          <Grid\n         elevation={6} square\n            lg={6}\n            md={10}\n            xl={6}\n            xs={12}\n          >\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"sm\">\n          <Formik\n            initialValues={{\n              email: '',\n              firstName: '',\n              lastName: '',\n              password: '',\n              companyName: '',\n              policy: false\n            }}\n            onSubmit={handleSubmit}\n\n            validationSchema={\n              Yup.object().shape({\n                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n                firstName: Yup.string().max(255).required('First name is required'),\n                lastName: Yup.string().max(255).required('Last name is required'),\n                password: Yup.string().max(255).required('password is required'),\n                companyName: Yup.string().max(255).required('company name is required'),\n                policy: Yup.boolean().oneOf([true], 'This field must be checked')\n              })\n            }\n          >\n            {props => {\n              const {\n              values,\n              touched,\n              errors,\n              isSubmitting,\n              handleChange,\n              handleBlur,\n              handleSubmit\n            } = props;\n            return (\n              <form onSubmit={handleSubmit}>\n                <Box mb={3}>\n                  <Typography\n                    color=\"textPrimary\"\n                    variant=\"h2\"\n                  >\n                    Create new account\n                  </Typography>\n                  <Typography\n                    color=\"textSecondary\"\n                    gutterBottom\n                    variant=\"body2\"\n                  >\n                    Use your email to create new account\n                  </Typography>\n                </Box>\n                <TextField\n                  error={Boolean(touched.firstName && errors.firstName)}\n                  fullWidth\n                  helperText={touched.firstName && errors.firstName}\n                  label=\"First name\"\n                  margin=\"normal\"\n                  name=\"firstName\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.firstName}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.lastName && errors.lastName)}\n                  fullWidth\n                  helperText={touched.lastName && errors.lastName}\n                  label=\"Last name\"\n                  margin=\"normal\"\n                  name=\"lastName\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.lastName}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.email && errors.email)}\n                  fullWidth\n                  helperText={touched.email && errors.email}\n                  label=\"Email Address\"\n                  margin=\"normal\"\n                  name=\"email\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  type=\"email\"\n                  value={values.email}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.password && errors.password)}\n                  fullWidth\n                  helperText={touched.password && errors.password}\n                  label=\"Password\"\n                  margin=\"normal\"\n                  name=\"password\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  type=\"password\"\n                  value={values.password}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.companyName && errors.companyName)}\n                  fullWidth\n                  helperText={touched.companyName && errors.companyName}\n                  label=\"Company Name\"\n                  margin=\"normal\"\n                  name=\"companyName\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.companyName}\n                  variant=\"outlined\"\n                />\n                <Box\n                  alignItems=\"center\"\n                  display=\"flex\"\n                  ml={-1}\n                >\n                  <Checkbox\n                    checked={values.policy}\n                    name=\"policy\"\n                    onChange={handleChange}\n                  />\n                  <Typography\n                    color=\"textSecondary\"\n                    variant=\"body1\"\n                  >\n                    I have read the\n                    {' '}\n                    <Link\n                      color=\"primary\"\n                      component={RouterLink}\n                      to=\"#\"\n                      underline=\"always\"\n                      variant=\"h6\"\n                    >\n                      Terms and Conditions\n                    </Link>\n                  </Typography>\n                </Box>\n                {Boolean(touched.policy && errors.policy) && (\n                  <FormHelperText error>\n                    {errors.policy}\n                  </FormHelperText>\n                )}\n                <Box my={2}>\n                  <Button\n                    className={linearGradient().root}\n                    disabled={isSubmitting}\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                  >\n                    Sign up now\n                  </Button>\n                </Box>\n                <Typography\n                  color=\"textSecondary\"\n                  variant=\"body1\"\n                >\n                  Have an account?\n                  {' '}\n                  <Link\n                    component={RouterLink}\n                    to=\"/login\"\n                    variant=\"h6\"\n                  >\n                    Sign in\n                  </Link>\n                </Typography>\n              </form>\n            )}}\n          </Formik>\n        </Container>\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"Error\">\n            {errorMessage}  \n        </Alert>\n      </Snackbar>\n      </Box>\n      </Grid>\n      \n      </Grid>\n    \n    </Page>\n  );\n};\n\nexport default RegisterView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\errors\\NotFoundView.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\LoginView.js",["184","185"],"import React, {useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography,\n  Snackbar,\n  makeStyles\n} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Page from 'src/components/Page';\nimport linearGradient from 'src/components/linearGradient';\nimport { Alert } from '@material-ui/lab';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst LoginView = props => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [open, setOpen] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n\n  //Alert Function \n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n//Close func for closing the alert\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  // The function that handles the logic when submitting the form\n  const handleSubmit = async values => {\n    // This function received the values from the form\n    // The line below extract the two fields from the values object.\n    const { email, password } = values;\n    var body = {\n      password: password,\n      email: email\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/auth/login\";\n   \n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n\n      if (text.status == \"success\") {\n        console.log(\"success\")\n        navigate('/app/dashboard', { replace: true });\n        \n      } else {\n        console.log(text.message);\n        setErrorMessage(text.message)\n        setOpen(true);    \n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Returning the part that should be rendered\n  // Just set handleSubmit as the handler for the onSubmit call.\n  return (\n    <Page\n      className={classes.root}\n      title=\"Login\"\n    >\n      \n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"sm\">\n    <Formik\n      initialValues={{\n        email: '',\n        password: ''\n      }}\n      onSubmit={handleSubmit}\n\n      //********Using Yup for validation********/\n\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        password: Yup.string().max(255).required('Password is required')\n      })}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        } = props;\n        return (\n          <>\n            <form onSubmit={handleSubmit} noValidate>\n                <Box mb={3}>\n                  <Typography\n                    color=\"textPrimary\"\n                    variant=\"h2\"\n                  >\n                    Sign in\n                  </Typography>\n                  \n                </Box>\n              <TextField\n                error={Boolean(touched.email && errors.email)}\n                fullWidth\n                helperText={touched.email && errors.email}\n                label=\"Email Address\"\n                margin=\"normal\"\n                name=\"email\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                type=\"email\"\n                value={values.email}\n                variant=\"outlined\"\n                //className={errors.email && touched.email && \"error\"}\n              />\n              <TextField\n                error={Boolean(touched.password && errors.password)}\n                fullWidth\n                helperText={touched.password && errors.password}\n                label=\"Password\"\n                margin=\"normal\"\n                name=\"password\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                type=\"password\"\n                value={values.password}\n                variant=\"outlined\"\n              />\n              \n              <Box my={2}>\n                <Button \n                className={linearGradient().root}\n                    disabled={isSubmitting}\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\" >\n                      Sign in now\n                </Button>\n              </Box>\n              <Typography\n                  color=\"textSecondary\"\n                  variant=\"body1\"\n                >\n                  Don&apos;t have an account?\n                  {' '}\n                  <Link\n                    component={RouterLink}\n                    to=\"/register\"\n                    variant=\"h6\"\n                  >\n                    Sign up\n                  </Link>\n                </Typography>\n            </form>\n          </>\n        );\n      }}\n    </Formik>\n  </Container>  \n</Box>\n<Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"Error\">\n            {errorMessage}  \n        </Alert>\n      </Snackbar>\n</Page>\n  );\n};\n\nexport default LoginView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\shadows.js",["186"],"export default [\n  'none',\n  '0 0 0 1px rgba(63,63,68,0.05), 0 1px 2px 0 rgba(63,63,68,0.15)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 5px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)'\n];\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\typography.js",["187"],"export default {\n  h1: {\n    fontWeight: 500,\n    fontSize: 35,\n    letterSpacing: '-0.24px'\n  },\n  h2: {\n    fontWeight: 500,\n    fontSize: 29,\n    letterSpacing: '-0.24px'\n  },\n  h3: {\n    fontWeight: 500,\n    fontSize: 24,\n    letterSpacing: '-0.06px'\n  },\n  h4: {\n    fontWeight: 500,\n    fontSize: 20,\n    letterSpacing: '-0.06px'\n  },\n  h5: {\n    fontWeight: 500,\n    fontSize: 16,\n    letterSpacing: '-0.05px'\n  },\n  h6: {\n    fontWeight: 500,\n    fontSize: 14,\n    letterSpacing: '-0.05px'\n  },\n  overline: {\n    fontWeight: 500\n  }\n};\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\Room\\index.js",["188","189","190"],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js",["191","192","193"],"import React, { useEffect, useState, useRef } from 'react';\nimport { v1 as uuid } from \"uuid\";\nimport { useNavigate } from 'react-router-dom';\n\n\n\nconst AttendMeeting = (props) => {\n  let navigate = useNavigate()\n  function create() {\n      const id = uuid();\n      navigate(`/app/room/${id}`, {id: id});\n  }\n\n  return (\n      <button onClick={create}>Create room</button>\n  );\n};\n\nexport default AttendMeeting;","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\index.js",["194","195","196"],"import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Card,\n  CardContent,\n  TextField,\n  InputAdornment,\n  SvgIcon,\n  Grid,\n  FormControlLabel,\n  Switch,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Results from './Results';\nimport Toolbar from './Toolbar';\nimport data from './data';\nimport CalendarView from './calendarView';\nimport { Search as SearchIcon } from 'react-feather';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst MeetingListView = () => {\n  const classes = useStyles();\n  const [meetings] = useState(data);\n  const [meeting,setMeeting]=useState([]);\n    const [state, setState] = React.useState({\n        checkedA: true,\n        checkedB: false,\n      });\n    \n      const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n        console.log(state);\n      };\n      const getMeetings = async values => {\n        const url = \"http://localhost:81/meeting/getMeetings\";\n        try {\n          const result = await fetch(url);\n          const data = await result.json();\n          //console.log(data)\n      \n          if (data.status == \"success\") {\n            // console.log(\"success\");\n            setMeeting(data.data)\n           // console.log(meeting)\n            \n          } else {\n            console.log(\"error\");\n            \n          }\n        } catch (error) {\n          console.error(error);\n        } \n      };\n      getMeetings();\n      var meetingArr=[];\n      meetingArr.push(meeting);\n  return (\n    <Page\n      className={classes.root}\n      title=\"Meetings\"\n    >\n      <Container maxWidth={false}>\n      <div\n      \n    >\n      <Box mt={3}>\n        <Card>\n          <CardContent>\n          <Grid\n          container\n         direction=\"row\"\n        justify=\"space-between\"\n      alignItems=\"center\"\n>\n            <Box maxWidth={500} minWidth={400}>\n\n              <TextField\n                fullWidth\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SvgIcon\n                        fontSize=\"small\"\n                        color=\"action\"\n                      >\n                        <SearchIcon />\n                      </SvgIcon>\n                    </InputAdornment>\n                  )\n                }}\n                placeholder=\"Search meeting\"\n                variant=\"outlined\"\n              />\n            </Box>\n            \n            {/* switch component for calendar view */}\n            <Box>\n            <FormControlLabel\n            control={\n          <Switch\n            checked={state.checkedB}\n            onChange={handleChange}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calendar View\"\n      />\n     {/*  <EventIcon></EventIcon> */}\n      </Box>\n      </Grid>\n          </CardContent>\n        </Card>\n      </Box>\n    </div>\n    <Box mt={3}>\n    {!state.checkedB ? ( \n          <Results meetings={meeting} />\n        ):(<CalendarView meetings={meeting}></CalendarView>)}\n </Box>\n      </Container>\n      \n    </Page>\n  );\n};\n\nexport default MeetingListView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\linearGradient.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Page.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\TopBar.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\createMeetingForm.js",["197","198","199","200","201","202","203","204","205","206","207","208"],"import React,{useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns'; //instal this version npm i @date-io/date-fns@1.3.13\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { Formik } from 'formik';\nimport Async from \"react-async\"\nimport {\n  Box,\n  Button,\n  Container,\n  Select,\n  InputLabel ,\n  MenuItem,\n  TextField,\n  Divider,\n  makeStyles,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControl,\n  Snackbar\n\n} from '@material-ui/core';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  },\n  formControl: {\n    minWidth: 150,\n    maxWidth: 300,\n  },\n  \n}));\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    width: 600\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst topicColumns = [\n  \n  { field: 'title', headerName: 'Topic Title', width: 180},\n  { field: 'totalTime', headerName: 'Duration', width: 180 }\n  \n];\nconst columns = [\n  { field: 'firstName', headerName: 'First name', width: 120},\n  { field: 'lastName', headerName: 'Last name', width: 120 },\n  { field: 'email', headerName: 'Email', width: 220 }\n];\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\n \nconst CreateMeetingForm = props => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [openTopic, setOpenTopic] = React.useState(false);\n  const [selectParticipats, setSelectionParticipants] = React.useState([]);\n  let dt = new Date();\n  const minDate = dt.setDate(dt.getDate() );\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\n  const [openAlert, setOpenAlert] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n  var [successMessage,setSuccessMessage]=useState(\"\");\n  const[user,setUser]=useState([]);\n  const[member,setMember]=useState([]);\n  const[topic,setTopic]=useState([]);\n  const[selectedTopic,setSelectedTopic]=useState([]);\n  const[topicsArr,setTopicsArr]=useState([]);\n  const[participantsArr,setParticipantsArr]=useState([]);\n  const[selectionModelTopic,setSelectionModelTopic]=useState([]);\n  const[selectionModelParticipant,setSelectionModelParticipant]=useState([]);\n\n  const loadUser = async values => {\n    const url = \"http://localhost:81/meeting/getEmails\";\n    try {\n      const result = await fetch(url);\n      const data = await result.json();\n      console.log(data)\n\n      if (data.status == \"success\") {\n        console.log(\"success\");\n        setUser(data.data)\n        console.log(user)\n        \n      } else {\n        console.log(\"error\");\n        \n      }\n    } catch (error) {\n      console.error(error);\n    } \n  };\n  const loadTopic = async values => {\n    const url = \"http://localhost:81/topic/getTopic\";\n    try {\n      const result = await fetch(url);\n      const data = await result.json();\n      //console.log(data)\n\n      if (data.status == \"success\") {\n        console.log(\"success\");\n        setTopic(data.data)\n        //console.log(topic)\n        \n      } else {\n        console.log(\"error\");\n        \n      }\n    } catch (error) {\n      console.error(error);\n    } \n  };\n\n      //function for displaying alert\n      function Alert(props) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n      }\n//Open Participants Dialog\n  const handleClickOpen = () => {\n    loadUser();\n    setOpen(true);\n    \n  };\n  \n  const handleClickOpenTopic =()=>{\n    loadTopic();\n    console.log(topic);\n    setOpenTopic(true);\n  }\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleCloseTopic = () => {\n    setOpenTopic(false);\n    console.log(topicsArr);\n    // console.log(selectionModelTopic);\n  };\n  const handleCloseAlert = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenAlert(false);\n  };\n /*  const addId=(data)=>{\n    var ln = data.length;\n    console.log(\"add id starts\")\n    for(var i=0; i<ln;i++)\n    {\n      console.log(i);\n      data[i].id=i;\n    }\n    return data;\n  } */\n  const SaveParticipants=()=>\n  {\n    setParticipantsArr(member);\n    setSelectionModelParticipant(member.map((r) => r.id));\n    console.log(participantsArr);\n   console.log(member);\n    handleClose();\n  }\n  const SaveTopics=()=>\n  {\n    setTopicsArr(selectedTopic);\n    setSelectionModelTopic(selectedTopic.map((r) => r.id));\n     console.log(selectionModelTopic)\n     console.log(topicsArr)\n    handleCloseTopic();\n    //console.log(calculateTotalDuration())\n    \n  }\n  const calculateTotalDuration=()=>{\n    var totalDuration=0;\n    topicsArr.map((val) => \n    totalDuration+=parseInt(val.totalTime)\n    );\n    console.log(totalDuration);\n    return totalDuration;\n  }\n  const clearForm=()=>{\n   setTopicsArr([]);\n   setSelectedDate(new Date());\n   setLocation(\"\");\n   setParticipantsArr([]);\n  }\n  //Function that handles the form submission\n  const handleSubmit = async (values,{resetForm}) => {\n    setErrorMessage(\"\");\n    const {title, description, duration} = values;\n    var participantsTmp=[];\n    var topicsTmp=[];\n    participantsArr.map((val)=>\n    participantsTmp.push(val._id)\n    );\n    topicsArr.map((val)=>\n    topicsTmp.push(val._id)\n    );\n    //console.log(topicsTmp);\n    console.log(participantsTmp);\n      if (!topicsTmp.length)\n     {\n       setErrorMessage(\"Please select at least one topic\");\n          setOpenAlert(true); \n     }\n     else if(!participantsTmp.length)\n     {\n          setErrorMessage(\"Please select at least one participant\");\n          setOpenAlert(true); \n     }\n     else if (Object.keys(location).length==0)\n    {\n      setErrorMessage(\"Please select a meeting location\");\n      setOpenAlert(true); \n    } \n    else{\n    \n    var body = {\n      title: title,\n      description: description,\n      topic: topicsTmp,\n      members:participantsTmp,\n      date: selectedDate,\n      //time: selectedDate.toLocaleTimeString(),\n      location: location,\n      duration: duration.toString()\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/meeting/meetingSave\";\n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n      console.log(text)\n\n      if (text.status == \"success\") {\n        //console.log(\"success\")\n        setSuccessMessage(text.message);\n        setOpenAlert(true); \n        resetForm({});\n        clearForm();\n        setSelectionModelParticipant([]);\n        setSelectionModelTopic([]);\n  \n      } else {\n        console.log(text.message);\n         setErrorMessage(text.message);\n        setOpenAlert(true); \n      }\n    } catch (error) {\n      console.error(error);\n    } \n /*  console.log(selectedTime.toLocaleDateString());\n  console.log(selectedTime.toLocaleTimeString()); */\n  }\n  };\n\n  //update the location selection\n  const [location, setLocation] = React.useState('');\n  const updateLocation = (event) => {\n    setLocation(event.target.value);\n  }\n  //update date\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\nreturn (\n    \n<Container maxWidth={false}>\n  <Formik\n  initialValues={{\n    title: '',\n    topics: '',\n    description: '',\n    duration: '',\n    date: '',\n    location: ' '\n  }}\n  onSubmit={handleSubmit}\n\n  // Using Yup for validation\n\n  validationSchema={Yup.object().shape({\n    title: Yup.string().max(100).required('Title is required'),\n    description: Yup.string().max(255),\n    duration: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only').test(\n      \"DOB\",\n      \"Duration must be greater than total topic durations\",\n      value => {\n        return value >= calculateTotalDuration();\n      })\n  })}\n  >\n    {props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleReset,\n        handleSubmit\n      } = props;\n      return (\n        <>\n        \n        <form onSubmit={handleSubmit} noValidate>\n          <Card>\n            <CardContent>\n              <CardHeader title=\"Create A Meeting\">\n              </CardHeader>\n          {/* </Card> */}\n\n          <Divider/>\n\n          {/* Meeting Title */}\n          <TextField\n                error={Boolean(touched.title && errors.title)}\n                fullWidth\n                helperText={touched.title && errors.title}\n                label=\"Title\"\n                margin=\"normal\"\n                name=\"title\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.title}\n                variant=\"outlined\"\n                \n              />\n        {/* Meeting Topic */}  \n      {/* Invite Topics Button */}\n       <Button \n          color=\"primary\"\n          variant=\"contained\"\n          justifyContent=\"flex-start\"\n          onClick={handleClickOpenTopic}>\n            Select topic\n          </Button> \n      <Dialog onClose={handleCloseTopic} aria-labelledby=\"customized-dialog-title\" open={openTopic}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseTopic}>\n          Select Topics\n        </DialogTitle>\n        <DialogContent dividers> \n             <div style={{ height: 400, width: '100%' }}> \n             {/* {console.log(topicsArr)} */}\n                <DataGrid \n                  \n                  rows={topic}\n                  columns={topicColumns}\n                  pageSize={5} \n                  checkboxSelection\n                  selectionModel={selectionModelTopic} \n                  onSelectionModelChange={(e) => {\n                     \n                     const selectedIDs = new Set(e.selectionModel);\n                     console.log(selectedTopic)\n                     setSelectedTopic(topic.filter((r) =>\n                       selectedIDs.has(r.id))\n                       \n                     )} }\n                  \n                />   \n                      \n                    \n  \n            </div>\n            \n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={SaveTopics} color=\"primary\">\n            Save Topics\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n    {/* </div>  */}\n\n\n        {/* Meeting Description */}\n        <TextField\n          error={Boolean(touched.description && errors.description)}\n          fullWidth\n          helperText={touched.description && errors.description}\n          label=\"Description\"\n          margin=\"normal\"\n          name=\"description\"\n          onBlur={handleBlur}\n          onChange={handleChange}\n          value={values.description}\n          variant=\"outlined\"\n          multiline\n          rows={3}\n        />\n\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"dd/MM/yyyy\"\n          margin=\"normal\"\n          minDate={minDate}\n          id=\"date-picker-inline\"\n          label=\"Meeting Date\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        <br></br>\n        <KeyboardTimePicker\n          margin=\"normal\"\n          id=\"time-picker\"\n          label=\"Meeting Time\"\n          minDate={minDate}\n          value={selectedDate}\n          keyboardIcon={<ScheduleIcon />}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change time',\n          }}\n        />\n        </MuiPickersUtilsProvider>\n        \n        {/* Meeting Duration */}\n        <TextField\n          error={Boolean(touched.duration && errors.duration)}\n          fullWidth\n          helperText={touched.duration && errors.duration}\n          label=\"Duration in minutes\"\n          margin=\"normal\"\n          name=\"duration\"\n          onBlur={handleBlur}\n          onChange={handleChange}\n          value={values.duration}\n          variant=\"outlined\"\n        />\n\n        {/* Meeting Location */}\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"location-input-label\">Location</InputLabel>\n        <Select\n          labelId=\"topic-input-label\"\n          id=\"location-input\"\n          value={location}\n          onChange={updateLocation}\n          label=\"Topics\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          >\n            <MenuItem value=\"\"> <em>None</em></MenuItem>\n            <MenuItem value={\"Meeting Room 1\"}>Meeting Room 1</MenuItem>\n            <MenuItem value={\"Meeting Room 2\"}>Meeting Room 2</MenuItem>\n            <MenuItem value={\"Meeting Room 4\"}>Meeting Room 3</MenuItem>\n            <MenuItem value={\"Meeting Room 4\"}>Meeting Room 4</MenuItem>\n        </Select>\n        <br></br>\n        {/* Invite Participants Button */}\n        <Button \n          color=\"primary\"\n          variant=\"contained\"\n          justifyContent=\"flex-start\"\n          onClick={handleClickOpen}>\n            Invite Participants\n          </Button>\n        </FormControl>\n\n        </CardContent>\n           \n        <Box\n          display=\"flex\"\n          flex=\"1\"\n          flexDirection=\"row\"\n          justifyContent=\"space-between\"\n          p={3}\n        >\n          \n     \n    <div>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Invite Participants\n        </DialogTitle>\n        <DialogContent dividers>\n\n              <div style={{ height: 400, width: '100%' }}>\n            \n                <DataGrid \n                \n                 rows={user}\n                 columns={columns}\n                 pageSize={5} \n                 checkboxSelection \n                 selectionModel={selectionModelParticipant} \n                 onSelectionModelChange={(e) => {\n                    \n                    const selectedIDs = new Set(e.selectionModel);\n                    console.log(member)\n                    setMember(user.filter((r) =>\n                      selectedIDs.has(r.id))\n                      \n                    )} }            \n                      />  \n                      \n       \n  \n            </div>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={SaveParticipants} color=\"primary\">\n            Save Participants\n          </Button>\n\n        </DialogActions>\n      </Dialog>\n\n    </div>\n\n        {/* Cretae Meeting button */}\n          <Button \n          color=\"primary\"\n          variant=\"contained\"\n          justifyContent=\"flex-end\"\n          disabled={isSubmitting}\n            type=\"submit\"\n            variant=\"contained\">\n            Create Meeting\n          </Button>\n          </Box>\n\n        </Card>\n        </form>\n        </>\n      );\n    }}\n  \n  </Formik>\n\n     <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}>\n    {!Object.keys(errorMessage).length == 0 ? \n     \n         (<Alert onClose={handleCloseAlert} severity=\"Error\">\n         {errorMessage}  \n     </Alert>)\n        :(<Alert onClose={handleCloseAlert} severity=\"success\">\n            {successMessage}  \n        </Alert>)}\n        \n        \n      </Snackbar> \n</Container>\n\n  );\n};\n\nexport default CreateMeetingForm;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\Notifications.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\TopBar.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js",["209","210"],"import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport {\n  Card, \n} from '@material-ui/core';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MeetingListView from \".\";\n\nconst localizer = momentLocalizer(moment);\n\nclass CalendarView extends Component {\n  state = {\n    events: [\n      {\n        start: moment().toDate(),\n        end: moment()\n          .add(0, \"days\")\n          .toDate(),\n        title: \"TBKmeet Meeting\"\n      }\n    ]\n  };\n \n\n  render() {\n    const {meetings}= this.props.meetings;\n    console.log(moment()\n    .add(1, \"days\")\n    .toDate())\n /*   for(let i=1;i<this.props.meetings.length-1;i++)\n  {\n    this.state.eventss[i].start=Date.parse(this.props.meetings[i].date);\n    this.state.eventss[i].end=Date.parse(this.props.meetings[i].date);\n    this.state.eventss[i].title=this.props.meetings[i].title;\n  }  */\n  const newEvents = this.props.meetings.map(event => ({\n    start:event.date,\n    end:event.date,\n    title: event.title\n  }));\n    return (\n\n      <Card\n      \n    >\n      <div className=\"App\">\n      \n        <Calendar\n          localizer={localizer}\n          defaultDate={new Date()}\n          defaultView=\"month\"\n          events={newEvents}\n          views={['month']}\n          style={{ height: \"80vh\" , width:\"100%\"}}\n        />\n      </div>\n      </Card>\n    );\n  }\n}\n\nexport default CalendarView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\data.js",["211"],"import { v4 as uuid } from 'uuid';\n\nexport default [\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-2',\nmeetingTopic:'Budget',\ndate:'22/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Brain Storm Meeting',\nmeetingTopic:'Productivity',\ndate:'02/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Online',\n    building: '',\n    room:''    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Online',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  \n];\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Results.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Logo.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Password.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\ProfileDetails.js",["212"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\n\nconst cities = [\n  {\n    value: 'ankara',\n    label: 'Ankara'\n  },\n  {\n    value: 'izmir',\n    label: 'Izmir'\n  },\n  {\n    value: 'istanbul',\n    label: 'Istanbul'\n  }\n];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst ProfileDetails = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const [values, setValues] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    city: '',\n    country: ''\n  });\n\n  const handleChange = (event) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return (\n    <form\n      autoComplete=\"off\"\n      noValidate\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Card>\n        <CardHeader\n          subheader=\"The information can be edited\"\n          title=\"Profile\"\n        />\n        <Divider />\n        <CardContent>\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                helperText=\"Please specify the first name\"\n                label=\"First name\"\n                name=\"firstName\"\n                onChange={handleChange}\n                required\n                value={values.firstName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Last name\"\n                name=\"lastName\"\n                onChange={handleChange}\n                required\n                value={values.lastName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Email Address\"\n                name=\"email\"\n                onChange={handleChange}\n                required\n                value={values.email}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Company\"\n                name=\"company\"\n                onChange={handleChange}\n                required\n                //value={values.email}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              \n            </Grid>\n           \n          \n          </Grid>\n        </CardContent>\n        <Divider />\n        <Box\n          display=\"flex\"\n          justifyContent=\"flex-end\"\n          p={2}\n        >\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Save details\n          </Button>\n        </Box>\n      </Card>\n    </form>\n  );\n};\n\nProfileDetails.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ProfileDetails;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Profile.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\topicList.js",["213","214"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles\n  \n} from '@material-ui/core';\nimport Async from 'react-async';\nimport { CompareArrowsOutlined } from '@material-ui/icons';\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n\n  /* tableRow: {\n    height: 30\n  }, */\n}));\n\n/* \nconst deneme=(async res=>{\nconst url=\"http://localhost:81/topic/getTopic\";\nresponse = await fetch(url);\nconst data = await response.json();\nconsole.log(data);}) */\n\nconst TopicList = ({ className,  ...rest }) => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n    setPage(0);\n  };\n  const [topic, setTopic]=useState([]);    \n  const emptyRows = limit - Math.min(limit, topic.length - page * limit);\n  \n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n  const getTopics = async values => {\n    const url = \"http://localhost:81/topic/getTopic\";\n    try {\n      const result = await fetch(url);\n      const data = await result.json();\n      // console.log(data)\n\n      if (data.status == \"success\") {\n        // console.log(\"success\");\n        setTopic(data.data)\n        // console.log(topic)\n        \n      } else {\n        console.log(\"error\");\n        \n      }\n    } catch (error) {\n      console.error(error);\n    } \n  };\n\n   \n  \n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n     \n      <PerfectScrollbar>\n        <Box minWidth={1050}>\n        <Async promiseFn={getTopics}>\n          \n          <Table>\n            <TableHead>\n              <TableRow>\n               \n              <TableCell>\n                  Title\n                </TableCell>\n                <TableCell>\n                  Duration\n                </TableCell>\n                <TableCell>\n                  Category\n                </TableCell>\n                <TableCell>\n                  Meeting Output\n                </TableCell>\n                <TableCell>\n                  \n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n               {topic.slice( page* limit, page * limit + limit).map((topic) => (\n                <TableRow\n                  hover\n                 key={topic._id}\n                 className={classes.tableRow}\n                >\n                 \n                  <TableCell>\n                    <Box\n                      alignItems=\"center\"\n                      display=\"flex\"\n                    >\n                      \n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"body1\"\n                      >\n                        {topic.title}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                     {topic.totalTime } minutes \n                  </TableCell>\n                  <TableCell>\n                  {topic.category}  \n                  </TableCell>\n                  <TableCell>\n                  {topic.information &&(\n                    <p>Information Meeting</p>\n                  )}\n                  {topic.decision &&(\n                    <p>Decision Meeting</p>\n                  )}\n                 \n                  </TableCell>\n                  <TableCell>\n                   \n                  </TableCell>\n                  \n                </TableRow>\n              ))} \n               {emptyRows > 0 && (\n                <TableRow style={{ height:  56 * emptyRows }}>\n                  <TableCell colSpan={5} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n          </Async>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={topic.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\n\nexport default TopicList;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\createTopicForm.js",["215","216","217","218","219","220"],"import React,{useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Container,\n  Select,\n  InputLabel ,\n  MenuItem,\n  TextField,\n  Divider,\n  FormLabel ,\n  makeStyles,\n  Card,\n  CardHeader,\n  Checkbox,\n  FormControlLabel ,\n  CardContent,\n  Snackbar,\n  FormControl\n} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  },\n  formControl: {\n    minWidth: 150,\n    maxWidth: 300,\n  }\n}));\n\n\nconst CreateTopicForm = props => {\n\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [open, setOpen] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n  var [successMessage,setSuccessMessage]=useState(\"\");\n  const [category, setCategory] = React.useState('');\n  const [state, setState] = React.useState({\n    checkedDecision: false,\n    checkedInfo: false,\n  });\n  const { checkedDecision, checkedInfo } = state;\n  const error = [checkedDecision, checkedInfo].filter((v) => v).length < 1;\n  \n  //Alert Function\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n//Close func for closing the alert\nconst handleClose = (event, reason) => {\n  if (reason === 'clickaway') {\n    return;\n  }\n  setOpen(false);\n};\nconst clearForm = () => {\n setCategory(\"\");\n setState(state.checkedDecision=false);\n setState(state.checkedInfo=false);\n};\n  // The function that handles the logic when submitting the form\n  const handleSubmit = async (values,{resetForm}) => {\n    setErrorMessage(\"\");\n    // This function received the values from the form\n    // The line below extract the two fields from the values object.\n       if(Object.keys(category).length == 0)\n     {\n      \n        setErrorMessage(\"Please select a category\");\n          setOpen(true); \n          \n     } \n     else if(error)\n     {\n      setErrorMessage(\"Please select at least one output type\");\n      setOpen(true); \n     }\n     else\n    {\n      \n    const { title, description,totalTime } = values;\n    var body = {\n        title: title,\n        description: description,\n        totalTime: totalTime,\n        category: category,\n        decision:checkedDecision,\n        information: checkedInfo\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/topic/topicSave\";\n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n      console.log(text)\n\n      if (text.status == \"success\") {\n        //console.log(\"success\")\n        setSuccessMessage(text.message);\n        setOpen(true);\n        //Form reset must be done!!!\n        resetForm({});\n        clearForm();\n      } else {\n        console.log(text.message);\n        setErrorMessage(text.message);\n        setOpen(true);\n      }\n    } catch (error) {\n      console.error(error);\n    } \n   }\n  }; \n\n  //For updating the selector -duration time-\n  \n  const updateCategory = (event) => {\n    setCategory(event.target.value);\n    console.log(category);\n  };\n  \n\n  const handleCB = (event,value) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    \n  };\n  \n  // Returning the part that should be rendered\n  // Just set handleSubmit as the handler for the onSubmit call.\n  return (\n    \n   <Container maxWidth={false}>\n    <Formik\n      initialValues={{\n        title: '',\n        description: '',\n        category:\"\",\n        totalTime:''\n      }}\n      onSubmit={handleSubmit}\n\n      //********Using Yup for validation********/\n\n      validationSchema={Yup.object().shape({\n        title: Yup.string().max(100).required('Title is required'),\n        description: Yup.string().max(255).required('Description is required'),\n       \n        totalTime: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only')\n        \n      })}\n      \n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        } = props;\n        return (\n          <>\n          \n            <form onSubmit={handleSubmit} noValidate>\n            <Card>\n            <CardContent>\n            <CardHeader\n          subheader=\"Please enter the necessary information for creating a topic\"\n          title=\"Create Topic\"\n        />\n        <Divider />\n                \n              <TextField\n                error={Boolean(touched.title && errors.title)}\n                fullWidth\n                helperText={touched.title && errors.title}\n                label=\"Title\"\n                margin=\"normal\"\n                name=\"title\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.title}\n                variant=\"outlined\"\n                \n              />\n              <TextField\n                error={Boolean(touched.description && errors.description)}\n                fullWidth\n                helperText={touched.description && errors.description}\n                label=\"Description\"\n                margin=\"normal\"\n                name=\"description\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.description}\n                variant=\"outlined\"\n                multiline\n                rows={5}\n              />\n              <TextField\n                error={Boolean(touched.totalTime && errors.totalTime)}\n                fullWidth\n                helperText={touched.totalTime && errors.totalTime}\n                label=\"Duration in minutes\"\n                margin=\"normal\"\n                name=\"totalTime\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.totalTime}\n                variant=\"outlined\"\n              />\n        \n        <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={category}\n          onChange={updateCategory}\n          label=\"Category\"\n          \n        > \n          <MenuItem value={\"\"}></MenuItem>  \n          <MenuItem value={\"Budget Meeting\"}>Budget Meeting</MenuItem>\n          <MenuItem value={\"HR Meeting\"}>HR Meeting</MenuItem>\n          <MenuItem value={\"Project Meeting\"}>Project Meeting</MenuItem>\n        </Select>\n      </FormControl>\n          <br/><br/>\n        <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\n          <FormLabel component=\"legend\">Select at least one meeting output</FormLabel>\n        <FormControlLabel\n          control={<Checkbox checked={state.checkedDecision} onChange={handleCB} name=\"checkedDecision\" value={checkedDecision}/>}\n          label=\"Decision\"\n        /> \n       <FormControlLabel\n          control={<Checkbox checked={state.checkedInfo} onChange={handleCB} name=\"checkedInfo\" value={checkedInfo} />}\n          label=\"Information \"\n        />\n        </FormControl>\n\n          </CardContent>\n          <Divider />\n          <Box\n            display=\"flex\"\n            justifyContent=\"flex-end\"\n            p={3}\n          >\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={isSubmitting}\n            type=\"submit\"\n            variant=\"contained\"\n          >\n           Create Topic\n          </Button>\n\n        </Box>\n        </Card>\n        </form>\n          </>\n        );\n      }}\n    </Formik>\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n    {!Object.keys(errorMessage).length == 0 ? \n     \n         (<Alert onClose={handleClose} severity=\"Error\">\n         {errorMessage}  \n     </Alert>)\n        :(<Alert onClose={handleClose} severity=\"success\">\n            {successMessage}  \n        </Alert>)}\n        \n        \n      </Snackbar>\n  </Container>\n  );\n};\n\nexport default CreateTopicForm;\n",{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":24,"column":7,"nodeType":"227","messageId":"228","endLine":24,"endColumn":13},{"ruleId":"229","severity":1,"message":"230","line":35,"column":5,"nodeType":"231","messageId":"232","endLine":35,"endColumn":11},{"ruleId":"233","severity":1,"message":"234","line":90,"column":23,"nodeType":"235","messageId":"232","endLine":90,"endColumn":25},{"ruleId":"225","severity":1,"message":"236","line":18,"column":10,"nodeType":"227","messageId":"228","endLine":18,"endColumn":15},{"ruleId":"233","severity":1,"message":"234","line":69,"column":23,"nodeType":"235","messageId":"232","endLine":69,"endColumn":25},{"ruleId":"237","severity":1,"message":"238","line":1,"column":1,"nodeType":"239","endLine":27,"endColumn":3},{"ruleId":"237","severity":1,"message":"240","line":1,"column":1,"nodeType":"239","endLine":35,"endColumn":3},{"ruleId":"225","severity":1,"message":"241","line":5,"column":9,"nodeType":"227","messageId":"228","endLine":5,"endColumn":18},{"ruleId":"242","severity":1,"message":"243","line":29,"column":8,"nodeType":"244","endLine":29,"endColumn":10,"suggestions":"245"},{"ruleId":"242","severity":1,"message":"246","line":82,"column":8,"nodeType":"244","endLine":82,"endColumn":10,"suggestions":"247"},{"ruleId":"225","severity":1,"message":"248","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"249","line":1,"column":28,"nodeType":"227","messageId":"228","endLine":1,"endColumn":36},{"ruleId":"225","severity":1,"message":"250","line":1,"column":38,"nodeType":"227","messageId":"228","endLine":1,"endColumn":44},{"ruleId":"225","severity":1,"message":"251","line":17,"column":8,"nodeType":"227","messageId":"228","endLine":17,"endColumn":15},{"ruleId":"225","severity":1,"message":"252","line":32,"column":10,"nodeType":"227","messageId":"228","endLine":32,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":50,"column":27,"nodeType":"235","messageId":"232","endLine":50,"endColumn":29},{"ruleId":"225","severity":1,"message":"253","line":2,"column":18,"nodeType":"227","messageId":"228","endLine":2,"endColumn":28},{"ruleId":"225","severity":1,"message":"254","line":2,"column":30,"nodeType":"227","messageId":"228","endLine":2,"endColumn":41},{"ruleId":"225","severity":1,"message":"255","line":12,"column":8,"nodeType":"227","messageId":"228","endLine":12,"endColumn":13},{"ruleId":"225","severity":1,"message":"256","line":113,"column":10,"nodeType":"227","messageId":"228","endLine":113,"endColumn":27},{"ruleId":"225","severity":1,"message":"257","line":113,"column":29,"nodeType":"227","messageId":"228","endLine":113,"endColumn":53},{"ruleId":"233","severity":1,"message":"234","line":136,"column":23,"nodeType":"235","messageId":"232","endLine":136,"endColumn":25},{"ruleId":"233","severity":1,"message":"234","line":156,"column":23,"nodeType":"235","messageId":"232","endLine":156,"endColumn":25},{"ruleId":"233","severity":1,"message":"234","line":266,"column":43,"nodeType":"235","messageId":"232","endLine":266,"endColumn":45},{"ruleId":"233","severity":1,"message":"234","line":297,"column":23,"nodeType":"235","messageId":"232","endLine":297,"endColumn":25},{"ruleId":"225","severity":1,"message":"258","line":364,"column":9,"nodeType":"227","messageId":"228","endLine":364,"endColumn":20},{"ruleId":"259","severity":1,"message":"260","line":591,"column":13,"nodeType":"261","endLine":591,"endColumn":32},{"ruleId":"233","severity":1,"message":"234","line":605,"column":40,"nodeType":"235","messageId":"232","endLine":605,"endColumn":42},{"ruleId":"225","severity":1,"message":"262","line":8,"column":8,"nodeType":"227","messageId":"228","endLine":8,"endColumn":23},{"ruleId":"225","severity":1,"message":"252","line":27,"column":12,"nodeType":"227","messageId":"228","endLine":27,"endColumn":20},{"ruleId":"237","severity":1,"message":"238","line":3,"column":1,"nodeType":"239","endLine":170,"endColumn":3},{"ruleId":"225","severity":1,"message":"263","line":16,"column":7,"nodeType":"227","messageId":"228","endLine":16,"endColumn":13},{"ruleId":"225","severity":1,"message":"264","line":18,"column":10,"nodeType":"227","messageId":"228","endLine":18,"endColumn":31},{"ruleId":"233","severity":1,"message":"234","line":55,"column":23,"nodeType":"235","messageId":"232","endLine":55,"endColumn":25},{"ruleId":"225","severity":1,"message":"253","line":2,"column":18,"nodeType":"227","messageId":"228","endLine":2,"endColumn":28},{"ruleId":"225","severity":1,"message":"265","line":44,"column":9,"nodeType":"227","messageId":"228","endLine":44,"endColumn":17},{"ruleId":"233","severity":1,"message":"234","line":77,"column":40,"nodeType":"235","messageId":"232","endLine":77,"endColumn":42},{"ruleId":"233","severity":1,"message":"234","line":115,"column":23,"nodeType":"235","messageId":"232","endLine":115,"endColumn":25},{"ruleId":"259","severity":1,"message":"260","line":274,"column":13,"nodeType":"261","endLine":274,"endColumn":32},{"ruleId":"233","severity":1,"message":"234","line":287,"column":40,"nodeType":"235","messageId":"232","endLine":287,"endColumn":42},"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"no-unused-vars","'styles' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Alert' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.","ArrayExpression",["268"],"React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["269"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'Toolbar' is defined but never used.","'meetings' is assigned a value but never used.","'RouterLink' is defined but never used.","'useNavigate' is defined but never used.","'Async' is defined but never used.","'selectParticipats' is assigned a value but never used.","'setSelectionParticipants' is assigned a value but never used.","'handleReset' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'MeetingListView' is defined but never used.","'cities' is assigned a value but never used.","'CompareArrowsOutlined' is defined but never used.","'navigate' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},"Update the dependencies array to be: [props.peer]",{"range":"274","text":"275"},"Update the dependencies array to be: [roomID]",{"range":"276","text":"277"},[681,683],"[props.peer]",[2477,2479],"[roomID]"]