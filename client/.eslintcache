[{"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\index.js":"1","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\App.js":"2","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\GlobalStyles.js":"4","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\routes.js":"5","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\theme\\index.js":"6","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\auth\\RegisterView.js":"7","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\errors\\NotFoundView.js":"8","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\auth\\LoginView.js":"9","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\theme\\typography.js":"10","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createMeeting\\index.js":"11","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createTopic\\index.js":"12","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\topicPool\\index.js":"13","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\MainLayout\\index.js":"14","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\index.js":"15","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\index.js":"16","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\index.js":"17","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\index.js":"18","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js":"19","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyMeeting\\index.js":"20","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyTopic\\index.js":"21","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\index.js":"22","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\attendMeeting\\Room\\index.js":"23","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\Page.js":"24","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\linearGradient.js":"25","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js":"26","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\Notifications.js":"27","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\Password.js":"28","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\ProfileDetails.js":"29","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\Profile.js":"30","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\TopBar.js":"31","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyTopic\\modifyTopicForm.js":"32","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyMeeting\\ModifyMeetingForm.js":"33","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\Logo.js":"34","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js":"35","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js":"36","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Results.js":"37","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\MainLayout\\TopBar.js":"38","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\theme\\shadows.js":"39","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\topicPool\\topicList.js":"40","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createTopic\\createTopicForm.js":"41","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createMeeting\\createMeetingForm.js":"42","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js":"43","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js":"44","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\features\\userSlice.js":"45","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meetingHistory\\index.js":"46","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meetingHistory\\meetingHistoryList.js":"47","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\auth\\ForgotPassword.js":"48"},{"size":673,"mtime":1620251060952,"results":"49","hashOfConfig":"50"},{"size":759,"mtime":1620251060950,"results":"51","hashOfConfig":"50"},{"size":375,"mtime":1615306465169,"results":"52","hashOfConfig":"50"},{"size":709,"mtime":1615306465046,"results":"53","hashOfConfig":"50"},{"size":2748,"mtime":1620251060955,"results":"54","hashOfConfig":"50"},{"size":578,"mtime":1615306465184,"results":"55","hashOfConfig":"50"},{"size":10127,"mtime":1620251060959,"results":"56","hashOfConfig":"50"},{"size":1615,"mtime":1615306465317,"results":"57","hashOfConfig":"50"},{"size":6614,"mtime":1620251060958,"results":"58","hashOfConfig":"50"},{"size":579,"mtime":1615306465186,"results":"59","hashOfConfig":"50"},{"size":1032,"mtime":1615306465276,"results":"60","hashOfConfig":"50"},{"size":948,"mtime":1615306465300,"results":"61","hashOfConfig":"50"},{"size":739,"mtime":1615474604181,"results":"62","hashOfConfig":"50"},{"size":1050,"mtime":1615306465167,"results":"63","hashOfConfig":"50"},{"size":1401,"mtime":1615306465150,"results":"64","hashOfConfig":"50"},{"size":1438,"mtime":1615306465209,"results":"65","hashOfConfig":"50"},{"size":944,"mtime":1615306465314,"results":"66","hashOfConfig":"50"},{"size":696,"mtime":1615306465361,"results":"67","hashOfConfig":"50"},{"size":428,"mtime":1615806934468,"results":"68","hashOfConfig":"50"},{"size":1032,"mtime":1618947772117,"results":"69","hashOfConfig":"50"},{"size":988,"mtime":1618947772119,"results":"70","hashOfConfig":"50"},{"size":3463,"mtime":1620383149054,"results":"71","hashOfConfig":"50"},{"size":10835,"mtime":1620383100161,"results":"72","hashOfConfig":"50"},{"size":490,"mtime":1615306465050,"results":"73","hashOfConfig":"50"},{"size":388,"mtime":1615306465070,"results":"74","hashOfConfig":"50"},{"size":3519,"mtime":1620251060960,"results":"75","hashOfConfig":"50"},{"size":3245,"mtime":1615306465349,"results":"76","hashOfConfig":"50"},{"size":5949,"mtime":1620251060956,"results":"77","hashOfConfig":"50"},{"size":3560,"mtime":1617433681626,"results":"78","hashOfConfig":"50"},{"size":1830,"mtime":1617433681623,"results":"79","hashOfConfig":"50"},{"size":2347,"mtime":1620383100160,"results":"80","hashOfConfig":"50"},{"size":9729,"mtime":1620251060964,"results":"81","hashOfConfig":"50"},{"size":18437,"mtime":1620251060964,"results":"82","hashOfConfig":"50"},{"size":187,"mtime":1615306465048,"results":"83","hashOfConfig":"50"},{"size":2004,"mtime":1615306465345,"results":"84","hashOfConfig":"50"},{"size":5552,"mtime":1618055272474,"results":"85","hashOfConfig":"50"},{"size":8527,"mtime":1620383100164,"results":"86","hashOfConfig":"50"},{"size":755,"mtime":1615306465166,"results":"87","hashOfConfig":"50"},{"size":1645,"mtime":1615306465185,"results":"88","hashOfConfig":"50"},{"size":8078,"mtime":1620056366506,"results":"89","hashOfConfig":"50"},{"size":8786,"mtime":1618055272406,"results":"90","hashOfConfig":"50"},{"size":17675,"mtime":1618055272404,"results":"91","hashOfConfig":"50"},{"size":4065,"mtime":1620251060953,"results":"92","hashOfConfig":"50"},{"size":1722,"mtime":1615306465123,"results":"93","hashOfConfig":"50"},{"size":498,"mtime":1619549367393,"results":"94","hashOfConfig":"50"},{"size":781,"mtime":1619549367453,"results":"95","hashOfConfig":"50"},{"size":4925,"mtime":1620056366504,"results":"96","hashOfConfig":"50"},{"size":9767,"mtime":1620383100162,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1auxlmj",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"100"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"100"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"100"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"100"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\index.js",[],["218","219"],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\App.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\GlobalStyles.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\routes.js",["220"],"import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport DashboardLayout from 'src/layouts/DashboardLayout';\r\nimport MainLayout from 'src/layouts/MainLayout';\r\nimport AccountView from 'src/views/account/AccountView';\r\nimport MeetingListView from 'src/views/meeting/MeetingListView';\r\nimport DashboardView from 'src/views/dashboard/DashboardView';\r\nimport LoginView from 'src/views/auth/LoginView';\r\nimport NotFoundView from 'src/views/errors/NotFoundView';\r\nimport RegisterView from 'src/views/auth/RegisterView';\r\nimport SettingsView from 'src/views/settings/SettingsView';\r\nimport CreateTopic from 'src/views/createTopic';\r\nimport CreateMeeting from 'src/views/createMeeting';\r\nimport TopicPool from 'src/views/topicPool';\r\nimport AttendMeetingView from 'src/views/attendMeeting/AttendMeetingtView';\r\nimport Room from 'src/views/attendMeeting/Room';\r\nimport ModifyMeeting from 'src/views/modifyMeeting';\r\nimport ModifyTopic from 'src/views/modifyTopic';\r\nimport MeetingHistoryList from 'src/views/meetingHistory';\r\nimport ForgotPassword from 'src/views/auth/ForgotPassword';\r\n//const user = this.state.user\r\nconst routes = (loggedIn) => [\r\n  {\r\n    path: 'app',\r\n    element: loggedIn ? <DashboardLayout /> : <Navigate to=\"/login\"/>,\r\n    children: [\r\n      { path: 'account', element: <AccountView /> },\r\n      { path: 'meetings', element: <MeetingListView /> },\r\n      { path: 'dashboard', element: <DashboardView /> },\r\n      { path: 'settings', element: <SettingsView /> },\r\n      { path: 'createTopic', element: <CreateTopic/> },\r\n      { path: 'createMeeting', element: <CreateMeeting/> },\r\n      { path: 'topics', element: <TopicPool/> },\r\n      { path: '*', element: <Navigate to=\"/404\" /> },\r\n      { path: 'attendMeeting', element: <AttendMeetingView /> },\r\n      { path: 'room/:roomID', element: <Room /> },\r\n      { path: 'modifyMeeting/:meetingId', element: <ModifyMeeting /> },\r\n      { path: 'modifyTopic/:topicId', element: <ModifyTopic /> },\r\n      { path: 'meetingHistory', element: <MeetingHistoryList /> }\r\n    ]\r\n  },\r\n  {\r\n    path: '/',\r\n    element: !loggedIn ?  <MainLayout /> : <Navigate to=\"/app/dashboard\" />,\r\n    children: [\r\n      { path: 'login', element: <LoginView /> },\r\n      { path: 'register', element: <RegisterView /> },\r\n      { path: 'forgotPassword', element: <ForgotPassword /> },\r\n      { path: '404', element: <NotFoundView /> },\r\n      { path: '/', element: <Navigate to=\"/Login\" /> },\r\n      { path: '*', element: <Navigate to=\"/404\" /> }\r\n    ]\r\n  },\r\n  {\r\n    path: 'meetings',\r\n    element: loggedIn ? <MainLayout  /> : <Navigate to=\"/login\"/>,\r\n    children: [\r\n      { path: 'room/:roomID', element: <Room /> },\r\n    ]\r\n\r\n  }\r\n  \r\n];\r\n\r\nexport default routes;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\theme\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\auth\\RegisterView.js",["221","222","223"],"import React, {useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  FormHelperText,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  Grid,\r\n  Snackbar,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport linearGradient from 'src/components/linearGradient';\r\nimport Image from 'src/imgs/meeting_register_img_2.jpg'; // Import using relative path\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst styles = {\r\n    root: {\r\n       \r\n    }\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n    height: '100vh'\r\n  },\r\n  image:{\r\n    backgroundImage: `url(${Image})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"center\",\r\n    backgroundSize: \"cover\",\r\n    height: '100vh',\r\n    marginTop: '-24px',\r\n  }\r\n}));\r\n\r\nconst RegisterView = props => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n\r\n  //Alert Function \r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n//Close func for closing the alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async values => {\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n    const { email, password, firstName, lastName, companyName } = values;\r\n    var body = {\r\n      password: password,\r\n      email: email,\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      companyName: companyName\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/auth/signup\";\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        console.log(\"success\")\r\n        navigate('/login', { replace: true });\r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message)\r\n        setOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Register\"\r\n    >\r\n       \r\n        <Grid\r\n          container\r\n          spacing={0}\r\n        >\r\n            <CssBaseline />\r\n            <Grid\r\n            className={classes.image}\r\n          \r\n            lg={6}\r\n            md={2}\r\n            xl={6}\r\n            xs={0}\r\n          >\r\n            \r\n          </Grid>\r\n          <Grid\r\n         elevation={6} square\r\n            lg={6}\r\n            md={10}\r\n            xl={6}\r\n            xs={12}\r\n          >\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"sm\">\r\n          <Formik\r\n            initialValues={{\r\n              email: '',\r\n              firstName: '',\r\n              lastName: '',\r\n              password: '',\r\n              companyName: '',\r\n              policy: false\r\n            }}\r\n            onSubmit={handleSubmit}\r\n\r\n            validationSchema={\r\n              Yup.object().shape({\r\n                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                firstName: Yup.string().max(255).required('First name is required'),\r\n                lastName: Yup.string().min(8, 'Password must be at least 8 characters').required('Last name is required'),\r\n                password: Yup.string().max(255).required('password is required'),\r\n                companyName: Yup.string().max(255).required('company name is required'),\r\n                policy: Yup.boolean().oneOf([true], 'This field must be checked')\r\n              })\r\n            }\r\n          >\r\n            {props => {\r\n              const {\r\n              values,\r\n              touched,\r\n              errors,\r\n              isSubmitting,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit\r\n            } = props;\r\n            return (\r\n              <form onSubmit={handleSubmit}>\r\n                <Box mb={3}>\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"h2\"\r\n                  >\r\n                    Create new account\r\n                  </Typography>\r\n                  <Typography\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                    variant=\"body2\"\r\n                  >\r\n                    Use your email to create new account\r\n                  </Typography>\r\n                </Box>\r\n                <TextField\r\n                  error={Boolean(touched.firstName && errors.firstName)}\r\n                  fullWidth\r\n                  helperText={touched.firstName && errors.firstName}\r\n                  label=\"First name\"\r\n                  margin=\"normal\"\r\n                  name=\"firstName\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.firstName}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.lastName && errors.lastName)}\r\n                  fullWidth\r\n                  helperText={touched.lastName && errors.lastName}\r\n                  label=\"Last name\"\r\n                  margin=\"normal\"\r\n                  name=\"lastName\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.lastName}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.email && errors.email)}\r\n                  fullWidth\r\n                  helperText={touched.email && errors.email}\r\n                  label=\"Email Address\"\r\n                  margin=\"normal\"\r\n                  name=\"email\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.password && errors.password)}\r\n                  fullWidth\r\n                  helperText={touched.password && errors.password}\r\n                  label=\"Password\"\r\n                  margin=\"normal\"\r\n                  name=\"password\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.companyName && errors.companyName)}\r\n                  fullWidth\r\n                  helperText={touched.companyName && errors.companyName}\r\n                  label=\"Company Name\"\r\n                  margin=\"normal\"\r\n                  name=\"companyName\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.companyName}\r\n                  variant=\"outlined\"\r\n                />\r\n                <Box\r\n                  alignItems=\"center\"\r\n                  display=\"flex\"\r\n                  ml={-1}\r\n                >\r\n                  <Checkbox\r\n                    checked={values.policy}\r\n                    name=\"policy\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <Typography\r\n                    color=\"textSecondary\"\r\n                    variant=\"body1\"\r\n                  >\r\n                    I have read the\r\n                    {' '}\r\n                    <Link\r\n                      color=\"primary\"\r\n                      component={RouterLink}\r\n                      to=\"#\"\r\n                      underline=\"always\"\r\n                      variant=\"h6\"\r\n                    >\r\n                      Terms and Conditions\r\n                    </Link>\r\n                  </Typography>\r\n                </Box>\r\n                {Boolean(touched.policy && errors.policy) && (\r\n                  <FormHelperText error>\r\n                    {errors.policy}\r\n                  </FormHelperText>\r\n                )}\r\n                <Box my={2}>\r\n                  <Button\r\n                    className={linearGradient().root}\r\n                    disabled={isSubmitting}\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    Sign up now\r\n                  </Button>\r\n                </Box>\r\n                <Typography\r\n                  color=\"textSecondary\"\r\n                  variant=\"body1\"\r\n                >\r\n                  Have an account?\r\n                  {' '}\r\n                  <Link\r\n                    component={RouterLink}\r\n                    to=\"/login\"\r\n                    variant=\"h6\"\r\n                  >\r\n                    Sign in\r\n                  </Link>\r\n                </Typography>\r\n              </form>\r\n            )}}\r\n          </Formik>\r\n        </Container>\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"Error\">\r\n            {errorMessage}  \r\n        </Alert>\r\n      </Snackbar>\r\n      </Box>\r\n      </Grid>\r\n      \r\n      </Grid>\r\n    \r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default RegisterView;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\errors\\NotFoundView.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\auth\\LoginView.js",["224","225","226","227","228","229","230","231","232"],"import React, {useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  Snackbar,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Page from 'src/components/Page';\r\nimport linearGradient from 'src/components/linearGradient';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Cookies from 'js-cookie'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst LoginView = props => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n\r\n  //Alert Function \r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n//Close func for closing the alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async values => {\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n    const { email, password } = values;\r\n    var body = {\r\n      password: password,\r\n      email: email\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      credentials: 'include',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/auth/login\";\r\n   \r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      const head = await response.headers\r\n      console.log( head)\r\n      const user = text.data\r\n\r\n      if (text.status == \"success\") {\r\n        console.log(\"success\")\r\n        localStorage.setItem('user', JSON.stringify(user))\r\n        localStorage.setItem('loggedIn', true)\r\n        navigate('/app/dashboard', { replace: true });\r\n        \r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message)\r\n        setOpen(true);    \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // Returning the part that should be rendered\r\n  // Just set handleSubmit as the handler for the onSubmit call.\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Login\"\r\n    >\r\n      \r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"sm\">\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        password: ''\r\n      }}\r\n      onSubmit={handleSubmit}\r\n\r\n      //********Using Yup for validation********/\r\n\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n        password: Yup.string().max(255).required('Password is required')\r\n      })}\r\n    >\r\n      {props => {\r\n        const {\r\n          email,\r\n          password,\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit\r\n        } = props;\r\n        return (\r\n          <>\r\n            <form onSubmit={handleSubmit} noValidate>\r\n                <Box mb={3}>\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"h2\"\r\n                  >\r\n                    Sign in\r\n                  </Typography>\r\n                  \r\n                </Box>\r\n              <TextField\r\n                error={Boolean(touched.email && errors.email)}\r\n                fullWidth\r\n                helperText={touched.email && errors.email}\r\n                label=\"Email Address\"\r\n                margin=\"normal\"\r\n                name=\"email\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                type=\"email\"\r\n                value={values.email}\r\n                variant=\"outlined\"\r\n                //className={errors.email && touched.email && \"error\"}\r\n              />\r\n              <TextField\r\n                error={Boolean(touched.password && errors.password)}\r\n                fullWidth\r\n                helperText={touched.password && errors.password}\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                name=\"password\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                type=\"password\"\r\n                value={values.password}\r\n                variant=\"outlined\"\r\n              />\r\n              \r\n              <Box my={2}>\r\n                <Button \r\n                className={linearGradient().root}\r\n                    disabled={isSubmitting}\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\" >\r\n                      Sign in now\r\n                </Button>\r\n              </Box>\r\n              <Typography\r\n                  color=\"textSecondary\"\r\n                  variant=\"body1\"\r\n                >\r\n                  Don&apos;t have an account?\r\n                  {' '}\r\n                  <Link\r\n                    component={RouterLink}\r\n                    to=\"/register\"\r\n                    variant=\"h6\"\r\n                  >\r\n                    Sign up\r\n                  </Link>\r\n                </Typography>\r\n                <Typography\r\n                  color=\"textSecondary\"\r\n                  variant=\"body1\"\r\n                >\r\n    \r\n                  <Link\r\n                    component={RouterLink}\r\n                    to=\"/forgotPassword\"\r\n                    variant=\"h6\"\r\n                  >\r\n                    Forgot your Password?\r\n                  </Link>\r\n                </Typography>\r\n            </form>\r\n          </>\r\n        );\r\n      }}\r\n    </Formik>\r\n  </Container>  \r\n</Box>\r\n<Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"Error\">\r\n            {errorMessage}  \r\n        </Alert>\r\n      </Snackbar>\r\n</Page>\r\n  );\r\n};\r\n\r\nexport default LoginView;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\theme\\typography.js",["233"],"export default {\r\n  h1: {\r\n    fontWeight: 500,\r\n    fontSize: 35,\r\n    letterSpacing: '-0.24px'\r\n  },\r\n  h2: {\r\n    fontWeight: 500,\r\n    fontSize: 29,\r\n    letterSpacing: '-0.24px'\r\n  },\r\n  h3: {\r\n    fontWeight: 500,\r\n    fontSize: 24,\r\n    letterSpacing: '-0.06px'\r\n  },\r\n  h4: {\r\n    fontWeight: 500,\r\n    fontSize: 20,\r\n    letterSpacing: '-0.06px'\r\n  },\r\n  h5: {\r\n    fontWeight: 500,\r\n    fontSize: 16,\r\n    letterSpacing: '-0.05px'\r\n  },\r\n  h6: {\r\n    fontWeight: 500,\r\n    fontSize: 14,\r\n    letterSpacing: '-0.05px'\r\n  },\r\n  overline: {\r\n    fontWeight: 500\r\n  }\r\n};\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createMeeting\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createTopic\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\topicPool\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\MainLayout\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js",["234","235","236"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport { v1 as uuid } from \"uuid\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\nconst AttendMeeting = (props) => {\r\n  let navigate = useNavigate()\r\n  function create() {\r\n      const id = uuid();\r\n      navigate(`/app/room/${id}`, {id: id});\r\n  }\r\n\r\n  return (\r\n      <button onClick={create}>Create room</button>\r\n  );\r\n};\r\n\r\nexport default AttendMeeting;","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyMeeting\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyTopic\\index.js",["237"],"import React from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport ModifyTopicForm from './modifyTopicForm';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst ModifyTopic = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Create Topic\"\r\n    >\r\n      <Container maxWidth={false}>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n        >\r\n          <Grid\r\n            item\r\n            lg={8}\r\n            md={12}\r\n            xl={9}\r\n            xs={12}\r\n          >\r\n            <ModifyTopicForm />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ModifyTopic;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\index.js",["238","239"],"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  InputAdornment,\r\n  SvgIcon,\r\n  Grid,\r\n  FormControlLabel,\r\n  Switch,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport Results from './Results';\r\nimport Toolbar from './Toolbar';\r\nimport CalendarView from './calendarView';\r\nimport { Search as SearchIcon } from 'react-feather';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst MeetingListView = () => {\r\n  const classes = useStyles();\r\n  const [meeting,setMeeting]=useState([]);\r\n    const [state, setState] = React.useState({\r\n        checkedA: true,\r\n        checkedB: false,\r\n      });\r\n    \r\n      const handleChange = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n        console.log(state);\r\n      };\r\n      const getMeetings = async values => {\r\n        const options = {\r\n          method: \"GET\",\r\n          credentials: 'include',\r\n        };\r\n        const url = \"http://localhost:81/meeting/getMeetings\";\r\n        try {\r\n          const data = await fetch(url,options);\r\n\r\n          //console.log(data)  \r\n          if (data.status == \"success\") {\r\n            // console.log(\"success\");\r\n            setMeeting(data.data)\r\n            // console.log(meeting)\r\n          } else {\r\n            console.log(\"error\");\r\n            \r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        } \r\n      };\r\n      getMeetings();\r\n      var meetingArr=[];\r\n      meetingArr.push(meeting);\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Meetings\"\r\n    >\r\n      <Container maxWidth={false}>\r\n      <div\r\n      \r\n    >\r\n      <Box mt={3}>\r\n        <Card>\r\n          <CardContent>\r\n          <Grid\r\n          container\r\n         direction=\"row\"\r\n        justify=\"space-between\"\r\n      alignItems=\"center\"\r\n>\r\n            <Box maxWidth={500} minWidth={400}>\r\n\r\n              <TextField\r\n                fullWidth\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SvgIcon\r\n                        fontSize=\"small\"\r\n                        color=\"action\"\r\n                      >\r\n                        <SearchIcon />\r\n                      </SvgIcon>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n                placeholder=\"Search meeting\"\r\n                variant=\"outlined\"\r\n              />\r\n            </Box>\r\n            \r\n            {/* switch component for calendar view */}\r\n            <Box>\r\n            <FormControlLabel\r\n            control={\r\n          <Switch\r\n            checked={state.checkedB}\r\n            onChange={handleChange}\r\n            name=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Calendar View\"\r\n      />\r\n     {/*  <EventIcon></EventIcon> */}\r\n      </Box>\r\n      </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </div>\r\n    <Box mt={3}>\r\n    {!state.checkedB ? ( \r\n          <Results meetings={meeting} />\r\n        ):(<CalendarView meetings={meeting}></CalendarView>)}\r\n </Box>\r\n      </Container>\r\n      \r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default MeetingListView;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\attendMeeting\\Room\\index.js",["240","241","242","243","244"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport styled from \"styled-components\";\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport {useParams} from 'react-router-dom';\r\nimport { id } from \"date-fns/esm/locale\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport VideocamRoundedIcon from '@material-ui/icons/VideocamRounded';\r\nimport VideocamOffRoundedIcon from '@material-ui/icons/VideocamOffRounded';\r\nimport MicRoundedIcon from '@material-ui/icons/MicRounded';\r\nimport MicOffRoundedIcon from '@material-ui/icons/MicOffRounded';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport axios from 'axios';\r\nimport Countdown from \"react-countdown\";\r\n\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 90%;\r\n    margin: auto;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst StyledVideo = styled.video`\r\n    background: black;\r\n    height: 40%;\r\n    width: 100%;\r\n`;\r\n\r\nconst Video = (props) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        props.peer.on(\"stream\", stream => {\r\n            ref.current.srcObject = stream;\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <StyledVideo playsInline autoPlay ref={ref} />\r\n    );\r\n}\r\n\r\n\r\nconst videoConstraints = {\r\n    height: window.innerHeight / 2,\r\n    width: window.innerWidth / 2\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n   button: { borderRadius: 50},\r\n   exitButton:{backgroundColor:\"#d32f2f\", \r\n   color:\"#ffebee\",\r\n   '&:hover': {\r\n    backgroundColor: '#b71c1c',\r\n    color: '#ffebee',\r\n},\r\n\r\n},\r\n   footerStyle: {\r\n    backgroundColor: fade('#262C29',0.2),\r\n    fontSize: \"20px\",\r\n    color: \"white\",\r\n    borderTop: \"1px solid #E7E7E7\",\r\n    textAlign: \"center\",\r\n    paddingLeft: \"0px\",\r\n    paddingRight: \"30px\",\r\n    paddingTop:\"10px\",\r\n    paddingBottom:\"10px\",\r\n    position: \"fixed\",\r\n    left: \"0\",\r\n    display:\"flex\",\r\n    justifyContent:\"flex-end\",\r\n    bottom: \"0\",\r\n    height: \"10%x\",\r\n    width: \"99%\"  \r\n   },\r\n   phantomStyle: {\r\n    display: \"block\",\r\n    padding: \"20px\",\r\n    height: \"1000px\",\r\n    width: \"100%\"\r\n   }\r\n  }));\r\nconst Room = (props) => {\r\n    const [peers, setPeers] = useState([]);\r\n    const [micStatus,setMicStatus]=useState(true)\r\n    const [camStatus,setCamStatus]=useState(true)\r\n    const [recordStatus,setRecordStatus]=useState(false)\r\n    const [meetingData ,setMeeting]=useState([]);\r\n    const socketRef = useRef();\r\n    const chatSocketRef = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef([]);\r\n    const params = useParams();\r\n    const roomID = params.roomID;\r\n    const classes = useStyles();\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    const [ state, setState ] = useState({ message: \"\", name: user.firstName + \" \" + user.lastName })\r\n\t  const [ chat, setChat ] = useState([])\r\n\r\n    //console.log(\"room id: \" , params.roomID)\r\n\r\n    useEffect(async () => {\r\n      const result = await axios(\r\n  \r\n        `http://localhost:81/meeting/getMeetings/${roomID}`,\r\n          {withCredentials: true}\r\n  \r\n      );\r\n      setMeeting(result.data.data)\r\n    },[]);\r\n\r\n  \r\n    const duration = meetingData.duration * 60000\r\n    console.log(duration)\r\n\r\n\r\n\r\n    useEffect(\r\n\t\t() => {\r\n\t\t\tchatSocketRef.current = io.connect(\"https://tbkmeet-chatserver.herokuapp.com/\")\r\n\t\t\tchatSocketRef.current.on(\"message\", ({ name, message }) => {\r\n\t\t\t\tsetChat([ ...chat, { name, message } ])\r\n\t\t\t})\r\n\t\t\treturn () => chatSocketRef.current.disconnect()\r\n\t\t},\r\n\t\t[ chat ]\r\n\t)\r\n\r\n\tconst onTextChange = (e) => {\r\n\t\tsetState({ ...state, [e.target.name]: e.target.value })\r\n\t}\r\n\r\n\tconst onMessageSubmit = (e) => {\r\n\t\tconst { name, message } = state\r\n\t\tchatSocketRef.current.emit(\"message\", { name, message })\r\n\t\te.preventDefault()\r\n\t\tsetState({ message: \"\", name })\r\n\t}\r\n\r\n\tconst renderChat = () => {\r\n\t\treturn chat.map(({ name, message }, index) => (\r\n\t\t\t<div key={index}>\r\n\t\t\t\t<h3>\r\n\t\t\t\t\t{name}: <span>{message}</span>\r\n\t\t\t\t</h3>\r\n\t\t\t</div>\r\n\t\t))\r\n\t}\r\n\r\n  /*   function Footer({ children }) {\r\n        return (\r\n          \r\n            <div className={classes.phantomStyle} />\r\n            \r\n          \r\n        );\r\n      } */\r\n\r\n   \r\n    function muteButtonRender() {\r\n\r\n        if(micStatus)\r\n        {\r\n          return (\r\n            \r\n            <Button onClick={muteSelf}  className={classes.button} >\r\n                <MicRoundedIcon  style={{ fontSize: 40 }}/>\r\n            </Button>\r\n            \r\n          )\r\n        }\r\n        else\r\n        {\r\n          return(\r\n          \r\n            <Button onClick={muteSelf}  className={classes.button} > \r\n            <MicOffRoundedIcon style={{ fontSize: 40 }}/>\r\n            </Button>\r\n          \r\n          )\r\n        }\r\n      }\r\n      function camButtonRender() {\r\n        //console.log(id)\r\n        if(camStatus)\r\n        {\r\n          return (\r\n            \r\n            <Button onClick={closeCamera} className={classes.button}>\r\n                <VideocamRoundedIcon\r\n                 style={{ fontSize: 40 }}\r\n                />\r\n\r\n            </Button>\r\n            \r\n          )\r\n        }\r\n        else\r\n        {\r\n          return(\r\n          \r\n            <Button onClick={closeCamera} className={classes.button}>\r\n                <VideocamOffRoundedIcon\r\n                 style={{ fontSize: 40 }}\r\n                />\r\n        </Button>\r\n          \r\n          )\r\n        }\r\n      }\r\n      function recordButtonRender() {\r\n        //console.log(id)\r\n        if(recordStatus)\r\n        {\r\n          return (\r\n            \r\n            <Button onClick={startRecord} className={classes.button} style={{ color:\"#d32f2f\"}}>\r\n                <FiberManualRecordIcon\r\n                 style={{ fontSize: 40 }}\r\n                />\r\n\r\n        </Button>\r\n            \r\n          )\r\n        }\r\n        else\r\n        {\r\n          return(\r\n          \r\n            <Button onClick={startRecord} className={classes.button} style={{ alignItems:\"center\"}}  >\r\n                <FiberManualRecordIcon\r\n                 style={{ fontSize: 40  }}\r\n                />\r\n        </Button>\r\n          \r\n          )\r\n        }\r\n      }\r\n      \r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"https://tbkmeet-videoserver.herokuapp.com/\");\r\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            socketRef.current.emit(\"join room\", roomID);\r\n            socketRef.current.on(\"all users\", users => {\r\n                const peers = [];\r\n                users.forEach(userID => {\r\n                    const peer = createPeer(userID, socketRef.current.id, stream);\r\n                    peersRef.current.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    })\r\n                    peers.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    });\r\n                })\r\n                setPeers(peers);\r\n            })\r\n\r\n            socketRef.current.on(\"user joined\", (payload) => {\r\n                const peer = addPeer(payload.signal, payload.callerID, stream);\r\n                peersRef.current.push({\r\n                  peerID: payload.callerID,\r\n                  peer,\r\n                });\r\n           \r\n              setPeers([...peersRef.current]);\r\n            });\r\n\r\n            socketRef.current.on(\"receiving returned signal\", payload => {\r\n                const item = peersRef.current.find(p => p.peerID === payload.id);\r\n                item.peer.signal(payload.signal);\r\n            });\r\n\r\n            socketRef.current.on('user disconnected', id => {\r\n                const peerObj = peersRef.current.find(p => p.peerID === id);\r\n                if(peerObj) {\r\n                    peerObj.peer.destroy();\r\n                }\r\n                const peers = peersRef.current.filter(p => p.peerID !== id);\r\n                peersRef.current = peers;\r\n                setPeers(peers);\r\n            })\r\n        })\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    function createPeer(userToSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream,\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\r\n        })\r\n\r\n        return peer;\r\n    }\r\n\r\n    function addPeer(incomingSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream,\r\n        })\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\r\n        })\r\n\r\n        peer.signal(incomingSignal);\r\n\r\n        return peer;\r\n    }\r\n    function startRecord(){\r\n        if(recordStatus)\r\n        setRecordStatus(false)\r\n        else\r\n        setRecordStatus(true)\r\n    }\r\n   function muteSelf()\r\n    {\r\n        if(micStatus)\r\n        setMicStatus(false)\r\n        else\r\n        setMicStatus(true)\r\n        userVideo.current.srcObject.getAudioTracks()[0].enabled = !userVideo.current.srcObject.getAudioTracks()[0].enabled;\r\n    }\r\n\r\n    function closeCamera()\r\n    {\r\n        if(camStatus)\r\n        setCamStatus(false)\r\n        else\r\n        setCamStatus(true)\r\n        userVideo.current.srcObject.getVideoTracks()[0].enabled = !userVideo.current.srcObject.getVideoTracks()[0].enabled;\r\n    }\r\n\r\n    return (\r\n        <Container style={{width:\"100%\"}}>\r\n            <StyledVideo muted ref={userVideo} autoPlay playsInline />\r\n            {peers.map((peer) => {\r\n                return (\r\n                    <Video key={peer.peerID} peer={peer.peer} />\r\n                );\r\n            })}\r\n            {\r\n            <div className=\"card\">\r\n\t\t\t<form onSubmit={onMessageSubmit}>\r\n\t\t\t\t<h1>Messenger</h1>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<TextField\r\n\t\t\t\t\t\tname=\"message\"\r\n\t\t\t\t\t\tonChange={(e) => onTextChange(e)}\r\n\t\t\t\t\t\tvalue={state.message}\r\n\t\t\t\t\t\tid=\"outlined-multiline-static\"\r\n\t\t\t\t\t\tvariant=\"outlined\"\r\n\t\t\t\t\t\tlabel=\"Message\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button>Send Message</button>\r\n\t\t\t</form>\r\n\t\t\t<div className=\"render-chat\">\r\n\t\t\t\t<h1>Chat Log</h1>\r\n\t\t\t\t{renderChat()}\r\n\t\t\t</div>\r\n      <Countdown date={Date.now() + 5000} >\r\n        <span>Meeting Ended</span>\r\n      </Countdown>\r\n\t\t</div> }\r\n\r\n    <div className={classes.footerStyle}>\r\n        {muteButtonRender()}\r\n        {camButtonRender()}\r\n        {recordButtonRender()}\r\n        <Button variant=\"contained\" className={classes.exitButton}> Exit</Button>\r\n        \r\n    </div>\r\n        </Container>\r\n\r\n        \r\n    );\r\n};\r\n\r\nexport default Room;","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\Page.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\linearGradient.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js",["245","246"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { v4 as uuid } from 'uuid';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  Divider,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n  Tooltip,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\n\r\nconst data = [\r\n  {\r\n    id: uuid(),\r\nmeetingName:'Budget Meeting-2',\r\nmeetingTopic:'Budget',\r\ndate:'22/03/2021',\r\ntime:'13.30'\r\n\r\n  },\r\n  {\r\n  id: uuid(),\r\nmeetingName:'Budget Meeting-2',\r\nmeetingTopic:'Budget',\r\ndate:'22/03/2021',\r\ntime:'13.30'\r\n\r\n  },\r\n  {\r\n  id: uuid(),\r\nmeetingName:'Budget Meeting-2',\r\nmeetingTopic:'Budget',\r\ndate:'22/03/2021',\r\ntime:'13.30'\r\n\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {},\r\n  actions: {\r\n    justifyContent: 'flex-end'\r\n  }\r\n}));\r\n\r\nconst UpcomingMeetings = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [meetings] = useState(data);\r\n  const [meeting,setMeeting]=useState([]);\r\n  useEffect(async () => {\r\n    const result = await axios(\r\n\r\n        \"http://localhost:81/meeting/getMeetings\",\r\n        {withCredentials: true}\r\n\r\n    );\r\n    setMeeting(result.data.data)\r\n  },[]);\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <CardHeader title=\"Upcoming Meetings\" />\r\n      <Divider />\r\n      <PerfectScrollbar>\r\n        <Box minWidth={800}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  Meeting Name\r\n                </TableCell>\r\n               \r\n                <TableCell sortDirection=\"desc\">\r\n                  <Tooltip\r\n                    enterDelay={300}\r\n                    title=\"Sort\"\r\n                  >\r\n                    <TableSortLabel\r\n                      active\r\n                      direction=\"desc\"\r\n                    >\r\n                      Date\r\n                    </TableSortLabel>\r\n                  </Tooltip>\r\n                </TableCell>\r\n                <TableCell>\r\n                  Time\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {meeting.slice(0,5).map((meeting) => (\r\n                <TableRow\r\n                  hover\r\n                  key={meeting._id}\r\n                >\r\n                  <TableCell>\r\n                    {meeting.title}\r\n                  </TableCell>\r\n                  \r\n                  <TableCell>\r\n                  {moment( meeting.date).format('DD MMM YYYY')}\r\n                  </TableCell>\r\n                  <TableCell>                      \r\n                  {moment( meeting.date).format('LT')}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"flex-end\"\r\n        p={2}\r\n      >\r\n        <Button\r\n          color=\"primary\"\r\n          endIcon={<ArrowRightIcon />}\r\n          size=\"small\"\r\n          variant=\"text\"\r\n          href=\"meetings\"\r\n        >\r\n          View all\r\n        </Button>\r\n      </Box>\r\n    </Card>\r\n  );\r\n};\r\n\r\nUpcomingMeetings.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default UpcomingMeetings;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\Notifications.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\Password.js",["247","248","249","250"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  TextField,\r\n  makeStyles,\r\n  Snackbar,\r\n  FormControl\r\n} from '@material-ui/core';\r\nimport * as Yup from 'yup';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { Formik } from 'formik';\r\nconst useStyles = makeStyles(({\r\n  root: {}\r\n}));\r\n\r\nconst Password = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n\r\n /*  const handleChange = (event) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }; */\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n  //Close func for closing the alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const handleSubmit = async (values) => {\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n    setErrorMessage(\"\");\r\n    ///setSuccessMessage(\"\")\r\n    console.log(\"tmp\")\r\n    console.log(values.password)\r\n    const {password} = values;\r\n    console.log(values.password)\r\n    //values.preventDefault()\r\n    var body = {\r\n      password: password\r\n    };\r\n    console.log(body.password)\r\n    const options = {\r\n      method: \"POST\",\r\n     credentials:\"include\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/auth/updatePassword\";\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n          //console.log(\"success\")\r\n           setSuccessMessage(text.message);\r\n           setOpen(true);\r\n           \r\n      } else {\r\n        console.log(\"This is the error message \"+text.message);\r\n        setErrorMessage(text.message);\r\n        setOpen(true);\r\n      \r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    \r\n\r\n  };\r\n  return (\r\n    <Formik\r\n    initialValues={{\r\n      password: '',\r\n      confirmPassword: '',\r\n    }}\r\n /*    onSubmit={(e) => {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }} */\r\n\r\n    //********Using Yup for validation********/\r\n  /*   validationSchema: Yup.object({\r\n      password: Yup.string().required('Password is required'),\r\n      passwordConfirmation: Yup.string()\r\n         .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    }); */\r\n\r\n    validationSchema={Yup.object().shape({\r\n      password: Yup.string().min(8, 'Password must be at least 8 characters').required('password is required'),\r\n   /*    password:Yup.lazy(\r\n        value =>\r\n          !value\r\n            ? Yup.string()\r\n            : Yup.string()\r\n                .min(6, 'Password must be at least 6 characters')\r\n                .required('Password is required'),\r\n      ), */\r\n      confirmPassword: Yup.string().min(8, 'Password must be at least 8 characters').required('password is required').oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n      \r\n    })}\r\n  >\r\n  {props => {\r\n    const {\r\n      values,\r\n      touched,\r\n      errors,\r\n      isSubmitting,\r\n      handleChange,\r\n      handleBlur,\r\n    } = props;\r\n    return (\r\n      <>\r\n    <form\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Card>\r\n        <CardHeader\r\n          subheader=\"Update password\"\r\n          title=\"Password\"\r\n        />\r\n        <Divider />\r\n        <CardContent>\r\n          <TextField\r\n            fullWidth\r\n            error={Boolean(touched.password && errors.password)}\r\n            helperText={touched.password && errors.password}\r\n            label=\"Password\"\r\n            margin=\"normal\"\r\n            name=\"password\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            value={values.password}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            error={Boolean(touched.confirmPassword && errors.confirmPassword)}\r\n            helperText={touched.confirmPassword && errors.confirmPassword}\r\n            label=\"Confirm password\"\r\n            margin=\"normal\"\r\n            name=\"confirmPassword\"\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            type=\"password\"\r\n            value={values.confirmPassword}\r\n            variant=\"outlined\"\r\n          />\r\n        </CardContent>\r\n        <Divider />\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"flex-end\"\r\n          p={2}\r\n        >\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleSubmit(values);\r\n            }}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            disabled={isSubmitting}\r\n            /* onSubmit={(e) => {\r\n              e.preventDefault();\r\n              handleSubmit();\r\n            }} */\r\n            /* disabled={isSubmitting} */\r\n          >\r\n            Update\r\n          </Button>\r\n        </Box>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleClose} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleClose} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar>\r\n      </Card>\r\n    </form>\r\n    </>\r\n    );\r\n  }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Password;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\ProfileDetails.js",["251"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst cities = [\r\n  {\r\n    value: 'ankara',\r\n    label: 'Ankara'\r\n  },\r\n  {\r\n    value: 'izmir',\r\n    label: 'Izmir'\r\n  },\r\n  {\r\n    value: 'istanbul',\r\n    label: 'Istanbul'\r\n  }\r\n];\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst ProfileDetails = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    city: '',\r\n    country: ''\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      autoComplete=\"off\"\r\n      noValidate\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Card>\r\n        <CardHeader\r\n          subheader=\"The information can be edited\"\r\n          title=\"Profile\"\r\n        />\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n          >\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                helperText=\"Please specify the first name\"\r\n                label=\"First name\"\r\n                name=\"firstName\"\r\n                onChange={handleChange}\r\n                required\r\n                value={values.firstName}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                label=\"Last name\"\r\n                name=\"lastName\"\r\n                onChange={handleChange}\r\n                required\r\n                value={values.lastName}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                required\r\n                value={values.email}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                label=\"Company\"\r\n                name=\"company\"\r\n                onChange={handleChange}\r\n                required\r\n                //value={values.email}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              \r\n            </Grid>\r\n           \r\n          \r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"flex-end\"\r\n          p={2}\r\n        >\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n          >\r\n            Save details\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </form>\r\n  );\r\n};\r\n\r\nProfileDetails.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default ProfileDetails;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\account\\AccountView\\Profile.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\TopBar.js",["252"],"import React, { useState } from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  AppBar,\r\n  Badge,\r\n  Box,\r\n  Hidden,\r\n  IconButton,\r\n  Toolbar\r\n} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport NotificationsIcon from '@material-ui/icons/NotificationsOutlined';\r\nimport InputIcon from '@material-ui/icons/Input';\r\nimport Logo from 'src/components/Logo';\r\nimport linearGradient from 'src/components/linearGradient'\r\n\r\n\r\nconst TopBar = ({\r\n  className,\r\n  onMobileNavOpen,\r\n  ...rest\r\n}) => {\r\n  const classes = linearGradient();\r\n  const [notifications] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const Logout = () => {\r\n    //dispatch(logout());\r\n    localStorage.removeItem('user')\r\n    localStorage.removeItem('loggedIn')   \r\n      const options = {\r\n        method: \"GET\",\r\n       credentials:\"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n        }\r\n      };\r\n      const url = \"http://localhost:81/auth/logout\";\r\n      try {\r\n        const response = fetch(url, options);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n\r\n      navigate('/login', { replace: true });\r\n    }\r\n\r\n  return (\r\n    <AppBar\r\n      className={clsx(classes.root, className)}\r\n      elevation={0}\r\n      {...rest}\r\n    >\r\n      <Toolbar>\r\n        <RouterLink to=\"/\">\r\n          <Logo />\r\n        </RouterLink>\r\n        <Box flexGrow={1} />\r\n        <Hidden mdDown>\r\n          <IconButton color=\"inherit\">\r\n            <Badge\r\n              badgeContent={notifications.length}\r\n              color=\"primary\"\r\n              variant=\"dot\"\r\n            >\r\n              <NotificationsIcon />\r\n            </Badge>\r\n          </IconButton>\r\n          <IconButton color=\"inherit\"  onClick= {Logout}>\r\n            <InputIcon />\r\n          </IconButton>\r\n        </Hidden>\r\n        <Hidden lgUp>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            onClick={onMobileNavOpen}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n        </Hidden>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nTopBar.propTypes = {\r\n  className: PropTypes.string,\r\n  onMobileNavOpen: PropTypes.func\r\n};\r\n\r\nexport default TopBar;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyTopic\\modifyTopicForm.js",["253","254","255","256","257","258","259","260","261"],"import React,{useState, useEffect} from 'react';\r\nimport { Link, useNavigate, useLocation,useHistory} from 'react-router-dom';\r\nimport { Redirect} from 'react-router';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\n\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  FormLabel ,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  Checkbox,\r\n  FormControlLabel ,\r\n  CardContent,\r\n  Snackbar,\r\n  FormControl\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  }\r\n}));\r\n\r\n\r\nconst ModifyTopicForm = props => {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [topic, setTopic] = React.useState('');\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const [category, setCategory] = React.useState('');\r\n/*   const [category, setCategory] = React.useState();\r\n  const [category, setCategory] = React.useState(''); */\r\n  const [state, setState] = React.useState({\r\n    checkedDecision: false,\r\n    checkedInfo: false,\r\n  });\r\n  //const { checkedDecision, checkedInfo } = state;\r\n  const error = [state.checkedDecision, state.checkedInfo].filter((v) => v).length < 1;\r\n  \r\n  //Alert Function\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n//Close func for closing the alert\r\nconst handleClose = (event, reason) => {\r\n  if (reason === 'clickaway') {\r\n    return;\r\n  }\r\n  setOpen(false);\r\n};\r\n\r\n\r\n\r\n\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async (values) => {\r\n    setErrorMessage(\"\");\r\n    \r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n       if(Object.keys(category).length == 0)\r\n     {\r\n      \r\n        setErrorMessage(\"Please select a category\");\r\n          setOpen(true); \r\n          \r\n     } \r\n     else if(error)\r\n     {\r\n      setErrorMessage(\"Please select at least one output type\");\r\n      setOpen(true); \r\n     }\r\n     else\r\n    {\r\n      \r\n    const { title, description,totalTime } = values;\r\n    var body = {\r\n        title: title,\r\n        description: description,\r\n        totalTime: totalTime,\r\n        category: category,\r\n        decision:state.checkedDecision,\r\n        information: state.checkedInfo\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      xhrFields: {\r\n        withCredentials: true\r\n    },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/topic/modifyTopic/\"+topicId;\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        setSuccessMessage(text.message);\r\n        setOpen(true);\r\n        navigate('/topics')\r\n\r\n        //console.log(\"success\")\r\n        /* const history = useHistory()    \r\n        history.push('/app/topics') */\r\n       // <Redirect path to='/app/topics/'/>\r\n\r\n        \r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message);\r\n        setOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n   }\r\n  };\r\n  \r\n  \r\n  useEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/topic/getTopic/\"+topicId,\r\n    );\r\n  \r\n  setTopic(result.data.data);\r\n  setCategory(result.data.data.category);\r\n  setState({checkedDecision:result.data.data.decision, checkedInfo:result.data.data.information});\r\n  },[]);\r\n  const urllocation = useLocation();\r\n  const getCurrentPathWithLastPart = () => {\r\n  \r\n    return urllocation.pathname.slice(urllocation.pathname.lastIndexOf('/')+1,urllocation.pathname.length );\r\n  }\r\n  const  topicId  = getCurrentPathWithLastPart();\r\n  console.log(topicId);\r\n  //For updating the selector -duration time-\r\n  \r\n  const updateCategory = (event) => {\r\n    setCategory(event.target.value);\r\n    console.log(category);\r\n  };\r\n  \r\n\r\n  const handleCB = (event,value) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n    \r\n  };\r\n  \r\n  // Returning the part that should be rendered\r\n  // Just set handleSubmit as the handler for the onSubmit call.\r\n  return (\r\n    \r\n   <Container maxWidth={false}>\r\n    <Formik\r\n      initialValues={topic}\r\n      enableReinitialize\r\n      onSubmit={handleSubmit}\r\n\r\n      //********Using Yup for validation********/\r\n\r\n      validationSchema={Yup.object().shape({\r\n        title: Yup.string().max(100).required('Title is required'),\r\n        description: Yup.string().max(255).required('Description is required'),\r\n       \r\n        totalTime: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only')\r\n        \r\n      })}\r\n      \r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit\r\n        } = props;\r\n        return (\r\n          <>\r\n          \r\n            <form onSubmit={handleSubmit} noValidate>\r\n            <Card>\r\n            <CardContent>\r\n            <CardHeader\r\n          subheader=\"Please enter the necessary information for modifying a topic\"\r\n          title=\"Modify Topic\"\r\n        />\r\n        <Divider />\r\n                \r\n              <TextField\r\n              InputLabelProps={{ shrink: true }}\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\"\r\n                \r\n              />\r\n              <TextField\r\n              InputLabelProps={{ shrink: true }}\r\n                error={Boolean(touched.description && errors.description)}\r\n                fullWidth\r\n                helperText={touched.description && errors.description}\r\n                label=\"Description\"\r\n                margin=\"normal\"\r\n                name=\"description\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.description}\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={5}\r\n              />\r\n              <TextField\r\n              InputLabelProps={{ shrink: true }}\r\n                error={Boolean(touched.totalTime && errors.totalTime)}\r\n                fullWidth\r\n                helperText={touched.totalTime && errors.totalTime}\r\n                label=\"Duration in minutes\"\r\n                margin=\"normal\"\r\n                name=\"totalTime\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.totalTime}\r\n                variant=\"outlined\"\r\n              />\r\n        \r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          value={category}\r\n          onChange={updateCategory}\r\n          label=\"Category\"\r\n          \r\n        > \r\n          <MenuItem value={\"\"}></MenuItem>  \r\n          <MenuItem value={\"Budget Meeting\"}>Budget Meeting</MenuItem>\r\n          <MenuItem value={\"HR Meeting\"}>HR Meeting</MenuItem>\r\n          <MenuItem value={\"Project Meeting\"}>Project Meeting</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n          <br/><br/>\r\n        <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\r\n          <FormLabel component=\"legend\">Select at least one meeting output</FormLabel>\r\n        <FormControlLabel\r\n          control={<Checkbox checked={state.checkedDecision} onChange={handleCB} name=\"checkedDecision\" value={state.checkedDecision}/>}\r\n          label=\"Decision\"\r\n        /> \r\n       <FormControlLabel\r\n          control={<Checkbox checked={state.checkedInfo} onChange={handleCB} name=\"checkedInfo\" value={state.checkedInfo} />}\r\n          label=\"Information \"\r\n        />\r\n        </FormControl>\r\n\r\n          </CardContent>\r\n          <Divider />\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n          >\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n          >\r\n           Modify Topic\r\n          </Button>\r\n\r\n        </Box>\r\n        </Card>\r\n        </form>\r\n          </>\r\n        );\r\n      }}\r\n    </Formik>\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleClose} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleClose} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar>\r\n  </Container>\r\n  );\r\n};\r\n\r\nexport default ModifyTopicForm;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\modifyMeeting\\ModifyMeetingForm.js",["262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280"],"import React,{useState, useEffect} from 'react';\r\nimport { Link as RouterLink, useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns'; //instal this version npm i @date-io/date-fns@1.3.13\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { Formik } from 'formik';\r\nimport Async from \"react-async\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  FormControl,\r\n  Snackbar\r\n\r\n} from '@material-ui/core';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  },\r\n  \r\n}));\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 600\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\nconst topicColumns = [\r\n  \r\n  { field: 'title', headerName: 'Topic Title', width: 180},\r\n  { field: 'totalTime', headerName: 'Duration', width: 180 }\r\n  \r\n];\r\nconst columns = [\r\n  { field: 'firstName', headerName: 'First name', width: 120},\r\n  { field: 'lastName', headerName: 'Last name', width: 120 },\r\n  { field: 'email', headerName: 'Email', width: 220 }\r\n];\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n \r\nconst ModifyMeetingForm = props => {\r\n  const navigate = useNavigate();\r\n  const classes = useStyles();\r\n  const [location, setLocation] = React.useState('');\r\n  const [meeting, setMeeting] = React.useState('');\r\n  const [title, setTitle] = React.useState('');\r\n  const [open, setOpen] = React.useState(false);\r\n  const [openTopic, setOpenTopic] = React.useState(false);\r\n  const [selectParticipats, setSelectionParticipants] = React.useState([]);\r\n  let dt = new Date();\r\n  const minDate = dt.setDate(dt.getDate() );\r\n  const [selectedDate, setSelectedDate] = React.useState();\r\n  const [openAlert, setOpenAlert] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const[user,setUser]=useState([]);\r\n  const[member,setMember]=useState([]);\r\n  const[topic,setTopic]=useState([]);\r\n  const[selectedTopic,setSelectedTopic]=useState([]);\r\n  const[topicsArr,setTopicsArr]=useState([]);\r\n  const[participantsArr,setParticipantsArr]=useState([]);\r\n  const[selectionModelTopic,setSelectionModelTopic]=useState([]);\r\n  const[selectionModelParticipant,setSelectionModelParticipant]=useState([]);\r\n\r\n /*  const loadUser = async values => {\r\n    const url = \"http://localhost:81/meeting/getEmails\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n\r\n      if (data.status == \"success\") {\r\n        setUser(data.data)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  }; */\r\n  useEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/meeting/getEmails\",\r\n    );\r\n      setUser(result.data.data)\r\n  },[]);\r\n/*   const loadTopic = async values => {\r\n    const url = \"http://localhost:81/topic/getTopic\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n\r\n      if (data.status == \"success\") {\r\n        setTopic(data.data)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  }; */\r\n  useEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/topic/getTopic\",\r\n    );\r\n      setTopic(result.data.data)\r\n      topic.map((val)=>{\r\n        console.log(val._id)\r\n        selectedTopic.forEach(element => {\r\n          console.log(element[0]);\r\n      if (val._id==element[0])\r\n      {\r\n        setTopicsArr([val])\r\n      }});\r\n      });\r\n  },[]);\r\n\r\n      //function for displaying alert\r\n      function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n      }\r\n//Open Participants Dialog\r\n  const handleClickOpen = () => {\r\n    //loadUser();\r\n    setOpen(true);\r\n    \r\n  };\r\n  \r\n  const handleClickOpenTopic =()=>{\r\n    //loadTopic();\r\n    setOpenTopic(true);\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleCloseTopic = () => {\r\n    setOpenTopic(false);\r\n  };\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenAlert(false);\r\n  };\r\n\r\n\r\n  const calculateTotalDuration=()=>{\r\n    var totalDuration=0;\r\n    topicsArr.map((val) => \r\n    totalDuration+=parseInt(val.totalTime)\r\n    );\r\n    console.log(totalDuration);\r\n    console.log(topicsArr);\r\n    return totalDuration;\r\n  }\r\n  const clearForm=()=>{\r\n   setTopicsArr([]);\r\n   setSelectedDate(new Date());\r\n   setLocation(\"\");\r\n   setParticipantsArr([]);\r\n  }\r\n  //Function that handles the form submission\r\n  const handleSubmit = async (values,{resetForm}) => {\r\n    setErrorMessage(\"\");\r\n    const {title, description, duration} = values;\r\n    var participantsTmp=[];\r\n    var topicsTmp=[];\r\n\r\n    participantsArr.map((val)=>\r\n    participantsTmp.push(val._id)\r\n    );\r\n    topicsArr.map((val)=>\r\n    topicsTmp.push(val._id)\r\n    );\r\n   \r\n    if (!topicsTmp.length)\r\n    {\r\n      setErrorMessage(\"Please select at least one topic\");\r\n         setOpenAlert(true); \r\n    }\r\n    else if(!participantsTmp.length)\r\n    {\r\n         setErrorMessage(\"Please select at least one participant\");\r\n         setOpenAlert(true); \r\n    }\r\n     else if (location.length==0)\r\n    {\r\n      setErrorMessage(\"Please select a meeting location\");\r\n      setOpenAlert(true); \r\n    } \r\n    else{\r\n    \r\n    var body = {\r\n      title: title,\r\n      description: description,\r\n      topic: topicsTmp,\r\n      members:participantsTmp,\r\n      date: selectedDate,\r\n      //time: selectedDate.toLocaleTimeString(),\r\n      location: location,\r\n      duration: duration.toString()\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n   \r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/meeting/modifyMeeting/\"+meetingId;\r\n    console.log(url)\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n\r\n      if (text.status == \"success\") {\r\n        setSuccessMessage(text.message);\r\n        setOpenAlert(true); \r\n        resetForm({});\r\n        clearForm();\r\n        setSelectionModelParticipant([]);\r\n        setSelectionModelTopic([]);\r\n        navigate('/meetings')\r\n  \r\n      } else {\r\n        console.log(text.message);\r\n         setErrorMessage(text.message);\r\n        setOpenAlert(true); \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n /*  console.log(selectedTime.toLocaleDateString());\r\n  console.log(selectedTime.toLocaleTimeString()); */\r\n  }   \r\n};\r\n\r\nuseEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/meeting/getMeetings/\"+meetingId,\r\n    );\r\n \r\nsetMeeting(result.data.data);\r\nsetSelectedDate(result.data.data.date)\r\nsetSelectionModelTopic(result.data.data.topic)\r\nsetSelectionModelParticipant(result.data.data.members)\r\nsetLocation(result.data.data.location)\r\nsetSelectedTopic([result.data.data.topic])\r\nsetParticipantsArr(result.data.data.members)\r\n  },[]);\r\n\r\n\r\n  \r\n\r\n\r\n //update date\r\n const handleDateChange = (date) => {\r\n  setSelectedDate(date);\r\n};\r\nconst urllocation = useLocation();\r\nconst getCurrentPathWithLastPart = () => {\r\n\r\n  return urllocation.pathname.slice(urllocation.pathname.lastIndexOf('/')+1,urllocation.pathname.length );\r\n}\r\nconst  meetingId  = getCurrentPathWithLastPart();\r\nconst SaveParticipants=()=>\r\n{\r\n  setParticipantsArr(member);\r\n  setSelectionModelParticipant(member.map((r) => r.id));\r\n  handleClose();\r\n}\r\nconst SaveTopics=()=>\r\n{\r\n  setTopicsArr(selectedTopic);\r\n  console.log(selectedTopic)\r\n  setSelectionModelTopic(selectedTopic.map((r) => r.id));\r\n  handleCloseTopic();\r\n  \r\n}  \r\n   //update the location selection\r\n  const updateLocation = (event) => {\r\n    setLocation(event.target.value);\r\n  }\r\n \r\n  return (\r\n    \r\n<Container maxWidth={false}>\r\n  <Formik\r\n   initialValues={meeting} \r\n  enableReinitialize\r\n  onSubmit={handleSubmit}\r\n\r\n  // Using Yup for validation\r\n\r\n  validationSchema={Yup.object().shape({\r\n    title: Yup.string().max(100).required('Title is required'),\r\n    description: Yup.string().max(255),\r\n    duration: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only').test(\r\n      \"DOB\",\r\n      \"Duration must be greater than total topic durations\",\r\n      value => {\r\n        return value >= calculateTotalDuration();\r\n      })\r\n      // location: Yup.string().ensure().required(\"Location is required\")\r\n  })}\r\n  >\r\n    \r\n    {props => {\r\n      const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleReset,\r\n        handleSubmit\r\n      } = props;\r\n      \r\n      return (\r\n        <>\r\n        \r\n        <form onSubmit={handleSubmit} noValidate>\r\n          <Card>\r\n            <CardContent>\r\n              <CardHeader title=\"Modify The Meeting\">\r\n              </CardHeader>\r\n          {/* </Card> */}\r\n\r\n          <Divider/>\r\n\r\n          {/* Meeting Title */}\r\n\r\n          <TextField\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                InputLabelProps={{ shrink: true }}\r\n                /* initialValues={meeting.title} */\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={ /* (e) => setMeeting({title:e.target.value}) */ handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\">\r\n              </TextField>\r\n             \r\n        {/* Meeting Topic */}  \r\n      {/* Invite Topics Button */}\r\n       <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpenTopic}>\r\n            Select topic\r\n          </Button> \r\n      <Dialog onClose={handleCloseTopic} aria-labelledby=\"customized-dialog-title\" open={openTopic}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseTopic}>\r\n          Select Topics\r\n        </DialogTitle>\r\n        <DialogContent dividers> \r\n             <div style={{ height: 400, width: '100%' }}> \r\n                <DataGrid \r\n                  \r\n                  rows={topic}\r\n                  columns={topicColumns}\r\n                  pageSize={5} \r\n                  checkboxSelection\r\n                  selectionModel={selectionModelTopic} \r\n                  onSelectionModelChange={(e) => {\r\n                     \r\n                     const selectedIDs = new Set(e.selectionModel);\r\n                     setSelectedTopic(topic.filter((r) =>\r\n                       selectedIDs.has(r.id))\r\n                       \r\n                     )} }\r\n                  \r\n                />   \r\n                      \r\n                    \r\n  \r\n            </div>\r\n            \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveTopics} color=\"primary\">\r\n            Save Topics\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    {/* </div>  */}\r\n\r\n\r\n        {/* Meeting Description */}\r\n        <TextField\r\n          error={Boolean(touched.description && errors.description)}\r\n          fullWidth\r\n          helperText={touched.description && errors.description}\r\n          InputLabelProps={{ shrink: true }}\r\n          label=\"Description\"\r\n          margin=\"normal\"\r\n          name=\"description\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.description}\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={3}\r\n        />\r\n\r\n\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"dd/MM/yyyy\"\r\n          margin=\"normal\"\r\n          minDate={minDate}\r\n          id=\"date-picker-inline\"\r\n          label=\"Meeting Date\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n        <br></br>\r\n        <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Meeting Time\"\r\n          minDate={minDate}\r\n          value={selectedDate}\r\n          keyboardIcon={<ScheduleIcon />}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}\r\n        />\r\n        </MuiPickersUtilsProvider>\r\n        \r\n        {/* Meeting Duration */}\r\n        <TextField\r\n          error={Boolean(touched.duration && errors.duration)}\r\n          fullWidth\r\n          helperText={touched.duration && errors.duration}\r\n          InputLabelProps={{ shrink: true }}\r\n          label=\"Duration in minutes\"\r\n          margin=\"normal\"\r\n          name=\"duration\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.duration}\r\n          variant=\"outlined\"\r\n        />\r\n\r\n        {/* Meeting Location */}\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"location-input-label\">Location</InputLabel>\r\n        <Select\r\n          labelId=\"topic-input-label\"\r\n          id=\"location-input\"\r\n          value={location}\r\n          onChange={updateLocation}\r\n          label=\"Topics\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          >\r\n            <MenuItem value=\"\"> <em>None</em></MenuItem>\r\n            <MenuItem value={1}>Meeting Room 1</MenuItem>\r\n            <MenuItem value={2}>Meeting Room 2</MenuItem>\r\n            <MenuItem value={3}>Meeting Room 3</MenuItem>\r\n            <MenuItem value={4}>Meeting Room 4</MenuItem>\r\n        </Select>\r\n        <br></br>\r\n        {/* Invite Participants Button */}\r\n        <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpen}>\r\n            Invite Participants\r\n          </Button>\r\n        </FormControl>\r\n\r\n        </CardContent>\r\n           \r\n        <Box\r\n          display=\"flex\"\r\n          flex=\"1\"\r\n          flexDirection=\"row\"\r\n          justifyContent=\"space-between\"\r\n          p={3}\r\n        >\r\n          \r\n     \r\n    <div>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Invite Participants\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n\r\n              <div style={{ height: 400, width: '100%' }}>\r\n            \r\n                <DataGrid \r\n                \r\n                 rows={user}\r\n                 columns={columns}\r\n                 pageSize={5} \r\n                 checkboxSelection \r\n                 selectionModel={selectionModelParticipant} \r\n                 onSelectionModelChange={(e) => {\r\n                    \r\n                    const selectedIDs = new Set(e.selectionModel);\r\n                    setMember(user.filter((r) =>\r\n                      selectedIDs.has(r.id))\r\n                      \r\n                    )} }            \r\n                      />  \r\n                      \r\n       \r\n  \r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveParticipants} color=\"primary\">\r\n            Save Participants\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    </div>\r\n\r\n        {/* Cretae Meeting button */}\r\n          <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-end\"\r\n          disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\">\r\n            Modify Meeting\r\n          </Button>\r\n          </Box>\r\n\r\n        </Card>\r\n        </form>\r\n        </>\r\n      );\r\n    }}\r\n  \r\n  </Formik>\r\n\r\n     <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleCloseAlert} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleCloseAlert} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar> \r\n</Container>\r\n\r\n  );\r\n};\r\n\r\nexport default ModifyMeetingForm;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\components\\Logo.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js",["281","282","283","284","285"],"import React, { Component, useState } from \"react\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Card, \r\n} from '@material-ui/core';\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport MeetingListView from \".\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { v1 as uuid } from \"uuid\";\r\nimport { useNavigate } from 'react-router-dom';\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 500\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n\r\n\r\nconst CalendarView = ({ className, meetings, ...rest }) => {\r\n  \r\n\r\nconst[events,setEvents]=useState([\r\n      {\r\n        start: moment().toDate(),\r\n        end: moment()\r\n          .add(0, \"days\")\r\n          .toDate(),\r\n        title: \"TBKmeet Meeting\"\r\n      }\r\n    ]);\r\n    const [open, setOpen] =useState(false);\r\n    const [eventState,setEventState]=useState( { start: moment().toDate(), end: moment().add(0, \"days\").toDate(), title: \"\", _id: \"\",\r\n    description:\"\", location: \"\", topic: \"\", members: \"\"})\r\n\r\n\r\n const handleClickOpen=() => {\r\n  setOpen(true);\r\n\r\n};\r\n const handleClose=() => {\r\n  setOpen(false);\r\n};\r\nlet navigate = useNavigate()\r\nfunction create() {\r\n    const id = uuid();\r\n    navigate(`/app/room/${id}`, {id: id});\r\n}\r\n    //const {meetings}= this.props.meetings;\r\n    // console.log(moment()\r\n    // .add(1, \"days\")\r\n    // .toDate())\r\n /*   for(let i=1;i<this.props.meetings.length-1;i++)\r\n  {\r\n    this.state.eventss[i].start=Date.parse(this.props.meetings[i].date);\r\n    this.state.eventss[i].end=Date.parse(this.props.meetings[i].date);\r\n    this.state.eventss[i].title=this.props.meetings[i].title;\r\n  }  */\r\n  const newEvents = meetings.map(event => ({\r\n    start:event.date,\r\n    end:event.date,\r\n    title: event.title,\r\n    id: event._id,\r\n    description: event.description,\r\n    topic: event.topic,\r\n    location: event.location,\r\n    members:event.members,\r\n    duration:event.duration,\r\n    isStarted:event.isStarted\r\n  }));\r\n  function MeetingButtonRender(status, meeting_id) {\r\n    //console.log(id)\r\n    if(status)\r\n    {\r\n      return (\r\n        \r\n                    <Button href=\"\" color=\"primary\" onClick={() => navigate(`/app/room/${meeting_id}`, {id: meeting_id})}>\r\n                      Attend Meeting\r\n                    </Button>\r\n        \r\n      )\r\n    }\r\n    else\r\n    {\r\n      return(\r\n      \r\n                  <Button href=\"\" color=\"primary\" onClick={() => navigate(`/app/room/${meeting_id}`, {id: meeting_id})}>\r\n                  Start Meeting </Button>\r\n      \r\n      )\r\n    }\r\n  }\r\n  console.log(eventState);\r\n    return (\r\n\r\n      <Card>\r\n      <div className=\"App\">\r\n      \r\n        <Calendar\r\n          localizer={localizer}\r\n          defaultDate={new Date()}\r\n          defaultView=\"month\"\r\n          events={newEvents}\r\n          views={['month']}\r\n          // onSelectEvent={()=>{\r\n          //   console.log(newEvents);\r\n          // }}\r\n          onSelectEvent={event => {\r\n            handleClickOpen()\r\n            setEventState( event);\r\n            }}\r\n          style={{ height: \"80vh\" , width:\"100%\"}}\r\n        />\r\n      </div>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n              Meeting Detail\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <p>Title: {eventState.title}</p>\r\n              <p>Description: {eventState.description}</p>\r\n              <p>Duration: {eventState.duration}</p>\r\n              <p>Date: {moment(eventState.start).format('DD MMM YYYY')}</p>\r\n              <p>Time: {moment(eventState.start).format('LT')}</p>\r\n              <p>Location: {eventState.location}</p>\r\n{/*               <p>Topics: {this.state.eventState.topic}</p>\r\n              <p>Participants: {this.state.eventState.members}</p> */}\r\n            </DialogContent>\r\n            <DialogActions>\r\n            {MeetingButtonRender(eventState.isStarted, eventState._id)}\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n      </Card>\r\n    );\r\n  \r\n};\r\n\r\n\r\n\r\n\r\nexport default CalendarView;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Results.js",["286","287"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport moment from \"moment\";\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { v1 as uuid } from \"uuid\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 500\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  avatar: {\r\n    marginRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Results = ({ className, meetings, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [limit, setLimit] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n  const emptyRows = limit - Math.min(limit, meetings.length - page * limit);\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n  };\r\n  let navigate = useNavigate()\r\n  function create() {\r\n      const id = uuid();\r\n      navigate(`/app/room/${id}`, {id: id});\r\n  }\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const [open, setOpen] = React.useState(false);\r\n  const [meetingState, setMeetingState] = useState({date: moment().toDate(),  title: \"\", _id: \"\",\r\n  description:\"\", location: \"\", topic: \"\", members: \"\"});\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  function MeetingButtonRender(status, meeting_id) {\r\n    //console.log(id)\r\n    if(status)\r\n    {\r\n      return (\r\n        \r\n                    <Button href=\"\" color=\"primary\" onClick={() => window.open(`/meetings/room/${meeting_id}`, {id: meeting_id}, { replace: true })}>\r\n                      Attend Meeting\r\n                    </Button>\r\n        \r\n      )\r\n    }\r\n    else\r\n    {\r\n      return(\r\n      \r\n                  <Button href=\"\" color=\"primary\" onClick={() => window.open(`/meetings/room/${meeting_id}`, {id: meeting_id}, { replace: true })}>\r\n                  Start Meeting </Button>\r\n      \r\n      )\r\n    }\r\n  }\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n        <Box minWidth={1050}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n               \r\n              <TableCell>\r\n                  Meeting Name \r\n                </TableCell>\r\n                <TableCell>\r\n                  Description\r\n                </TableCell>\r\n                <TableCell>\r\n                  Location\r\n                </TableCell>\r\n                <TableCell>\r\n                  Date\r\n                </TableCell>\r\n                <TableCell>\r\n                  Time\r\n                </TableCell>\r\n                <TableCell></TableCell>\r\n                <TableCell>\r\n                  Attend\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {meetings.slice(page* limit, page * limit + limit).map((meetings) => (\r\n                <TableRow\r\n                  hover\r\n                  key={meetings._id}\r\n                  \r\n                >\r\n                  <TableCell>\r\n                    <Box\r\n                      alignItems=\"center\"\r\n                      display=\"flex\"\r\n                    >\r\n                      \r\n                      <Typography\r\n                        color=\"textPrimary\"\r\n                        variant=\"body1\"\r\n\r\n                      >\r\n                        <a>{meetings.title}</a>\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {meetings.description}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {meetings.location}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {moment(meetings.date).format('DD MMM YYYY')}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {moment(meetings.date).format('LT')}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                   {/*<Link to=\"ModifyMeeting\" params={{ meetingId: meetings._id }}>*/} \r\n                     <Link to={{pathname: `/app/modifyMeeting/${meetings._id}`}}\r\n                     style={{ textDecoration: 'none',color:\"initial\" }}\r\n                     > \r\n                    <EditIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    />\r\n                    </Link>\r\n                    <DeleteIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    />\r\n                    <InfoIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                     onClick={() => {\r\n                      handleClickOpen();\r\n                      console.log(meetings);\r\n                      setMeetingState(meetings);\r\n                      console.log(meetingState);\r\n                                            }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {MeetingButtonRender(meetings.isStarted, meetings._id)}\r\n\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n               {emptyRows > 0 && (\r\n                <TableRow style={{ height:  56 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n\r\n          <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n              Meeting Detail\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <p>Title: { meetingState.title}</p>\r\n              <p>Description: {meetingState.description}</p>\r\n              <p>Duration: { meetingState.duration}</p>\r\n              <p>Date: {moment( meetingState.date).format('DD MMM YYYY')}</p>\r\n              <p>Time: {moment( meetingState.date).format('LT')}</p>\r\n              <p>Location: {meetingState.location}</p>\r\n              {/* <p>Topics: {meetingState.topic}</p>\r\n              <p>Participants: {meetingState.members}</p> */}\r\n              \r\n            </DialogContent>\r\n            <DialogActions>\r\n            {MeetingButtonRender(meetingState.isStarted, meetingState._id)}\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={meetings.length}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  meetings: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Results;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\MainLayout\\TopBar.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\theme\\shadows.js",["288"],"export default [\r\n  'none',\r\n  '0 0 0 1px rgba(63,63,68,0.05), 0 1px 2px 0 rgba(63,63,68,0.15)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 5px 8px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 12px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)'\r\n];\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\topicPool\\topicList.js",["289","290"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles,\r\n  Button,\r\n  Dialog\r\n  \r\n} from '@material-ui/core';\r\nimport Async from 'react-async';\r\nimport { CompareArrowsOutlined } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 500\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n\r\n  /* tableRow: {\r\n    height: 30\r\n  }, */\r\n}));\r\n\r\n/* \r\nconst deneme=(async res=>{\r\nconst url=\"http://localhost:81/topic/getTopic\";\r\nresponse = await fetch(url);\r\nconst data = await response.json();\r\nconsole.log(data);}) */\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst TopicList = ({ className,  ...rest }) => {\r\n  const classes = useStyles();\r\n  const [limit, setLimit] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n    setPage(0);\r\n  };\r\n  const [topicState, setTopicState] = useState({ title: \"\", _id: \"\",\r\n  description:\"\", duration: \"\", category: \"\", decision: \"\",information: \"\"});\r\n  const [topic, setTopic]=useState([]);    \r\n  const emptyRows = limit - Math.min(limit, topic.length - page * limit);\r\n  const [open, setOpen] = React.useState(false);\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const getTopics = async values => {\r\n    const url = \"http://localhost:81/topic/getTopic\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n      // console.log(data)\r\n\r\n      if (data.status == \"success\") {\r\n        // console.log(\"success\");\r\n        setTopic(data.data)\r\n        // console.log(topic)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n   \r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n     \r\n      <PerfectScrollbar>\r\n        <Box minWidth={1050}>\r\n        <Async promiseFn={getTopics}>\r\n          \r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n               \r\n              <TableCell>\r\n                  Title\r\n                </TableCell>\r\n                <TableCell>\r\n                  Duration\r\n                </TableCell>\r\n                <TableCell>\r\n                  Category\r\n                </TableCell>\r\n                <TableCell>\r\n                  Meeting Output\r\n                </TableCell>\r\n                <TableCell>\r\n                  \r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n               {topic.slice( page* limit, page * limit + limit).map((topic) => (\r\n                <TableRow\r\n                  hover\r\n                 key={topic._id}\r\n                 className={classes.tableRow}\r\n                >\r\n                 \r\n                  <TableCell>\r\n                    <Box\r\n                      alignItems=\"center\"\r\n                      display=\"flex\"\r\n                    >\r\n                      \r\n                      <Typography\r\n                        color=\"textPrimary\"\r\n                        variant=\"body1\"\r\n                      >\r\n                        {topic.title}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                     {topic.totalTime } minutes \r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {topic.category}  \r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {topic.information &&(\r\n                    <p>Information Meeting</p>\r\n                  )}\r\n                  {topic.decision &&(\r\n                    <p>Decision Meeting</p>\r\n                  )}\r\n                 \r\n                  </TableCell>\r\n                  <TableCell>\r\n                  <Link to={{pathname: `/app/modifyTopic/${topic._id}`}}\r\n                   style={{ textDecoration: 'none',color:\"initial\" }}\r\n                   \r\n                  > \r\n                    <EditIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    />\r\n                    </Link>\r\n                    <DeleteIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    />\r\n                    <InfoIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => {\r\n                      handleClickOpen();\r\n                      console.log(topic);\r\n                      setTopicState(topic);\r\n                      console.log(topicState);\r\n                                            }}\r\n                    />\r\n                  </TableCell>\r\n                  \r\n                </TableRow>\r\n              ))} \r\n               {emptyRows > 0 && (\r\n                <TableRow style={{ height:  56 * emptyRows }}>\r\n                  <TableCell colSpan={5} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n          </Async>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={topic.length}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n          <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n              Topic Detail\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <p>Title: { topicState.title}</p>\r\n              <br/>\r\n              <p>Description: {topicState.description}</p>\r\n              <br/>\r\n              <p>Duration: { topicState.totalTime} Minutes</p>\r\n              <br/>\r\n              <p>Category: { topicState.category}</p>\r\n              {/*<p>Location: {topicState.location}</p>\r\n               <p>Topics: {meetingState.topic}</p>\r\n              <p>Participants: {meetingState.members}</p> */}\r\n              \r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button href=\"\" color=\"primary\" onClick={handleClose}>\r\n                  Close </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\nexport default TopicList;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createTopic\\createTopicForm.js",["291","292","293","294","295","296"],"import React,{useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  FormLabel ,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  Checkbox,\r\n  FormControlLabel ,\r\n  CardContent,\r\n  Snackbar,\r\n  FormControl\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  }\r\n}));\r\n\r\n\r\nconst CreateTopicForm = props => {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const [category, setCategory] = React.useState('');\r\n  const [state, setState] = React.useState({\r\n    checkedDecision: false,\r\n    checkedInfo: false,\r\n  });\r\n  const { checkedDecision, checkedInfo } = state;\r\n  const error = [checkedDecision, checkedInfo].filter((v) => v).length < 1;\r\n  \r\n  //Alert Function\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n//Close func for closing the alert\r\nconst handleClose = (event, reason) => {\r\n  if (reason === 'clickaway') {\r\n    return;\r\n  }\r\n  setOpen(false);\r\n};\r\nconst clearForm = () => {\r\n setCategory(\"\");\r\n setState(state.checkedDecision=false);\r\n setState(state.checkedInfo=false);\r\n};\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async (values,{resetForm}) => {\r\n    setErrorMessage(\"\");\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n       if(Object.keys(category).length == 0)\r\n     {\r\n      \r\n        setErrorMessage(\"Please select a category\");\r\n          setOpen(true); \r\n          \r\n     } \r\n     else if(error)\r\n     {\r\n      setErrorMessage(\"Please select at least one output type\");\r\n      setOpen(true); \r\n     }\r\n     else\r\n    {\r\n      \r\n    const { title, description,totalTime } = values;\r\n    var body = {\r\n        title: title,\r\n        description: description,\r\n        totalTime: totalTime,\r\n        category: category,\r\n        decision:checkedDecision,\r\n        information: checkedInfo\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      xhrFields: {\r\n        withCredentials: true\r\n    },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/topic/topicSave\";\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        //console.log(\"success\")\r\n        setSuccessMessage(text.message);\r\n        setOpen(true);\r\n        //Form reset must be done!!!\r\n        resetForm({});\r\n        clearForm();\r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message);\r\n        setOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n   }\r\n  }; \r\n\r\n  //For updating the selector -duration time-\r\n  \r\n  const updateCategory = (event) => {\r\n    setCategory(event.target.value);\r\n    console.log(category);\r\n  };\r\n  \r\n\r\n  const handleCB = (event,value) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n    \r\n  };\r\n  \r\n  // Returning the part that should be rendered\r\n  // Just set handleSubmit as the handler for the onSubmit call.\r\n  return (\r\n    \r\n   <Container maxWidth={false}>\r\n    <Formik\r\n      initialValues={{\r\n        title: '',\r\n        description: '',\r\n        category:\"\",\r\n        totalTime:''\r\n      }}\r\n      onSubmit={handleSubmit}\r\n\r\n      //********Using Yup for validation********/\r\n\r\n      validationSchema={Yup.object().shape({\r\n        title: Yup.string().max(100).required('Title is required'),\r\n        description: Yup.string().max(255).required('Description is required'),\r\n       \r\n        totalTime: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only')\r\n        \r\n      })}\r\n      \r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit\r\n        } = props;\r\n        return (\r\n          <>\r\n          \r\n            <form onSubmit={handleSubmit} noValidate>\r\n            <Card>\r\n            <CardContent>\r\n            <CardHeader\r\n          subheader=\"Please enter the necessary information for creating a topic\"\r\n          title=\"Create Topic\"\r\n        />\r\n        <Divider />\r\n                \r\n              <TextField\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\"\r\n                \r\n              />\r\n              <TextField\r\n                error={Boolean(touched.description && errors.description)}\r\n                fullWidth\r\n                helperText={touched.description && errors.description}\r\n                label=\"Description\"\r\n                margin=\"normal\"\r\n                name=\"description\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.description}\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={5}\r\n              />\r\n              <TextField\r\n                error={Boolean(touched.totalTime && errors.totalTime)}\r\n                fullWidth\r\n                helperText={touched.totalTime && errors.totalTime}\r\n                label=\"Duration in minutes\"\r\n                margin=\"normal\"\r\n                name=\"totalTime\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.totalTime}\r\n                variant=\"outlined\"\r\n              />\r\n        \r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          value={category}\r\n          onChange={updateCategory}\r\n          label=\"Category\"\r\n          \r\n        > \r\n          <MenuItem value={\"\"}></MenuItem>  \r\n          <MenuItem value={\"Budget Meeting\"}>Budget Meeting</MenuItem>\r\n          <MenuItem value={\"HR Meeting\"}>HR Meeting</MenuItem>\r\n          <MenuItem value={\"Project Meeting\"}>Project Meeting</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n          <br/><br/>\r\n        <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\r\n          <FormLabel component=\"legend\">Select at least one meeting output</FormLabel>\r\n        <FormControlLabel\r\n          control={<Checkbox checked={state.checkedDecision} onChange={handleCB} name=\"checkedDecision\" value={checkedDecision}/>}\r\n          label=\"Decision\"\r\n        /> \r\n       <FormControlLabel\r\n          control={<Checkbox checked={state.checkedInfo} onChange={handleCB} name=\"checkedInfo\" value={checkedInfo} />}\r\n          label=\"Information \"\r\n        />\r\n        </FormControl>\r\n\r\n          </CardContent>\r\n          <Divider />\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n          >\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n          >\r\n           Create Topic\r\n          </Button>\r\n\r\n        </Box>\r\n        </Card>\r\n        </form>\r\n          </>\r\n        );\r\n      }}\r\n    </Formik>\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleClose} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleClose} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar>\r\n  </Container>\r\n  );\r\n};\r\n\r\nexport default CreateTopicForm;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\createMeeting\\createMeetingForm.js",["297","298","299","300","301","302","303","304","305","306","307","308"],"import React,{useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns'; //instal this version npm i @date-io/date-fns@1.3.13\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { Formik } from 'formik';\r\nimport Async from \"react-async\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  FormControl,\r\n  Snackbar\r\n\r\n} from '@material-ui/core';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  },\r\n  \r\n}));\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 600\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst topicColumns = [\r\n  \r\n  { field: 'title', headerName: 'Topic Title', width: 180},\r\n  { field: 'totalTime', headerName: 'Duration', width: 180 }\r\n  \r\n];\r\nconst columns = [\r\n  { field: 'firstName', headerName: 'First name', width: 120},\r\n  { field: 'lastName', headerName: 'Last name', width: 120 },\r\n  { field: 'email', headerName: 'Email', width: 220 }\r\n];\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n \r\nconst CreateMeetingForm = props => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [openTopic, setOpenTopic] = React.useState(false);\r\n  const [selectParticipats, setSelectionParticipants] = React.useState([]);\r\n  let dt = new Date();\r\n  const minDate = dt.setDate(dt.getDate() );\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n  const [openAlert, setOpenAlert] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const[user,setUser]=useState([]);\r\n  const[member,setMember]=useState([]);\r\n  const[topic,setTopic]=useState([]);\r\n  const[selectedTopic,setSelectedTopic]=useState([]);\r\n  const[topicsArr,setTopicsArr]=useState([]);\r\n  const[participantsArr,setParticipantsArr]=useState([]);\r\n  const[selectionModelTopic,setSelectionModelTopic]=useState([]);\r\n  const[selectionModelParticipant,setSelectionModelParticipant]=useState([]);\r\n\r\n  const loadUser = async values => {\r\n    const url = \"http://localhost:81/meeting/getEmails\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n      console.log(data)\r\n\r\n      if (data.status == \"success\") {\r\n        console.log(\"success\");\r\n        setUser(data.data)\r\n        console.log(user)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  };\r\n  const loadTopic = async values => {\r\n    const url = \"http://localhost:81/topic/getTopic\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n      //console.log(data)\r\n\r\n      if (data.status == \"success\") {\r\n        console.log(\"success\");\r\n        setTopic(data.data)\r\n        //console.log(topic)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  };\r\n\r\n      //function for displaying alert\r\n      function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n      }\r\n//Open Participants Dialog\r\n  const handleClickOpen = () => {\r\n    loadUser();\r\n    setOpen(true);\r\n    \r\n  };\r\n  \r\n  const handleClickOpenTopic =()=>{\r\n    loadTopic();\r\n    console.log(topic);\r\n    setOpenTopic(true);\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleCloseTopic = () => {\r\n    setOpenTopic(false);\r\n    console.log(topicsArr);\r\n    // console.log(selectionModelTopic);\r\n  };\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenAlert(false);\r\n  };\r\n /*  const addId=(data)=>{\r\n    var ln = data.length;\r\n    console.log(\"add id starts\")\r\n    for(var i=0; i<ln;i++)\r\n    {\r\n      console.log(i);\r\n      data[i].id=i;\r\n    }\r\n    return data;\r\n  } */\r\n  const SaveParticipants=()=>\r\n  {\r\n    setParticipantsArr(member);\r\n    setSelectionModelParticipant(member.map((r) => r.id));\r\n    console.log(participantsArr);\r\n   console.log(member);\r\n    handleClose();\r\n  }\r\n  const SaveTopics=()=>\r\n  {\r\n    setTopicsArr(selectedTopic);\r\n    setSelectionModelTopic(selectedTopic.map((r) => r.id));\r\n     console.log(selectionModelTopic)\r\n     console.log(topicsArr)\r\n    handleCloseTopic();\r\n    //console.log(calculateTotalDuration())\r\n    \r\n  }\r\n  const calculateTotalDuration=()=>{\r\n    var totalDuration=0;\r\n    topicsArr.map((val) => \r\n    totalDuration+=parseInt(val.totalTime)\r\n    );\r\n    console.log(totalDuration);\r\n    return totalDuration;\r\n  }\r\n  const clearForm=()=>{\r\n   setTopicsArr([]);\r\n   setSelectedDate(new Date());\r\n   setLocation(\"\");\r\n   setParticipantsArr([]);\r\n  }\r\n  //Function that handles the form submission\r\n  const handleSubmit = async (values,{resetForm}) => {\r\n    setErrorMessage(\"\");\r\n    const {title, description, duration} = values;\r\n    var participantsTmp=[];\r\n    var topicsTmp=[];\r\n    participantsArr.map((val)=>\r\n    participantsTmp.push(val._id)\r\n    );\r\n    topicsArr.map((val)=>\r\n    topicsTmp.push(val._id)\r\n    );\r\n    //console.log(topicsTmp);\r\n    console.log(participantsTmp);\r\n     if (!topicsTmp.length)\r\n    {\r\n      setErrorMessage(\"Please select at least one topic\");\r\n         setOpenAlert(true); \r\n    }\r\n    else if(!participantsTmp.length)\r\n    {\r\n         setErrorMessage(\"Please select at least one participant\");\r\n         setOpenAlert(true); \r\n    }\r\n     else if (location.length==0)\r\n    {\r\n      setErrorMessage(\"Please select a meeting location\");\r\n      setOpenAlert(true); \r\n      console.log((location));\r\n    } \r\n    else{\r\n    \r\n    var body = {\r\n      title: title,\r\n      description: description,\r\n      topic: topicsTmp,\r\n      members:participantsTmp,\r\n      date: selectedDate,\r\n      //time: selectedDate.toLocaleTimeString(),\r\n      location: location,\r\n      duration: duration.toString()\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      xhrFields: {\r\n        withCredentials: true\r\n    },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/meeting/meetingSave\";\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        //console.log(\"success\")\r\n        setSuccessMessage(text.message);\r\n        setOpenAlert(true); \r\n        resetForm({});\r\n        clearForm();\r\n        setSelectionModelParticipant([]);\r\n        setSelectionModelTopic([]);\r\n  \r\n      } else {\r\n        console.log(text.message);\r\n         setErrorMessage(text.message);\r\n        setOpenAlert(true); \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n /*  console.log(selectedTime.toLocaleDateString());\r\n  console.log(selectedTime.toLocaleTimeString()); */\r\n  }  \r\n};\r\n\r\n  //update the location selection\r\n  const [location, setLocation] = React.useState('');\r\n  const updateLocation = (event) => {\r\n    setLocation(event.target.value);\r\n  }\r\n  //update date\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\nreturn (\r\n    \r\n<Container maxWidth={false}>\r\n  <Formik\r\n  initialValues={{\r\n    title: '',\r\n    topics: '',\r\n    description: '',\r\n    duration: '',\r\n    date: '',\r\n    location: ' '\r\n  }}\r\n  onSubmit={handleSubmit}\r\n\r\n  // Using Yup for validation\r\n\r\n  validationSchema={Yup.object().shape({\r\n    title: Yup.string().max(100).required('Title is required'),\r\n    description: Yup.string().max(255),\r\n    duration: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only').test(\r\n      \"DOB\",\r\n      \"Duration must be greater than total topic durations\",\r\n      value => {\r\n        return value >= calculateTotalDuration();\r\n      })\r\n      // location: Yup.string().ensure().required(\"Location is required\")\r\n  })}\r\n  >\r\n    {props => {\r\n      const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleReset,\r\n        handleSubmit\r\n      } = props;\r\n      return (\r\n        <>\r\n        \r\n        <form onSubmit={handleSubmit} noValidate>\r\n          <Card>\r\n            <CardContent>\r\n              <CardHeader title=\"Create A Meeting\">\r\n              </CardHeader>\r\n          {/* </Card> */}\r\n\r\n          <Divider/>\r\n\r\n          {/* Meeting Title */}\r\n          <TextField\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\"\r\n                \r\n              />\r\n        {/* Meeting Topic */}  \r\n      {/* Invite Topics Button */}\r\n       <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpenTopic}>\r\n            Select topic\r\n          </Button> \r\n      <Dialog onClose={handleCloseTopic} aria-labelledby=\"customized-dialog-title\" open={openTopic}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseTopic}>\r\n          Select Topics\r\n        </DialogTitle>\r\n        <DialogContent dividers> \r\n             <div style={{ height: 400, width: '100%' }}> \r\n             {/* {console.log(topicsArr)} */}\r\n                <DataGrid \r\n                  \r\n                  rows={topic}\r\n                  columns={topicColumns}\r\n                  pageSize={5} \r\n                  checkboxSelection\r\n                  selectionModel={selectionModelTopic} \r\n                  onSelectionModelChange={(e) => {\r\n                     \r\n                     const selectedIDs = new Set(e.selectionModel);\r\n                     console.log(selectedTopic)\r\n                     setSelectedTopic(topic.filter((r) =>\r\n                       selectedIDs.has(r.id))\r\n                       \r\n                     )} }\r\n                  \r\n                />   \r\n                      \r\n                    \r\n  \r\n            </div>\r\n            \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveTopics} color=\"primary\">\r\n            Save Topics\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    {/* </div>  */}\r\n\r\n\r\n        {/* Meeting Description */}\r\n        <TextField\r\n          error={Boolean(touched.description && errors.description)}\r\n          fullWidth\r\n          helperText={touched.description && errors.description}\r\n          label=\"Description\"\r\n          margin=\"normal\"\r\n          name=\"description\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.description}\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={3}\r\n        />\r\n\r\n\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"dd/MM/yyyy\"\r\n          margin=\"normal\"\r\n          minDate={minDate}\r\n          id=\"date-picker-inline\"\r\n          label=\"Meeting Date\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n        <br></br>\r\n        <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Meeting Time\"\r\n          minDate={minDate}\r\n          value={selectedDate}\r\n          keyboardIcon={<ScheduleIcon />}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}\r\n        />\r\n        </MuiPickersUtilsProvider>\r\n        \r\n        {/* Meeting Duration */}\r\n        <TextField\r\n          error={Boolean(touched.duration && errors.duration)}\r\n          fullWidth\r\n          helperText={touched.duration && errors.duration}\r\n          label=\"Duration in minutes\"\r\n          margin=\"normal\"\r\n          name=\"duration\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.duration}\r\n          variant=\"outlined\"\r\n        />\r\n\r\n        {/* Meeting Location */}\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"location-input-label\">Location</InputLabel>\r\n        <Select\r\n          labelId=\"topic-input-label\"\r\n          id=\"location-input\"\r\n          value={location}\r\n          onChange={updateLocation}\r\n          label=\"Topics\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          >\r\n            <MenuItem value=\"\"> <em>None</em></MenuItem>\r\n            <MenuItem value={1}>Meeting Room 1</MenuItem>\r\n            <MenuItem value={2}>Meeting Room 2</MenuItem>\r\n            <MenuItem value={3}>Meeting Room 3</MenuItem>\r\n            <MenuItem value={4}>Meeting Room 4</MenuItem>\r\n        </Select>\r\n        <br></br>\r\n        {/* Invite Participants Button */}\r\n        <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpen}>\r\n            Invite Participants\r\n          </Button>\r\n        </FormControl>\r\n\r\n        </CardContent>\r\n           \r\n        <Box\r\n          display=\"flex\"\r\n          flex=\"1\"\r\n          flexDirection=\"row\"\r\n          justifyContent=\"space-between\"\r\n          p={3}\r\n        >\r\n          \r\n     \r\n    <div>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Invite Participants\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n\r\n              <div style={{ height: 400, width: '100%' }}>\r\n            \r\n                <DataGrid \r\n                \r\n                 rows={user}\r\n                 columns={columns}\r\n                 pageSize={5} \r\n                 checkboxSelection \r\n                 selectionModel={selectionModelParticipant} \r\n                 onSelectionModelChange={(e) => {\r\n                    \r\n                    const selectedIDs = new Set(e.selectionModel);\r\n                    console.log(member)\r\n                    setMember(user.filter((r) =>\r\n                      selectedIDs.has(r.id))\r\n                      \r\n                    )} }            \r\n                      />  \r\n                      \r\n       \r\n  \r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveParticipants} color=\"primary\">\r\n            Save Participants\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    </div>\r\n\r\n        {/* Cretae Meeting button */}\r\n          <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-end\"\r\n          disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\">\r\n            Create Meeting\r\n          </Button>\r\n          </Box>\r\n\r\n        </Card>\r\n        </form>\r\n        </>\r\n      );\r\n    }}\r\n  \r\n  </Formik>\r\n\r\n     <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleCloseAlert} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleCloseAlert} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar> \r\n</Container>\r\n\r\n  );\r\n};\r\n\r\nexport default CreateMeetingForm;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js",["309","310"],"import React, { useEffect } from 'react';\r\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Divider,\r\n  Drawer,\r\n  Hidden,\r\n  List,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  BarChart as BarChartIcon,\r\n  Settings as SettingsIcon,\r\n  User as UserIcon,\r\n  Calendar as CheckMeetingIcon,\r\n  CheckCircle as CheckTopicPoolIcon,\r\n  Eye as CheckHistoryIcon,\r\n  FilePlus as CreateTopicIcon,\r\n  UserCheck as AttendMeetingIcon\r\n} from 'react-feather';\r\nimport NavItem from './NavItem';\r\n\r\n//const state = getState();\r\n\r\nconst staticInfo = {\r\n  avatar: '/static/images/avatars/default_profile_img',\r\n  name: 'Syed Amish Alvi'\r\n};\r\n\r\nconst items = [\r\n  {\r\n    href: '/app/dashboard',\r\n    icon: BarChartIcon,\r\n    title: 'Dashboard'\r\n  },\r\n  {\r\n    href: '/app/createMeeting',\r\n    icon: CreateTopicIcon,\r\n    title: 'Create Meeting'\r\n  },\r\n  {\r\n    href: '/app/meetings',\r\n    icon: CheckMeetingIcon,\r\n    title: 'Check Meeting '\r\n  },\r\n \r\n  {\r\n    href: '/app/createTopic',\r\n    icon: CreateTopicIcon,\r\n    title: 'Create Topic'\r\n  },\r\n  \r\n  {\r\n    href: '/app/topics',\r\n    icon: CheckTopicPoolIcon,\r\n    title: 'Check Topic Pool'\r\n  },\r\n  {\r\n    href: '/app/meetingHistory',\r\n    icon: CheckHistoryIcon,\r\n    title: 'Check Meeting History'\r\n  },\r\n  {\r\n    href: '/app/account',\r\n    icon: UserIcon,\r\n    title: 'Account'\r\n  },\r\n  {\r\n    href: '/app/settings',\r\n    icon: SettingsIcon,\r\n    title: 'Settings'\r\n  },\r\n\r\n];\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  mobileDrawer: {\r\n    width: 256\r\n  },\r\n  desktopDrawer: {\r\n    width: 256,\r\n    top: 64,\r\n    height: 'calc(100% - 64px)'\r\n  },\r\n  avatar: {\r\n    cursor: 'pointer',\r\n    width: 64,\r\n    height: 64\r\n  }\r\n}));\r\n\r\nconst name = \" Syed Amish Alvi \";\r\n\r\nconst NavBar = ({onMobileClose, openMobile}) => {\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  //console.log(name)\r\n  \r\n\r\n  useEffect(() => {\r\n    if (openMobile && onMobileClose) {\r\n      onMobileClose();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [location.pathname]);\r\n\r\n  const content = (\r\n    <Box\r\n      height=\"100%\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n    >\r\n      <Box\r\n        alignItems=\"center\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        p={2}\r\n      >\r\n        <Avatar\r\n          className={classes.avatar}s\r\n          component={RouterLink}\r\n          src={staticInfo.avatar}\r\n          to=\"/app/account\"\r\n        />\r\n        <Typography\r\n          className={classes.name}\r\n          color=\"textPrimary\"\r\n          variant=\"h5\"\r\n        >\r\n          Welcome!\r\n        </Typography>\r\n        <Typography\r\n          color=\"textSecondary\"\r\n          variant=\"body2\"\r\n        >\r\n         \"Syed Amish Alvi\"\r\n        </Typography>\r\n      </Box>\r\n      <Divider />\r\n      <Box p={2}>\r\n        <List>\r\n          {items.map((item) => (\r\n            <NavItem\r\n              href={item.href}\r\n              key={item.title}\r\n              title={item.title}\r\n              icon={item.icon}\r\n            />\r\n          ))}\r\n        </List>\r\n      </Box>\r\n      <Box flexGrow={1} />\r\n      \r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Hidden lgUp>\r\n        <Drawer\r\n          anchor=\"left\"\r\n          classes={{ paper: classes.mobileDrawer }}\r\n          onClose={onMobileClose}\r\n          open={openMobile}\r\n          variant=\"temporary\"\r\n        >\r\n          {content}\r\n        </Drawer>\r\n      </Hidden>\r\n      <Hidden mdDown>\r\n        <Drawer\r\n          anchor=\"left\"\r\n          classes={{ paper: classes.desktopDrawer }}\r\n          open\r\n          variant=\"persistent\"\r\n        >\r\n          {content}\r\n        </Drawer>\r\n      </Hidden>\r\n    </>\r\n  );\r\n};\r\n\r\nNavBar.propTypes = {\r\n  onMobileClose: PropTypes.func,\r\n  openMobile: PropTypes.bool\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  onMobileClose: () => {},\r\n  openMobile: false\r\n};\r\n\r\n/*function mapStateToProps(state) {\r\n  return {\r\n      user: state\r\n      }\r\n  }*/\r\n\r\n\r\nexport default NavBar;","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\features\\userSlice.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meetingHistory\\index.js",[],"C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\meetingHistory\\meetingHistoryList.js",["311","312","313","314","315","316"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles\r\n  \r\n} from '@material-ui/core';\r\nimport {\r\n  Button\r\n} from '@material-ui/core';\r\nimport Async from 'react-async';\r\nimport { CompareArrowsOutlined } from '@material-ui/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n\r\n  /* tableRow: {\r\n    height: 30\r\n  }, */\r\n}));\r\n\r\n/* \r\nconst deneme=(async res=>{\r\nconst url=\"http://localhost:81/topic/getTopic\";\r\nresponse = await fetch(url);\r\nconst data = await response.json();\r\nconsole.log(data);}) */\r\n\r\nconst MeetingHistoryList = ({ className,  ...rest }) => {\r\n  const classes = useStyles();\r\n  const [limit, setLimit] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n    setPage(0);\r\n  };\r\n  const [endedMeeting, setEndedMeeting]=useState([]);    \r\n  const emptyRows = limit - Math.min(limit, endedMeeting.length - page * limit);\r\n  \r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  \r\n  const getTopics = async values => {\r\n    const url = \"http://localhost:81/meeting/getEndedMeetings\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n      // console.log(data)\r\n\r\n      if (data.status == \"success\") {\r\n        console.log(\"success\");\r\n        setEndedMeeting(data.data)\r\n         console.log(endedMeeting)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  };\r\n\r\n   \r\n  \r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n     \r\n      <PerfectScrollbar>\r\n        <Box minWidth={1050}>\r\n        <Async promiseFn={getTopics}>\r\n          \r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n               \r\n              <TableCell>\r\n                  Title\r\n                </TableCell>\r\n                <TableCell>\r\n                  Date\r\n                </TableCell>\r\n                <TableCell>\r\n                Time\r\n                </TableCell>\r\n                <TableCell>\r\n                  Meeting Output\r\n                </TableCell>\r\n                <TableCell>\r\n                  \r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n               {endedMeeting.slice( page* limit, page * limit + limit).map((meeting) => (\r\n                <TableRow\r\n                  hover\r\n                 key={meeting._id}\r\n                 className={classes.tableRow}\r\n                >\r\n                 \r\n                  <TableCell>\r\n                    <Box\r\n                      alignItems=\"center\"\r\n                      display=\"flex\"\r\n                    >\r\n                      \r\n                      <Typography\r\n                        color=\"textPrimary\"\r\n                        variant=\"body1\"\r\n                      >\r\n                        {meeting.title}\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {moment(meeting.date).format('DD MMM YYYY')} \r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {moment(meeting.date).format('LT')}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {meeting.information &&(\r\n                    <p>Information Meeting</p>\r\n                  )}\r\n                  {meeting.decision &&(\r\n                    <p>Decision Meeting</p>\r\n                  )}\r\n                 \r\n                  </TableCell>\r\n                  <TableCell>\r\n                  <Button href=\"\" color=\"primary\">\r\n                  Upload Output </Button>\r\n                  </TableCell>\r\n                  \r\n                </TableRow>\r\n              ))} \r\n               {emptyRows > 0 && (\r\n                <TableRow style={{ height:  56 * emptyRows }}>\r\n                  <TableCell colSpan={5} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n          </Async>\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={endedMeeting.length}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\nexport default MeetingHistoryList;\r\n","C:\\Users\\Shahla\\Documents\\GitHub\\TBKMeet\\client\\src\\views\\auth\\ForgotPassword.js",["317","318","319","320","321","322","323","324","325","326","327","328","329"],"import React, {useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  Snackbar,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Page from 'src/components/Page';\r\nimport linearGradient from 'src/components/linearGradient';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Cookies from 'js-cookie'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst ForgotPassword = props => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [tokenState,setTokenState]= useState(\"\");\r\n  var [isClicked,setIsClicked]= useState(false);\r\n\r\n  //Alert Function \r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  function validationHandle()\r\n  {\r\n    if(isClicked)\r\n    {\r\n      return(\r\n        Yup.object().shape({\r\n          email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n          password: Yup.string().min(8, 'Password must be at least 8 characters').required('password is required'),\r\n          confirmPassword: Yup.string().min(8, 'Password must be at least 8 characters').required('password is required').oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n        })\r\n      )\r\n    }\r\n    else{\r\n      return(Yup.object().shape({\r\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n      }))\r\n    }\r\n  }\r\n//Close func for closing the alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n    const resetTokenClicked= async values =>{\r\n      const { email } = values;\r\n      var body = {\r\n        email: email\r\n      };\r\n      const options = {\r\n        method: \"POST\",\r\n        credentials: 'include',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n\r\n      };\r\n      const url = \"http://localhost:81/auth/resetTokenClicked\";\r\n     \r\n      try {\r\n        const response = await fetch(url, options);\r\n        const text = await response.json();\r\n        const head = await response.headers\r\n        console.log( head)\r\n        const user = text.data\r\n  \r\n        if (text.status == \"success\") {\r\n          console.log(\"success\")\r\n          console.log(text)\r\n          return true;\r\n          \r\n        } else {\r\n          console.log(text.message);\r\n            \r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    const resetPassword= async values =>{\r\n      const { email,password } = values;\r\n      var body = {\r\n        email: email,\r\n        password:password\r\n      };\r\n      const options = {\r\n        method: \"POST\",\r\n        credentials: 'include',\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n\r\n      };\r\n      const url = \"http://localhost:81/auth/newPassword\";\r\n      await setTokenState(resetTokenClicked);\r\n      if(tokenState){\r\n      try {\r\n        const response = await fetch(url, options);\r\n        const text = await response.json();\r\n        const head = await response.headers\r\n        console.log( head)\r\n        const user = text.data\r\n  \r\n        if (text.status == \"success\") {\r\n          console.log(\"success\")\r\n          console.log(text)\r\n          navigate('/login')\r\n          \r\n        } else {\r\n          console.log(text.message);\r\n          setErrorMessage(\"Password change failed\")\r\n          setOpen(true);    \r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n     }\r\n     else{\r\n      setErrorMessage(\"Please verify from your email\")\r\n      setOpen(true);  \r\n     }\r\n    }\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async values => {\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n    const { email } = values;\r\n    var body = {\r\n      email: email\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      credentials: 'include',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/auth/passwordreset\";\r\n   \r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      const head = await response.headers\r\n      //console.log( head)\r\n      const user = text.data\r\n\r\n      if (text.status == \"success\") {\r\n       // console.log(\"success\")\r\n    \r\n        \r\n      } else {\r\n        //console.log(text.message);\r\n        setErrorMessage(text.message)\r\n        setOpen(true);    \r\n      }\r\n    } catch (error) {\r\n     // console.error(error);\r\n    }\r\n    setIsClicked(true);\r\n    console.log(isClicked)\r\n  };\r\n \r\n  // Returning the part that should be rendered\r\n  // Just set handleSubmit as the handler for the onSubmit call.\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Login\"\r\n    >\r\n      \r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"sm\">\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        password: ''\r\n      }}\r\n      //********Using Yup for validation********/\r\n      onSubmit={resetPassword}\r\n      validationSchema={validationHandle()}\r\n    >\r\n      {props => {\r\n        const {\r\n          email,\r\n          password,\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n        } = props;\r\n        return (\r\n          <>\r\n            <form onSubmit={handleSubmit} noValidate>\r\n                <Box mb={3}>\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"h2\"\r\n                  >\r\n                    Forgot Password\r\n                  </Typography>\r\n                  \r\n                </Box>\r\n              <TextField\r\n                error={Boolean(touched.email && errors.email)}\r\n                fullWidth\r\n                helperText={touched.email && errors.email}\r\n                label=\"Email Address\"\r\n                margin=\"normal\"\r\n                name=\"email\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                type=\"email\"\r\n                value={values.email}\r\n                variant=\"outlined\"\r\n                //className={errors.email && touched.email && \"error\"}\r\n              />\r\n              \r\n              {(() => {\r\n        if (isClicked) {\r\n          return (\r\n            <TextField\r\n            fullWidth\r\n            error={Boolean(touched.password && errors.password)}\r\n            helperText={touched.password && errors.password}\r\n            label=\"Password\"\r\n            margin=\"normal\"\r\n            name=\"password\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            value={values.password}\r\n            variant=\"outlined\"\r\n          />\r\n          )\r\n           }\r\n      })()}\r\n              \r\n                \r\n                 \r\n                {(() => {\r\n        if (isClicked) {\r\n          return (\r\n            <TextField\r\n                   fullWidth\r\n                   error={Boolean(touched.confirmPassword && errors.confirmPassword)}\r\n                   helperText={touched.confirmPassword && errors.confirmPassword}\r\n                   label=\"Confirm password\"\r\n                   margin=\"normal\"\r\n                   name=\"confirmPassword\"\r\n                   onChange={handleChange}\r\n                   onBlur={handleBlur}\r\n                   type=\"password\"\r\n                   value={values.confirmPassword}\r\n                   variant=\"outlined\"\r\n                 />\r\n          )\r\n           }\r\n      })()} \r\n              <Box my={2}>\r\n                {isClicked\r\n                   ?<Button \r\n                   className={linearGradient().root}\r\n                       disabled={isSubmitting}\r\n                       fullWidth\r\n                       /* type=\"submit\" */\r\n                       size=\"large\"\r\n                       onClick={()=>{resetPassword(values)}}\r\n                       variant=\"contained\" >\r\n                         Reset Password\r\n                   </Button> \r\n                   : <Button \r\n                   className={linearGradient().root}\r\n                       disabled={isSubmitting}\r\n                       fullWidth\r\n                       size=\"large\"\r\n                       onClick={()=>{handleSubmit(values)}}\r\n                       variant=\"contained\" >\r\n                         Send Password Reset Request\r\n                   </Button>\r\n                }                        \r\n              </Box>\r\n            </form>\r\n          </>\r\n        );\r\n      }}\r\n    </Formik>\r\n  </Container>  \r\n</Box>\r\n<Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"Error\">\r\n            {errorMessage}  \r\n        </Alert>\r\n      </Snackbar>\r\n</Page>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n",{"ruleId":"330","replacedBy":"331"},{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","severity":1,"message":"335","line":2,"column":20,"nodeType":"336","messageId":"337","endLine":2,"endColumn":26},{"ruleId":"334","severity":1,"message":"338","line":24,"column":7,"nodeType":"336","messageId":"337","endLine":24,"endColumn":13},{"ruleId":"339","severity":1,"message":"340","line":35,"column":5,"nodeType":"341","messageId":"342","endLine":35,"endColumn":11},{"ruleId":"343","severity":1,"message":"344","line":90,"column":23,"nodeType":"345","messageId":"342","endLine":90,"endColumn":25},{"ruleId":"334","severity":1,"message":"346","line":18,"column":10,"nodeType":"336","messageId":"337","endLine":18,"endColumn":15},{"ruleId":"334","severity":1,"message":"347","line":19,"column":8,"nodeType":"336","messageId":"337","endLine":19,"endColumn":15},{"ruleId":"334","severity":1,"message":"348","line":33,"column":10,"nodeType":"336","messageId":"337","endLine":33,"endColumn":15},{"ruleId":"334","severity":1,"message":"349","line":33,"column":17,"nodeType":"336","messageId":"337","endLine":33,"endColumn":25},{"ruleId":"334","severity":1,"message":"350","line":34,"column":10,"nodeType":"336","messageId":"337","endLine":34,"endColumn":18},{"ruleId":"334","severity":1,"message":"351","line":34,"column":20,"nodeType":"336","messageId":"337","endLine":34,"endColumn":31},{"ruleId":"343","severity":1,"message":"344","line":77,"column":23,"nodeType":"345","messageId":"342","endLine":77,"endColumn":25},{"ruleId":"334","severity":1,"message":"348","line":124,"column":11,"nodeType":"336","messageId":"337","endLine":124,"endColumn":16},{"ruleId":"334","severity":1,"message":"350","line":125,"column":11,"nodeType":"336","messageId":"337","endLine":125,"endColumn":19},{"ruleId":"352","severity":1,"message":"353","line":1,"column":1,"nodeType":"354","endLine":35,"endColumn":3},{"ruleId":"334","severity":1,"message":"355","line":1,"column":17,"nodeType":"336","messageId":"337","endLine":1,"endColumn":26},{"ruleId":"334","severity":1,"message":"356","line":1,"column":28,"nodeType":"336","messageId":"337","endLine":1,"endColumn":36},{"ruleId":"334","severity":1,"message":"357","line":1,"column":38,"nodeType":"336","messageId":"337","endLine":1,"endColumn":44},{"ruleId":"334","severity":1,"message":"358","line":9,"column":10,"nodeType":"336","messageId":"337","endLine":9,"endColumn":14},{"ruleId":"334","severity":1,"message":"359","line":17,"column":8,"nodeType":"336","messageId":"337","endLine":17,"endColumn":15},{"ruleId":"343","severity":1,"message":"344","line":51,"column":27,"nodeType":"345","messageId":"342","endLine":51,"endColumn":29},{"ruleId":"334","severity":1,"message":"360","line":7,"column":10,"nodeType":"336","messageId":"337","endLine":7,"endColumn":12},{"ruleId":"361","severity":1,"message":"362","line":41,"column":8,"nodeType":"363","endLine":41,"endColumn":10,"suggestions":"364"},{"ruleId":"361","severity":1,"message":"365","line":107,"column":15,"nodeType":"366","endLine":115,"endColumn":6},{"ruleId":"361","severity":1,"message":"367","line":115,"column":7,"nodeType":"363","endLine":115,"endColumn":9,"suggestions":"368"},{"ruleId":"361","severity":1,"message":"367","line":292,"column":8,"nodeType":"363","endLine":292,"endColumn":10,"suggestions":"369"},{"ruleId":"334","severity":1,"message":"370","line":61,"column":10,"nodeType":"336","messageId":"337","endLine":61,"endColumn":18},{"ruleId":"361","severity":1,"message":"365","line":63,"column":13,"nodeType":"366","endLine":71,"endColumn":4},{"ruleId":"334","severity":1,"message":"371","line":2,"column":8,"nodeType":"336","messageId":"337","endLine":2,"endColumn":17},{"ruleId":"334","severity":1,"message":"372","line":14,"column":3,"nodeType":"336","messageId":"337","endLine":14,"endColumn":14},{"ruleId":"343","severity":1,"message":"344","line":74,"column":23,"nodeType":"345","messageId":"342","endLine":74,"endColumn":25},{"ruleId":"343","severity":1,"message":"344","line":198,"column":40,"nodeType":"345","messageId":"342","endLine":198,"endColumn":42},{"ruleId":"334","severity":1,"message":"373","line":16,"column":7,"nodeType":"336","messageId":"337","endLine":16,"endColumn":13},{"ruleId":"334","severity":1,"message":"374","line":43,"column":15,"nodeType":"336","messageId":"337","endLine":43,"endColumn":23},{"ruleId":"334","severity":1,"message":"358","line":2,"column":10,"nodeType":"336","messageId":"337","endLine":2,"endColumn":14},{"ruleId":"334","severity":1,"message":"375","line":2,"column":41,"nodeType":"336","messageId":"337","endLine":2,"endColumn":51},{"ruleId":"334","severity":1,"message":"376","line":3,"column":10,"nodeType":"336","messageId":"337","endLine":3,"endColumn":18},{"ruleId":"343","severity":1,"message":"344","line":82,"column":40,"nodeType":"345","messageId":"342","endLine":82,"endColumn":42},{"ruleId":"343","severity":1,"message":"344","line":123,"column":23,"nodeType":"345","messageId":"342","endLine":123,"endColumn":25},{"ruleId":"361","severity":1,"message":"365","line":146,"column":13,"nodeType":"366","endLine":154,"endColumn":4},{"ruleId":"361","severity":1,"message":"377","line":154,"column":5,"nodeType":"363","endLine":154,"endColumn":7,"suggestions":"378"},{"ruleId":"379","severity":1,"message":"380","line":302,"column":13,"nodeType":"381","endLine":302,"endColumn":32},{"ruleId":"343","severity":1,"message":"344","line":315,"column":40,"nodeType":"345","messageId":"342","endLine":315,"endColumn":42},{"ruleId":"334","severity":1,"message":"382","line":2,"column":18,"nodeType":"336","messageId":"337","endLine":2,"endColumn":28},{"ruleId":"334","severity":1,"message":"383","line":2,"column":43,"nodeType":"336","messageId":"337","endLine":2,"endColumn":52},{"ruleId":"334","severity":1,"message":"384","line":12,"column":8,"nodeType":"336","messageId":"337","endLine":12,"endColumn":13},{"ruleId":"334","severity":1,"message":"385","line":114,"column":10,"nodeType":"336","messageId":"337","endLine":114,"endColumn":15},{"ruleId":"334","severity":1,"message":"386","line":114,"column":17,"nodeType":"336","messageId":"337","endLine":114,"endColumn":25},{"ruleId":"334","severity":1,"message":"387","line":117,"column":10,"nodeType":"336","messageId":"337","endLine":117,"endColumn":27},{"ruleId":"334","severity":1,"message":"388","line":117,"column":29,"nodeType":"336","messageId":"337","endLine":117,"endColumn":53},{"ruleId":"361","severity":1,"message":"365","line":150,"column":13,"nodeType":"366","endLine":155,"endColumn":4},{"ruleId":"361","severity":1,"message":"365","line":173,"column":13,"nodeType":"366","endLine":187,"endColumn":4},{"ruleId":"389","severity":1,"message":"390","line":178,"column":22,"nodeType":"366","messageId":"391","endLine":178,"endColumn":24},{"ruleId":"343","severity":1,"message":"344","line":182,"column":18,"nodeType":"345","messageId":"342","endLine":182,"endColumn":20},{"ruleId":"361","severity":1,"message":"392","line":187,"column":5,"nodeType":"363","endLine":187,"endColumn":7,"suggestions":"393"},{"ruleId":"343","severity":1,"message":"344","line":257,"column":30,"nodeType":"345","messageId":"342","endLine":257,"endColumn":32},{"ruleId":"343","severity":1,"message":"344","line":289,"column":23,"nodeType":"345","messageId":"342","endLine":289,"endColumn":25},{"ruleId":"361","severity":1,"message":"365","line":311,"column":11,"nodeType":"366","endLine":323,"endColumn":4},{"ruleId":"361","severity":1,"message":"394","line":323,"column":5,"nodeType":"363","endLine":323,"endColumn":7,"suggestions":"395"},{"ruleId":"334","severity":1,"message":"396","line":389,"column":9,"nodeType":"336","messageId":"337","endLine":389,"endColumn":20},{"ruleId":"379","severity":1,"message":"380","line":619,"column":13,"nodeType":"381","endLine":619,"endColumn":32},{"ruleId":"343","severity":1,"message":"344","line":633,"column":40,"nodeType":"345","messageId":"342","endLine":633,"endColumn":42},{"ruleId":"334","severity":1,"message":"397","line":1,"column":17,"nodeType":"336","messageId":"337","endLine":1,"endColumn":26},{"ruleId":"334","severity":1,"message":"398","line":8,"column":8,"nodeType":"336","messageId":"337","endLine":8,"endColumn":23},{"ruleId":"334","severity":1,"message":"399","line":68,"column":7,"nodeType":"336","messageId":"337","endLine":68,"endColumn":13},{"ruleId":"334","severity":1,"message":"400","line":68,"column":14,"nodeType":"336","messageId":"337","endLine":68,"endColumn":23},{"ruleId":"334","severity":1,"message":"401","line":90,"column":10,"nodeType":"336","messageId":"337","endLine":90,"endColumn":16},{"ruleId":"334","severity":1,"message":"401","line":89,"column":12,"nodeType":"336","messageId":"337","endLine":89,"endColumn":18},{"ruleId":"402","severity":1,"message":"403","line":180,"column":25,"nodeType":"404","endLine":180,"endColumn":28},{"ruleId":"352","severity":1,"message":"405","line":1,"column":1,"nodeType":"354","endLine":27,"endColumn":3},{"ruleId":"334","severity":1,"message":"406","line":20,"column":10,"nodeType":"336","messageId":"337","endLine":20,"endColumn":31},{"ruleId":"343","severity":1,"message":"344","line":109,"column":23,"nodeType":"345","messageId":"342","endLine":109,"endColumn":25},{"ruleId":"334","severity":1,"message":"382","line":2,"column":18,"nodeType":"336","messageId":"337","endLine":2,"endColumn":28},{"ruleId":"334","severity":1,"message":"407","line":44,"column":9,"nodeType":"336","messageId":"337","endLine":44,"endColumn":17},{"ruleId":"343","severity":1,"message":"344","line":77,"column":40,"nodeType":"345","messageId":"342","endLine":77,"endColumn":42},{"ruleId":"343","severity":1,"message":"344","line":118,"column":23,"nodeType":"345","messageId":"342","endLine":118,"endColumn":25},{"ruleId":"379","severity":1,"message":"380","line":277,"column":13,"nodeType":"381","endLine":277,"endColumn":32},{"ruleId":"343","severity":1,"message":"344","line":290,"column":40,"nodeType":"345","messageId":"342","endLine":290,"endColumn":42},{"ruleId":"334","severity":1,"message":"382","line":2,"column":18,"nodeType":"336","messageId":"337","endLine":2,"endColumn":28},{"ruleId":"334","severity":1,"message":"408","line":2,"column":30,"nodeType":"336","messageId":"337","endLine":2,"endColumn":41},{"ruleId":"334","severity":1,"message":"384","line":12,"column":8,"nodeType":"336","messageId":"337","endLine":12,"endColumn":13},{"ruleId":"334","severity":1,"message":"387","line":113,"column":10,"nodeType":"336","messageId":"337","endLine":113,"endColumn":27},{"ruleId":"334","severity":1,"message":"388","line":113,"column":29,"nodeType":"336","messageId":"337","endLine":113,"endColumn":53},{"ruleId":"343","severity":1,"message":"344","line":136,"column":23,"nodeType":"345","messageId":"342","endLine":136,"endColumn":25},{"ruleId":"343","severity":1,"message":"344","line":156,"column":23,"nodeType":"345","messageId":"342","endLine":156,"endColumn":25},{"ruleId":"343","severity":1,"message":"344","line":266,"column":30,"nodeType":"345","messageId":"342","endLine":266,"endColumn":32},{"ruleId":"343","severity":1,"message":"344","line":301,"column":23,"nodeType":"345","messageId":"342","endLine":301,"endColumn":25},{"ruleId":"334","severity":1,"message":"396","line":369,"column":9,"nodeType":"336","messageId":"337","endLine":369,"endColumn":20},{"ruleId":"379","severity":1,"message":"380","line":596,"column":13,"nodeType":"381","endLine":596,"endColumn":32},{"ruleId":"343","severity":1,"message":"344","line":610,"column":40,"nodeType":"345","messageId":"342","endLine":610,"endColumn":42},{"ruleId":"334","severity":1,"message":"409","line":22,"column":16,"nodeType":"336","messageId":"337","endLine":22,"endColumn":33},{"ruleId":"334","severity":1,"message":"410","line":95,"column":7,"nodeType":"336","messageId":"337","endLine":95,"endColumn":11},{"ruleId":"334","severity":1,"message":"406","line":21,"column":10,"nodeType":"336","messageId":"337","endLine":21,"endColumn":31},{"ruleId":"334","severity":1,"message":"358","line":22,"column":10,"nodeType":"336","messageId":"337","endLine":22,"endColumn":14},{"ruleId":"334","severity":1,"message":"411","line":23,"column":8,"nodeType":"336","messageId":"337","endLine":23,"endColumn":16},{"ruleId":"334","severity":1,"message":"412","line":24,"column":8,"nodeType":"336","messageId":"337","endLine":24,"endColumn":18},{"ruleId":"334","severity":1,"message":"413","line":25,"column":8,"nodeType":"336","messageId":"337","endLine":25,"endColumn":16},{"ruleId":"343","severity":1,"message":"344","line":65,"column":23,"nodeType":"345","messageId":"342","endLine":65,"endColumn":25},{"ruleId":"334","severity":1,"message":"382","line":2,"column":18,"nodeType":"336","messageId":"337","endLine":2,"endColumn":28},{"ruleId":"334","severity":1,"message":"358","line":9,"column":3,"nodeType":"336","messageId":"337","endLine":9,"endColumn":7},{"ruleId":"334","severity":1,"message":"346","line":18,"column":10,"nodeType":"336","messageId":"337","endLine":18,"endColumn":15},{"ruleId":"334","severity":1,"message":"347","line":19,"column":8,"nodeType":"336","messageId":"337","endLine":19,"endColumn":15},{"ruleId":"334","severity":1,"message":"414","line":90,"column":15,"nodeType":"336","messageId":"337","endLine":90,"endColumn":19},{"ruleId":"343","severity":1,"message":"344","line":92,"column":25,"nodeType":"345","messageId":"342","endLine":92,"endColumn":27},{"ruleId":"334","severity":1,"message":"414","line":131,"column":15,"nodeType":"336","messageId":"337","endLine":131,"endColumn":19},{"ruleId":"343","severity":1,"message":"344","line":133,"column":25,"nodeType":"345","messageId":"342","endLine":133,"endColumn":27},{"ruleId":"334","severity":1,"message":"415","line":174,"column":13,"nodeType":"336","messageId":"337","endLine":174,"endColumn":17},{"ruleId":"334","severity":1,"message":"414","line":176,"column":13,"nodeType":"336","messageId":"337","endLine":176,"endColumn":17},{"ruleId":"343","severity":1,"message":"344","line":178,"column":23,"nodeType":"345","messageId":"342","endLine":178,"endColumn":25},{"ruleId":"334","severity":1,"message":"348","line":220,"column":11,"nodeType":"336","messageId":"337","endLine":220,"endColumn":16},{"ruleId":"334","severity":1,"message":"350","line":221,"column":11,"nodeType":"336","messageId":"337","endLine":221,"endColumn":19},"no-native-reassign",["416"],"no-negated-in-lhs",["417"],"no-unused-vars","'Outlet' is defined but never used.","Identifier","unusedVar","'styles' is assigned a value but never used.","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Alert' is defined but never used.","'Cookies' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'Link' is defined but never used.","'Toolbar' is defined but never used.","'id' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.","ArrayExpression",["418"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["419"],["420"],"'meetings' is assigned a value but never used.","'PropTypes' is defined but never used.","'FormControl' is defined but never used.","'cities' is assigned a value but never used.","'response' is assigned a value but never used.","'useHistory' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'topicId'. Either include it or remove the dependency array.",["421"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'RouterLink' is defined but never used.","'useParams' is defined but never used.","'Async' is defined but never used.","'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'selectParticipats' is assigned a value but never used.","'setSelectionParticipants' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'selectedTopic' and 'topic'. Either include them or remove the dependency array.",["422"],"React Hook useEffect has a missing dependency: 'meetingId'. Either include it or remove the dependency array.",["423"],"'handleReset' is assigned a value but never used.","'Component' is defined but never used.","'MeetingListView' is defined but never used.","'events' is assigned a value but never used.","'setEvents' is assigned a value but never used.","'create' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Assign array to a variable before exporting as module default","'CompareArrowsOutlined' is defined but never used.","'navigate' is assigned a value but never used.","'useNavigate' is defined but never used.","'AttendMeetingIcon' is defined but never used.","'name' is assigned a value but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'InfoIcon' is defined but never used.","'user' is assigned a value but never used.","'head' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"426","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},"Update the dependencies array to be: [props.peer]",{"range":"435","text":"436"},"Update the dependencies array to be: [roomID]",{"range":"437","text":"438"},{"range":"439","text":"438"},"Update the dependencies array to be: [topicId]",{"range":"440","text":"441"},"Update the dependencies array to be: [selectedTopic, topic]",{"range":"442","text":"443"},"Update the dependencies array to be: [meetingId]",{"range":"444","text":"445"},[1348,1350],"[props.peer]",[3322,3324],"[roomID]",[8222,8224],[4014,4016],"[topicId]",[5511,5513],"[selectedTopic, topic]",[9045,9047],"[meetingId]"]