[{"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\index.js":"1","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\reportWebVitals.js":"2","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\App.js":"3","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\routes.js":"4","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\GlobalStyles.js":"5","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\index.js":"6","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\RegisterView.js":"7","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\errors\\NotFoundView.js":"8","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\LoginView.js":"9","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\shadows.js":"10","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\typography.js":"11","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\index.js":"12","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\index.js":"13","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\index.js":"14","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\index.js":"15","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\index.js":"16","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\index.js":"17","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\Room\\index.js":"18","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js":"19","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\index.js":"20","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\index.js":"21","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\index.js":"22","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\linearGradient.js":"23","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Page.js":"24","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\TopBar.js":"25","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\createMeetingForm.js":"26","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\Notifications.js":"27","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\TopBar.js":"28","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js":"29","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js":"30","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\data.js":"31","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Results.js":"32","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js":"33","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js":"34","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Logo.js":"35","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js":"36","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Password.js":"37","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\ProfileDetails.js":"38","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Profile.js":"39","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\topicList.js":"40","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\createTopicForm.js":"41","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\index.js":"42","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\App.js":"43","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\reportWebVitals.js":"44","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\routes.js":"45","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\GlobalStyles.js":"46","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\theme\\index.js":"47","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\auth\\LoginView.js":"48","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\auth\\RegisterView.js":"49","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\errors\\NotFoundView.js":"50","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\theme\\shadows.js":"51","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\theme\\typography.js":"52","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\topicPool\\index.js":"53","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createTopic\\index.js":"54","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createMeeting\\index.js":"55","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\MainLayout\\index.js":"56","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\index.js":"57","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\index.js":"58","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\index.js":"59","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\index.js":"60","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js":"61","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\attendMeeting\\Room\\index.js":"62","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\index.js":"63","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\Page.js":"64","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\linearGradient.js":"65","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\TopBar.js":"66","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\Notifications.js":"67","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js":"68","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js":"69","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Results.js":"70","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js":"71","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\Password.js":"72","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\ProfileDetails.js":"73","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js":"74","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\Logo.js":"75","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js":"76","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\Profile.js":"77","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\MainLayout\\TopBar.js":"78","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createMeeting\\createMeetingForm.js":"79","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createTopic\\createTopicForm.js":"80","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\topicPool\\topicList.js":"81","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyTopic\\index.js":"82","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyMeeting\\index.js":"83","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyTopic\\modifyTopicForm.js":"84","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyMeeting\\ModifyMeetingForm.js":"85","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\app\\store.js":"86","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\features\\userSlice.js":"87","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meetingHistory\\index.js":"88","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meetingHistory\\meetingHistoryList.js":"89"},{"size":649,"mtime":1617288545000,"results":"90","hashOfConfig":"91"},{"size":362,"mtime":1617288545000,"results":"92","hashOfConfig":"91"},{"size":506,"mtime":1617288545000,"results":"93","hashOfConfig":"91"},{"size":2030,"mtime":1617288545000,"results":"94","hashOfConfig":"91"},{"size":672,"mtime":1617288545000,"results":"95","hashOfConfig":"91"},{"size":551,"mtime":1617288545000,"results":"96","hashOfConfig":"91"},{"size":9762,"mtime":1617288545000,"results":"97","hashOfConfig":"91"},{"size":1547,"mtime":1617288545000,"results":"98","hashOfConfig":"91"},{"size":5610,"mtime":1617288545000,"results":"99","hashOfConfig":"91"},{"size":1618,"mtime":1617288545000,"results":"100","hashOfConfig":"91"},{"size":544,"mtime":1617288545000,"results":"101","hashOfConfig":"91"},{"size":900,"mtime":1617288545000,"results":"102","hashOfConfig":"91"},{"size":702,"mtime":1617288545000,"results":"103","hashOfConfig":"91"},{"size":985,"mtime":1617288545000,"results":"104","hashOfConfig":"91"},{"size":1368,"mtime":1617288545000,"results":"105","hashOfConfig":"91"},{"size":896,"mtime":1617288545000,"results":"106","hashOfConfig":"91"},{"size":661,"mtime":1617288545000,"results":"107","hashOfConfig":"91"},{"size":4160,"mtime":1617434191611,"results":"108","hashOfConfig":"91"},{"size":410,"mtime":1617288545000,"results":"109","hashOfConfig":"91"},{"size":1343,"mtime":1617288545000,"results":"110","hashOfConfig":"91"},{"size":1001,"mtime":1617288545000,"results":"111","hashOfConfig":"91"},{"size":3349,"mtime":1617288545000,"results":"112","hashOfConfig":"91"},{"size":369,"mtime":1617288545000,"results":"113","hashOfConfig":"91"},{"size":462,"mtime":1617288545000,"results":"114","hashOfConfig":"91"},{"size":1635,"mtime":1617288545000,"results":"115","hashOfConfig":"91"},{"size":16971,"mtime":1617288545000,"results":"116","hashOfConfig":"91"},{"size":3107,"mtime":1617288545000,"results":"117","hashOfConfig":"91"},{"size":722,"mtime":1617288545000,"results":"118","hashOfConfig":"91"},{"size":1444,"mtime":1617288545000,"results":"119","hashOfConfig":"91"},{"size":1919,"mtime":1617288545000,"results":"120","hashOfConfig":"91"},{"size":2540,"mtime":1617288545000,"results":"121","hashOfConfig":"91"},{"size":4783,"mtime":1617288545000,"results":"122","hashOfConfig":"91"},{"size":3173,"mtime":1617288545000,"results":"123","hashOfConfig":"91"},{"size":3761,"mtime":1617288545000,"results":"124","hashOfConfig":"91"},{"size":174,"mtime":1617288545000,"results":"125","hashOfConfig":"91"},{"size":1637,"mtime":1617288545000,"results":"126","hashOfConfig":"91"},{"size":1765,"mtime":1617288545000,"results":"127","hashOfConfig":"91"},{"size":3395,"mtime":1617288545000,"results":"128","hashOfConfig":"91"},{"size":1738,"mtime":1617288545000,"results":"129","hashOfConfig":"91"},{"size":4300,"mtime":1617288545000,"results":"130","hashOfConfig":"91"},{"size":8425,"mtime":1617288545000,"results":"131","hashOfConfig":"91"},{"size":789,"mtime":1619545504957,"results":"132","hashOfConfig":"133"},{"size":692,"mtime":1619545504954,"results":"134","hashOfConfig":"133"},{"size":375,"mtime":1617734614368,"results":"135","hashOfConfig":"133"},{"size":2431,"mtime":1619547612551,"results":"136","hashOfConfig":"133"},{"size":709,"mtime":1617734614346,"results":"137","hashOfConfig":"133"},{"size":578,"mtime":1617734614369,"results":"138","hashOfConfig":"133"},{"size":6225,"mtime":1619545505023,"results":"139","hashOfConfig":"133"},{"size":10087,"mtime":1617734776335,"results":"140","hashOfConfig":"133"},{"size":1615,"mtime":1617734614393,"results":"141","hashOfConfig":"133"},{"size":1645,"mtime":1617734614370,"results":"142","hashOfConfig":"133"},{"size":579,"mtime":1617734614370,"results":"143","hashOfConfig":"133"},{"size":739,"mtime":1617734776362,"results":"144","hashOfConfig":"133"},{"size":948,"mtime":1617734776357,"results":"145","hashOfConfig":"133"},{"size":1032,"mtime":1617734776356,"results":"146","hashOfConfig":"133"},{"size":1050,"mtime":1617734614368,"results":"147","hashOfConfig":"133"},{"size":1401,"mtime":1617734614366,"results":"148","hashOfConfig":"133"},{"size":1438,"mtime":1617734776319,"results":"149","hashOfConfig":"133"},{"size":944,"mtime":1617734776358,"results":"150","hashOfConfig":"133"},{"size":3419,"mtime":1617994976464,"results":"151","hashOfConfig":"133"},{"size":428,"mtime":1617734776320,"results":"152","hashOfConfig":"133"},{"size":8152,"mtime":1618379963432,"results":"153","hashOfConfig":"133"},{"size":696,"mtime":1617734776361,"results":"154","hashOfConfig":"133"},{"size":490,"mtime":1617734614347,"results":"155","hashOfConfig":"133"},{"size":388,"mtime":1617734776299,"results":"156","hashOfConfig":"133"},{"size":1911,"mtime":1619545505009,"results":"157","hashOfConfig":"133"},{"size":3245,"mtime":1617734614396,"results":"158","hashOfConfig":"133"},{"size":5546,"mtime":1618053670563,"results":"159","hashOfConfig":"133"},{"size":2004,"mtime":1617734776360,"results":"160","hashOfConfig":"133"},{"size":8473,"mtime":1618942113632,"results":"161","hashOfConfig":"133"},{"size":3482,"mtime":1619558139357,"results":"162","hashOfConfig":"133"},{"size":1853,"mtime":1617734776315,"results":"163","hashOfConfig":"133"},{"size":3560,"mtime":1617734776318,"results":"164","hashOfConfig":"133"},{"size":4346,"mtime":1619547838328,"results":"165","hashOfConfig":"133"},{"size":187,"mtime":1617734614346,"results":"166","hashOfConfig":"133"},{"size":1722,"mtime":1617734614365,"results":"167","hashOfConfig":"133"},{"size":1830,"mtime":1617734776316,"results":"168","hashOfConfig":"133"},{"size":755,"mtime":1617734776301,"results":"169","hashOfConfig":"133"},{"size":17675,"mtime":1618936079830,"results":"170","hashOfConfig":"133"},{"size":8786,"mtime":1617742021083,"results":"171","hashOfConfig":"133"},{"size":8078,"mtime":1619554327068,"results":"172","hashOfConfig":"133"},{"size":988,"mtime":1618942113635,"results":"173","hashOfConfig":"133"},{"size":1032,"mtime":1618942113634,"results":"174","hashOfConfig":"133"},{"size":9694,"mtime":1618947481769,"results":"175","hashOfConfig":"133"},{"size":18371,"mtime":1618945533094,"results":"176","hashOfConfig":"133"},{"size":184,"mtime":1619545504955,"results":"177","hashOfConfig":"133"},{"size":498,"mtime":1619545504957,"results":"178","hashOfConfig":"133"},{"size":781,"mtime":1619548008116,"results":"179","hashOfConfig":"133"},{"size":4925,"mtime":1619552677167,"results":"180","hashOfConfig":"133"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},"6izvbt",{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"183"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"183"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"183"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"183"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"183"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"183"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"183"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"183"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"183"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"183"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"183"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"183"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},"dfdyq3",{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"278"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"278"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"278"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"278"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"278"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"278"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"278"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"278"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"278"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"278"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"278"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"278"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"278"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"278"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"278"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"278"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"278"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\index.js",[],["389","390"],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\reportWebVitals.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\App.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\routes.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\GlobalStyles.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\RegisterView.js",["391","392","393"],"import React, {useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Container,\n  FormHelperText,\n  Link,\n  TextField,\n  Typography,\n  Grid,\n  Snackbar,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport linearGradient from 'src/components/linearGradient';\nimport Image from 'src/imgs/meeting_register_img_2.jpg'; // Import using relative path\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst styles = {\n    root: {\n       \n    }\n};\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3),\n    height: '100vh'\n  },\n  image:{\n    backgroundImage: `url(${Image})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundPosition: \"center\",\n    backgroundSize: \"cover\",\n    height: '100vh',\n    marginTop: '-24px',\n  }\n}));\n\nconst RegisterView = props => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [open, setOpen] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n\n  //Alert Function \n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n//Close func for closing the alert\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n  // The function that handles the logic when submitting the form\n  const handleSubmit = async values => {\n    // This function received the values from the form\n    // The line below extract the two fields from the values object.\n    const { email, password, firstName, lastName, companyName } = values;\n    var body = {\n      password: password,\n      email: email,\n      firstName: firstName,\n      lastName: lastName,\n      companyName: companyName\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/auth/signup\";\n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n      console.log(text)\n\n      if (text.status == \"success\") {\n        console.log(\"success\")\n        navigate('/login', { replace: true });\n      } else {\n        console.log(text.message);\n        setErrorMessage(text.message)\n        setOpen(true);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  return (\n    <Page\n      className={classes.root}\n      title=\"Register\"\n    >\n       \n        <Grid\n          container\n          spacing={0}\n        >\n            <CssBaseline />\n            <Grid\n            className={classes.image}\n          \n            lg={6}\n            md={2}\n            xl={6}\n            xs={0}\n          >\n            \n          </Grid>\n          <Grid\n         elevation={6} square\n            lg={6}\n            md={10}\n            xl={6}\n            xs={12}\n          >\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"sm\">\n          <Formik\n            initialValues={{\n              email: '',\n              firstName: '',\n              lastName: '',\n              password: '',\n              companyName: '',\n              policy: false\n            }}\n            onSubmit={handleSubmit}\n\n            validationSchema={\n              Yup.object().shape({\n                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n                firstName: Yup.string().max(255).required('First name is required'),\n                lastName: Yup.string().max(255).required('Last name is required'),\n                password: Yup.string().max(255).required('password is required'),\n                companyName: Yup.string().max(255).required('company name is required'),\n                policy: Yup.boolean().oneOf([true], 'This field must be checked')\n              })\n            }\n          >\n            {props => {\n              const {\n              values,\n              touched,\n              errors,\n              isSubmitting,\n              handleChange,\n              handleBlur,\n              handleSubmit\n            } = props;\n            return (\n              <form onSubmit={handleSubmit}>\n                <Box mb={3}>\n                  <Typography\n                    color=\"textPrimary\"\n                    variant=\"h2\"\n                  >\n                    Create new account\n                  </Typography>\n                  <Typography\n                    color=\"textSecondary\"\n                    gutterBottom\n                    variant=\"body2\"\n                  >\n                    Use your email to create new account\n                  </Typography>\n                </Box>\n                <TextField\n                  error={Boolean(touched.firstName && errors.firstName)}\n                  fullWidth\n                  helperText={touched.firstName && errors.firstName}\n                  label=\"First name\"\n                  margin=\"normal\"\n                  name=\"firstName\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.firstName}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.lastName && errors.lastName)}\n                  fullWidth\n                  helperText={touched.lastName && errors.lastName}\n                  label=\"Last name\"\n                  margin=\"normal\"\n                  name=\"lastName\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.lastName}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.email && errors.email)}\n                  fullWidth\n                  helperText={touched.email && errors.email}\n                  label=\"Email Address\"\n                  margin=\"normal\"\n                  name=\"email\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  type=\"email\"\n                  value={values.email}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.password && errors.password)}\n                  fullWidth\n                  helperText={touched.password && errors.password}\n                  label=\"Password\"\n                  margin=\"normal\"\n                  name=\"password\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  type=\"password\"\n                  value={values.password}\n                  variant=\"outlined\"\n                />\n                <TextField\n                  error={Boolean(touched.companyName && errors.companyName)}\n                  fullWidth\n                  helperText={touched.companyName && errors.companyName}\n                  label=\"Company Name\"\n                  margin=\"normal\"\n                  name=\"companyName\"\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  value={values.companyName}\n                  variant=\"outlined\"\n                />\n                <Box\n                  alignItems=\"center\"\n                  display=\"flex\"\n                  ml={-1}\n                >\n                  <Checkbox\n                    checked={values.policy}\n                    name=\"policy\"\n                    onChange={handleChange}\n                  />\n                  <Typography\n                    color=\"textSecondary\"\n                    variant=\"body1\"\n                  >\n                    I have read the\n                    {' '}\n                    <Link\n                      color=\"primary\"\n                      component={RouterLink}\n                      to=\"#\"\n                      underline=\"always\"\n                      variant=\"h6\"\n                    >\n                      Terms and Conditions\n                    </Link>\n                  </Typography>\n                </Box>\n                {Boolean(touched.policy && errors.policy) && (\n                  <FormHelperText error>\n                    {errors.policy}\n                  </FormHelperText>\n                )}\n                <Box my={2}>\n                  <Button\n                    className={linearGradient().root}\n                    disabled={isSubmitting}\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\"\n                  >\n                    Sign up now\n                  </Button>\n                </Box>\n                <Typography\n                  color=\"textSecondary\"\n                  variant=\"body1\"\n                >\n                  Have an account?\n                  {' '}\n                  <Link\n                    component={RouterLink}\n                    to=\"/login\"\n                    variant=\"h6\"\n                  >\n                    Sign in\n                  </Link>\n                </Typography>\n              </form>\n            )}}\n          </Formik>\n        </Container>\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"Error\">\n            {errorMessage}  \n        </Alert>\n      </Snackbar>\n      </Box>\n      </Grid>\n      \n      </Grid>\n    \n    </Page>\n  );\n};\n\nexport default RegisterView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\errors\\NotFoundView.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\auth\\LoginView.js",["394","395"],"import React, {useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  TextField,\n  Typography,\n  Snackbar,\n  makeStyles\n} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Page from 'src/components/Page';\nimport linearGradient from 'src/components/linearGradient';\nimport { Alert } from '@material-ui/lab';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst LoginView = props => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [open, setOpen] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n\n  //Alert Function \n  function Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n//Close func for closing the alert\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  // The function that handles the logic when submitting the form\n  const handleSubmit = async values => {\n    // This function received the values from the form\n    // The line below extract the two fields from the values object.\n    const { email, password } = values;\n    var body = {\n      password: password,\n      email: email\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/auth/login\";\n   \n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n\n      if (text.status == \"success\") {\n        console.log(\"success\")\n        navigate('/app/dashboard', { replace: true });\n        \n      } else {\n        console.log(text.message);\n        setErrorMessage(text.message)\n        setOpen(true);    \n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Returning the part that should be rendered\n  // Just set handleSubmit as the handler for the onSubmit call.\n  return (\n    <Page\n      className={classes.root}\n      title=\"Login\"\n    >\n      \n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        height=\"100%\"\n        justifyContent=\"center\"\n      >\n        <Container maxWidth=\"sm\">\n    <Formik\n      initialValues={{\n        email: '',\n        password: ''\n      }}\n      onSubmit={handleSubmit}\n\n      //********Using Yup for validation********/\n\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n        password: Yup.string().max(255).required('Password is required')\n      })}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        } = props;\n        return (\n          <>\n            <form onSubmit={handleSubmit} noValidate>\n                <Box mb={3}>\n                  <Typography\n                    color=\"textPrimary\"\n                    variant=\"h2\"\n                  >\n                    Sign in\n                  </Typography>\n                  \n                </Box>\n              <TextField\n                error={Boolean(touched.email && errors.email)}\n                fullWidth\n                helperText={touched.email && errors.email}\n                label=\"Email Address\"\n                margin=\"normal\"\n                name=\"email\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                type=\"email\"\n                value={values.email}\n                variant=\"outlined\"\n                //className={errors.email && touched.email && \"error\"}\n              />\n              <TextField\n                error={Boolean(touched.password && errors.password)}\n                fullWidth\n                helperText={touched.password && errors.password}\n                label=\"Password\"\n                margin=\"normal\"\n                name=\"password\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                type=\"password\"\n                value={values.password}\n                variant=\"outlined\"\n              />\n              \n              <Box my={2}>\n                <Button \n                className={linearGradient().root}\n                    disabled={isSubmitting}\n                    fullWidth\n                    size=\"large\"\n                    type=\"submit\"\n                    variant=\"contained\" >\n                      Sign in now\n                </Button>\n              </Box>\n              <Typography\n                  color=\"textSecondary\"\n                  variant=\"body1\"\n                >\n                  Don&apos;t have an account?\n                  {' '}\n                  <Link\n                    component={RouterLink}\n                    to=\"/register\"\n                    variant=\"h6\"\n                  >\n                    Sign up\n                  </Link>\n                </Typography>\n            </form>\n          </>\n        );\n      }}\n    </Formik>\n  </Container>  \n</Box>\n<Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"Error\">\n            {errorMessage}  \n        </Alert>\n      </Snackbar>\n</Page>\n  );\n};\n\nexport default LoginView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\shadows.js",["396"],"export default [\n  'none',\n  '0 0 0 1px rgba(63,63,68,0.05), 0 1px 2px 0 rgba(63,63,68,0.15)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 5px 8px -2px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)'\n];\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\theme\\typography.js",["397"],"export default {\n  h1: {\n    fontWeight: 500,\n    fontSize: 35,\n    letterSpacing: '-0.24px'\n  },\n  h2: {\n    fontWeight: 500,\n    fontSize: 29,\n    letterSpacing: '-0.24px'\n  },\n  h3: {\n    fontWeight: 500,\n    fontSize: 24,\n    letterSpacing: '-0.06px'\n  },\n  h4: {\n    fontWeight: 500,\n    fontSize: 20,\n    letterSpacing: '-0.06px'\n  },\n  h5: {\n    fontWeight: 500,\n    fontSize: 16,\n    letterSpacing: '-0.05px'\n  },\n  h6: {\n    fontWeight: 500,\n    fontSize: 14,\n    letterSpacing: '-0.05px'\n  },\n  overline: {\n    fontWeight: 500\n  }\n};\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\Room\\index.js",["398","399","400"],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js",["401","402","403"],"import React, { useEffect, useState, useRef } from 'react';\nimport { v1 as uuid } from \"uuid\";\nimport { useNavigate } from 'react-router-dom';\n\n\n\nconst AttendMeeting = (props) => {\n  let navigate = useNavigate()\n  function create() {\n      const id = uuid();\n      navigate(`/app/room/${id}`, {id: id});\n  }\n\n  return (\n      <button onClick={create}>Create room</button>\n  );\n};\n\nexport default AttendMeeting;","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\index.js",["404","405","406"],"import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Card,\n  CardContent,\n  TextField,\n  InputAdornment,\n  SvgIcon,\n  Grid,\n  FormControlLabel,\n  Switch,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport Results from './Results';\nimport Toolbar from './Toolbar';\nimport data from './data';\nimport CalendarView from './calendarView';\nimport { Search as SearchIcon } from 'react-feather';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst MeetingListView = () => {\n  const classes = useStyles();\n  const [meetings] = useState(data);\n  const [meeting,setMeeting]=useState([]);\n    const [state, setState] = React.useState({\n        checkedA: true,\n        checkedB: false,\n      });\n    \n      const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n        console.log(state);\n      };\n      const getMeetings = async values => {\n        const url = \"http://localhost:81/meeting/getMeetings\";\n        try {\n          const result = await fetch(url);\n          const data = await result.json();\n          //console.log(data)\n      \n          if (data.status == \"success\") {\n            // console.log(\"success\");\n            setMeeting(data.data)\n           // console.log(meeting)\n            \n          } else {\n            console.log(\"error\");\n            \n          }\n        } catch (error) {\n          console.error(error);\n        } \n      };\n      getMeetings();\n      var meetingArr=[];\n      meetingArr.push(meeting);\n  return (\n    <Page\n      className={classes.root}\n      title=\"Meetings\"\n    >\n      <Container maxWidth={false}>\n      <div\n      \n    >\n      <Box mt={3}>\n        <Card>\n          <CardContent>\n          <Grid\n          container\n         direction=\"row\"\n        justify=\"space-between\"\n      alignItems=\"center\"\n>\n            <Box maxWidth={500} minWidth={400}>\n\n              <TextField\n                fullWidth\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <SvgIcon\n                        fontSize=\"small\"\n                        color=\"action\"\n                      >\n                        <SearchIcon />\n                      </SvgIcon>\n                    </InputAdornment>\n                  )\n                }}\n                placeholder=\"Search meeting\"\n                variant=\"outlined\"\n              />\n            </Box>\n            \n            {/* switch component for calendar view */}\n            <Box>\n            <FormControlLabel\n            control={\n          <Switch\n            checked={state.checkedB}\n            onChange={handleChange}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label=\"Calendar View\"\n      />\n     {/*  <EventIcon></EventIcon> */}\n      </Box>\n      </Grid>\n          </CardContent>\n        </Card>\n      </Box>\n    </div>\n    <Box mt={3}>\n    {!state.checkedB ? ( \n          <Results meetings={meeting} />\n        ):(<CalendarView meetings={meeting}></CalendarView>)}\n </Box>\n      </Container>\n      \n    </Page>\n  );\n};\n\nexport default MeetingListView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\linearGradient.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Page.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\TopBar.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createMeeting\\createMeetingForm.js",["407","408","409","410","411","412","413","414","415","416","417","418"],"import React,{useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns'; //instal this version npm i @date-io/date-fns@1.3.13\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { Formik } from 'formik';\nimport Async from \"react-async\"\nimport {\n  Box,\n  Button,\n  Container,\n  Select,\n  InputLabel ,\n  MenuItem,\n  TextField,\n  Divider,\n  makeStyles,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControl,\n  Snackbar\n\n} from '@material-ui/core';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  },\n  formControl: {\n    minWidth: 150,\n    maxWidth: 300,\n  },\n  \n}));\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    width: 600\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst topicColumns = [\n  \n  { field: 'title', headerName: 'Topic Title', width: 180},\n  { field: 'totalTime', headerName: 'Duration', width: 180 }\n  \n];\nconst columns = [\n  { field: 'firstName', headerName: 'First name', width: 120},\n  { field: 'lastName', headerName: 'Last name', width: 120 },\n  { field: 'email', headerName: 'Email', width: 220 }\n];\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\n \nconst CreateMeetingForm = props => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [openTopic, setOpenTopic] = React.useState(false);\n  const [selectParticipats, setSelectionParticipants] = React.useState([]);\n  let dt = new Date();\n  const minDate = dt.setDate(dt.getDate() );\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\n  const [openAlert, setOpenAlert] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n  var [successMessage,setSuccessMessage]=useState(\"\");\n  const[user,setUser]=useState([]);\n  const[member,setMember]=useState([]);\n  const[topic,setTopic]=useState([]);\n  const[selectedTopic,setSelectedTopic]=useState([]);\n  const[topicsArr,setTopicsArr]=useState([]);\n  const[participantsArr,setParticipantsArr]=useState([]);\n  const[selectionModelTopic,setSelectionModelTopic]=useState([]);\n  const[selectionModelParticipant,setSelectionModelParticipant]=useState([]);\n\n  const loadUser = async values => {\n    const url = \"http://localhost:81/meeting/getEmails\";\n    try {\n      const result = await fetch(url);\n      const data = await result.json();\n      console.log(data)\n\n      if (data.status == \"success\") {\n        console.log(\"success\");\n        setUser(data.data)\n        console.log(user)\n        \n      } else {\n        console.log(\"error\");\n        \n      }\n    } catch (error) {\n      console.error(error);\n    } \n  };\n  const loadTopic = async values => {\n    const url = \"http://localhost:81/topic/getTopic\";\n    try {\n      const result = await fetch(url);\n      const data = await result.json();\n      //console.log(data)\n\n      if (data.status == \"success\") {\n        console.log(\"success\");\n        setTopic(data.data)\n        //console.log(topic)\n        \n      } else {\n        console.log(\"error\");\n        \n      }\n    } catch (error) {\n      console.error(error);\n    } \n  };\n\n      //function for displaying alert\n      function Alert(props) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n      }\n//Open Participants Dialog\n  const handleClickOpen = () => {\n    loadUser();\n    setOpen(true);\n    \n  };\n  \n  const handleClickOpenTopic =()=>{\n    loadTopic();\n    console.log(topic);\n    setOpenTopic(true);\n  }\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleCloseTopic = () => {\n    setOpenTopic(false);\n    console.log(topicsArr);\n    // console.log(selectionModelTopic);\n  };\n  const handleCloseAlert = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpenAlert(false);\n  };\n /*  const addId=(data)=>{\n    var ln = data.length;\n    console.log(\"add id starts\")\n    for(var i=0; i<ln;i++)\n    {\n      console.log(i);\n      data[i].id=i;\n    }\n    return data;\n  } */\n  const SaveParticipants=()=>\n  {\n    setParticipantsArr(member);\n    setSelectionModelParticipant(member.map((r) => r.id));\n    console.log(participantsArr);\n   console.log(member);\n    handleClose();\n  }\n  const SaveTopics=()=>\n  {\n    setTopicsArr(selectedTopic);\n    setSelectionModelTopic(selectedTopic.map((r) => r.id));\n     console.log(selectionModelTopic)\n     console.log(topicsArr)\n    handleCloseTopic();\n    //console.log(calculateTotalDuration())\n    \n  }\n  const calculateTotalDuration=()=>{\n    var totalDuration=0;\n    topicsArr.map((val) => \n    totalDuration+=parseInt(val.totalTime)\n    );\n    console.log(totalDuration);\n    return totalDuration;\n  }\n  const clearForm=()=>{\n   setTopicsArr([]);\n   setSelectedDate(new Date());\n   setLocation(\"\");\n   setParticipantsArr([]);\n  }\n  //Function that handles the form submission\n  const handleSubmit = async (values,{resetForm}) => {\n    setErrorMessage(\"\");\n    const {title, description, duration} = values;\n    var participantsTmp=[];\n    var topicsTmp=[];\n    participantsArr.map((val)=>\n    participantsTmp.push(val._id)\n    );\n    topicsArr.map((val)=>\n    topicsTmp.push(val._id)\n    );\n    //console.log(topicsTmp);\n    console.log(participantsTmp);\n      if (!topicsTmp.length)\n     {\n       setErrorMessage(\"Please select at least one topic\");\n          setOpenAlert(true); \n     }\n     else if(!participantsTmp.length)\n     {\n          setErrorMessage(\"Please select at least one participant\");\n          setOpenAlert(true); \n     }\n     else if (Object.keys(location).length==0)\n    {\n      setErrorMessage(\"Please select a meeting location\");\n      setOpenAlert(true); \n    } \n    else{\n    \n    var body = {\n      title: title,\n      description: description,\n      topic: topicsTmp,\n      members:participantsTmp,\n      date: selectedDate,\n      //time: selectedDate.toLocaleTimeString(),\n      location: location,\n      duration: duration.toString()\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/meeting/meetingSave\";\n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n      console.log(text)\n\n      if (text.status == \"success\") {\n        //console.log(\"success\")\n        setSuccessMessage(text.message);\n        setOpenAlert(true); \n        resetForm({});\n        clearForm();\n        setSelectionModelParticipant([]);\n        setSelectionModelTopic([]);\n  \n      } else {\n        console.log(text.message);\n         setErrorMessage(text.message);\n        setOpenAlert(true); \n      }\n    } catch (error) {\n      console.error(error);\n    } \n /*  console.log(selectedTime.toLocaleDateString());\n  console.log(selectedTime.toLocaleTimeString()); */\n  }\n  };\n\n  //update the location selection\n  const [location, setLocation] = React.useState('');\n  const updateLocation = (event) => {\n    setLocation(event.target.value);\n  }\n  //update date\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\nreturn (\n    \n<Container maxWidth={false}>\n  <Formik\n  initialValues={{\n    title: '',\n    topics: '',\n    description: '',\n    duration: '',\n    date: '',\n    location: ' '\n  }}\n  onSubmit={handleSubmit}\n\n  // Using Yup for validation\n\n  validationSchema={Yup.object().shape({\n    title: Yup.string().max(100).required('Title is required'),\n    description: Yup.string().max(255),\n    duration: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only').test(\n      \"DOB\",\n      \"Duration must be greater than total topic durations\",\n      value => {\n        return value >= calculateTotalDuration();\n      })\n  })}\n  >\n    {props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleReset,\n        handleSubmit\n      } = props;\n      return (\n        <>\n        \n        <form onSubmit={handleSubmit} noValidate>\n          <Card>\n            <CardContent>\n              <CardHeader title=\"Create A Meeting\">\n              </CardHeader>\n          {/* </Card> */}\n\n          <Divider/>\n\n          {/* Meeting Title */}\n          <TextField\n                error={Boolean(touched.title && errors.title)}\n                fullWidth\n                helperText={touched.title && errors.title}\n                label=\"Title\"\n                margin=\"normal\"\n                name=\"title\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.title}\n                variant=\"outlined\"\n                \n              />\n        {/* Meeting Topic */}  \n      {/* Invite Topics Button */}\n       <Button \n          color=\"primary\"\n          variant=\"contained\"\n          justifyContent=\"flex-start\"\n          onClick={handleClickOpenTopic}>\n            Select topic\n          </Button> \n      <Dialog onClose={handleCloseTopic} aria-labelledby=\"customized-dialog-title\" open={openTopic}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseTopic}>\n          Select Topics\n        </DialogTitle>\n        <DialogContent dividers> \n             <div style={{ height: 400, width: '100%' }}> \n             {/* {console.log(topicsArr)} */}\n                <DataGrid \n                  \n                  rows={topic}\n                  columns={topicColumns}\n                  pageSize={5} \n                  checkboxSelection\n                  selectionModel={selectionModelTopic} \n                  onSelectionModelChange={(e) => {\n                     \n                     const selectedIDs = new Set(e.selectionModel);\n                     console.log(selectedTopic)\n                     setSelectedTopic(topic.filter((r) =>\n                       selectedIDs.has(r.id))\n                       \n                     )} }\n                  \n                />   \n                      \n                    \n  \n            </div>\n            \n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={SaveTopics} color=\"primary\">\n            Save Topics\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n    {/* </div>  */}\n\n\n        {/* Meeting Description */}\n        <TextField\n          error={Boolean(touched.description && errors.description)}\n          fullWidth\n          helperText={touched.description && errors.description}\n          label=\"Description\"\n          margin=\"normal\"\n          name=\"description\"\n          onBlur={handleBlur}\n          onChange={handleChange}\n          value={values.description}\n          variant=\"outlined\"\n          multiline\n          rows={3}\n        />\n\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"dd/MM/yyyy\"\n          margin=\"normal\"\n          minDate={minDate}\n          id=\"date-picker-inline\"\n          label=\"Meeting Date\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        <br></br>\n        <KeyboardTimePicker\n          margin=\"normal\"\n          id=\"time-picker\"\n          label=\"Meeting Time\"\n          minDate={minDate}\n          value={selectedDate}\n          keyboardIcon={<ScheduleIcon />}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change time',\n          }}\n        />\n        </MuiPickersUtilsProvider>\n        \n        {/* Meeting Duration */}\n        <TextField\n          error={Boolean(touched.duration && errors.duration)}\n          fullWidth\n          helperText={touched.duration && errors.duration}\n          label=\"Duration in minutes\"\n          margin=\"normal\"\n          name=\"duration\"\n          onBlur={handleBlur}\n          onChange={handleChange}\n          value={values.duration}\n          variant=\"outlined\"\n        />\n\n        {/* Meeting Location */}\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"location-input-label\">Location</InputLabel>\n        <Select\n          labelId=\"topic-input-label\"\n          id=\"location-input\"\n          value={location}\n          onChange={updateLocation}\n          label=\"Topics\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          >\n            <MenuItem value=\"\"> <em>None</em></MenuItem>\n            <MenuItem value={\"Meeting Room 1\"}>Meeting Room 1</MenuItem>\n            <MenuItem value={\"Meeting Room 2\"}>Meeting Room 2</MenuItem>\n            <MenuItem value={\"Meeting Room 4\"}>Meeting Room 3</MenuItem>\n            <MenuItem value={\"Meeting Room 4\"}>Meeting Room 4</MenuItem>\n        </Select>\n        <br></br>\n        {/* Invite Participants Button */}\n        <Button \n          color=\"primary\"\n          variant=\"contained\"\n          justifyContent=\"flex-start\"\n          onClick={handleClickOpen}>\n            Invite Participants\n          </Button>\n        </FormControl>\n\n        </CardContent>\n           \n        <Box\n          display=\"flex\"\n          flex=\"1\"\n          flexDirection=\"row\"\n          justifyContent=\"space-between\"\n          p={3}\n        >\n          \n     \n    <div>\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Invite Participants\n        </DialogTitle>\n        <DialogContent dividers>\n\n              <div style={{ height: 400, width: '100%' }}>\n            \n                <DataGrid \n                \n                 rows={user}\n                 columns={columns}\n                 pageSize={5} \n                 checkboxSelection \n                 selectionModel={selectionModelParticipant} \n                 onSelectionModelChange={(e) => {\n                    \n                    const selectedIDs = new Set(e.selectionModel);\n                    console.log(member)\n                    setMember(user.filter((r) =>\n                      selectedIDs.has(r.id))\n                      \n                    )} }            \n                      />  \n                      \n       \n  \n            </div>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={SaveParticipants} color=\"primary\">\n            Save Participants\n          </Button>\n\n        </DialogActions>\n      </Dialog>\n\n    </div>\n\n        {/* Cretae Meeting button */}\n          <Button \n          color=\"primary\"\n          variant=\"contained\"\n          justifyContent=\"flex-end\"\n          disabled={isSubmitting}\n            type=\"submit\"\n            variant=\"contained\">\n            Create Meeting\n          </Button>\n          </Box>\n\n        </Card>\n        </form>\n        </>\n      );\n    }}\n  \n  </Formik>\n\n     <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}>\n    {!Object.keys(errorMessage).length == 0 ? \n     \n         (<Alert onClose={handleCloseAlert} severity=\"Error\">\n         {errorMessage}  \n     </Alert>)\n        :(<Alert onClose={handleCloseAlert} severity=\"success\">\n            {successMessage}  \n        </Alert>)}\n        \n        \n      </Snackbar> \n</Container>\n\n  );\n};\n\nexport default CreateMeetingForm;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\settings\\SettingsView\\Notifications.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\MainLayout\\TopBar.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js",["419","420"],"import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport {\n  Card, \n} from '@material-ui/core';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MeetingListView from \".\";\n\nconst localizer = momentLocalizer(moment);\n\nclass CalendarView extends Component {\n  state = {\n    events: [\n      {\n        start: moment().toDate(),\n        end: moment()\n          .add(0, \"days\")\n          .toDate(),\n        title: \"TBKmeet Meeting\"\n      }\n    ]\n  };\n \n\n  render() {\n    const {meetings}= this.props.meetings;\n    console.log(moment()\n    .add(1, \"days\")\n    .toDate())\n /*   for(let i=1;i<this.props.meetings.length-1;i++)\n  {\n    this.state.eventss[i].start=Date.parse(this.props.meetings[i].date);\n    this.state.eventss[i].end=Date.parse(this.props.meetings[i].date);\n    this.state.eventss[i].title=this.props.meetings[i].title;\n  }  */\n  const newEvents = this.props.meetings.map(event => ({\n    start:event.date,\n    end:event.date,\n    title: event.title\n  }));\n    return (\n\n      <Card\n      \n    >\n      <div className=\"App\">\n      \n        <Calendar\n          localizer={localizer}\n          defaultDate={new Date()}\n          defaultView=\"month\"\n          events={newEvents}\n          views={['month']}\n          style={{ height: \"80vh\" , width:\"100%\"}}\n        />\n      </div>\n      </Card>\n    );\n  }\n}\n\nexport default CalendarView;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\data.js",["421"],"import { v4 as uuid } from 'uuid';\n\nexport default [\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-2',\nmeetingTopic:'Budget',\ndate:'22/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Brain Storm Meeting',\nmeetingTopic:'Productivity',\ndate:'02/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Online',\n    building: '',\n    room:''    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Online',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  {\n    id: uuid(),\n    online:false,\n    address: {\n    city:'Ankara',\n    building: 'Bulding A',\n    room:'A-101'    \n     \n    },\nmeetingName:'Budget Meeting-1',\nmeetingTopic:'Budget',\ndate:'12/03/2021',\ntime:'13.30'\n\n  },\n  \n];\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\meeting\\MeetingListView\\Results.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\components\\Logo.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Password.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\ProfileDetails.js",["422"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\n\nconst cities = [\n  {\n    value: 'ankara',\n    label: 'Ankara'\n  },\n  {\n    value: 'izmir',\n    label: 'Izmir'\n  },\n  {\n    value: 'istanbul',\n    label: 'Istanbul'\n  }\n];\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst ProfileDetails = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const [values, setValues] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    city: '',\n    country: ''\n  });\n\n  const handleChange = (event) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return (\n    <form\n      autoComplete=\"off\"\n      noValidate\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <Card>\n        <CardHeader\n          subheader=\"The information can be edited\"\n          title=\"Profile\"\n        />\n        <Divider />\n        <CardContent>\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                helperText=\"Please specify the first name\"\n                label=\"First name\"\n                name=\"firstName\"\n                onChange={handleChange}\n                required\n                value={values.firstName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Last name\"\n                name=\"lastName\"\n                onChange={handleChange}\n                required\n                value={values.lastName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Email Address\"\n                name=\"email\"\n                onChange={handleChange}\n                required\n                value={values.email}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Company\"\n                name=\"company\"\n                onChange={handleChange}\n                required\n                //value={values.email}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              \n            </Grid>\n           \n          \n          </Grid>\n        </CardContent>\n        <Divider />\n        <Box\n          display=\"flex\"\n          justifyContent=\"flex-end\"\n          p={2}\n        >\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Save details\n          </Button>\n        </Box>\n      </Card>\n    </form>\n  );\n};\n\nProfileDetails.propTypes = {\n  className: PropTypes.string\n};\n\nexport default ProfileDetails;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\account\\AccountView\\Profile.js",[],"E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\topicPool\\topicList.js",["423","424"],"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Box,\n  Card,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles\n  \n} from '@material-ui/core';\nimport Async from 'react-async';\nimport { CompareArrowsOutlined } from '@material-ui/icons';\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n\n  /* tableRow: {\n    height: 30\n  }, */\n}));\n\n/* \nconst deneme=(async res=>{\nconst url=\"http://localhost:81/topic/getTopic\";\nresponse = await fetch(url);\nconst data = await response.json();\nconsole.log(data);}) */\n\nconst TopicList = ({ className,  ...rest }) => {\n  const classes = useStyles();\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n    setPage(0);\n  };\n  const [topic, setTopic]=useState([]);    \n  const emptyRows = limit - Math.min(limit, topic.length - page * limit);\n  \n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n  const getTopics = async values => {\n    const url = \"http://localhost:81/topic/getTopic\";\n    try {\n      const result = await fetch(url);\n      const data = await result.json();\n      // console.log(data)\n\n      if (data.status == \"success\") {\n        // console.log(\"success\");\n        setTopic(data.data)\n        // console.log(topic)\n        \n      } else {\n        console.log(\"error\");\n        \n      }\n    } catch (error) {\n      console.error(error);\n    } \n  };\n\n   \n  \n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n     \n      <PerfectScrollbar>\n        <Box minWidth={1050}>\n        <Async promiseFn={getTopics}>\n          \n          <Table>\n            <TableHead>\n              <TableRow>\n               \n              <TableCell>\n                  Title\n                </TableCell>\n                <TableCell>\n                  Duration\n                </TableCell>\n                <TableCell>\n                  Category\n                </TableCell>\n                <TableCell>\n                  Meeting Output\n                </TableCell>\n                <TableCell>\n                  \n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n               {topic.slice( page* limit, page * limit + limit).map((topic) => (\n                <TableRow\n                  hover\n                 key={topic._id}\n                 className={classes.tableRow}\n                >\n                 \n                  <TableCell>\n                    <Box\n                      alignItems=\"center\"\n                      display=\"flex\"\n                    >\n                      \n                      <Typography\n                        color=\"textPrimary\"\n                        variant=\"body1\"\n                      >\n                        {topic.title}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                     {topic.totalTime } minutes \n                  </TableCell>\n                  <TableCell>\n                  {topic.category}  \n                  </TableCell>\n                  <TableCell>\n                  {topic.information &&(\n                    <p>Information Meeting</p>\n                  )}\n                  {topic.decision &&(\n                    <p>Decision Meeting</p>\n                  )}\n                 \n                  </TableCell>\n                  <TableCell>\n                   \n                  </TableCell>\n                  \n                </TableRow>\n              ))} \n               {emptyRows > 0 && (\n                <TableRow style={{ height:  56 * emptyRows }}>\n                  <TableCell colSpan={5} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n          </Async>\n        </Box>\n      </PerfectScrollbar>\n      <TablePagination\n        component=\"div\"\n        count={topic.length}\n        onChangePage={handlePageChange}\n        onChangeRowsPerPage={handleLimitChange}\n        page={page}\n        rowsPerPage={limit}\n        rowsPerPageOptions={[5, 10, 25]}\n      />\n    </Card>\n  );\n};\n\n\nexport default TopicList;\n","E:\\BILKENT\\senior project\\TBKMeet-Amish-3\\client\\src\\views\\createTopic\\createTopicForm.js",["425","426","427","428","429","430"],"import React,{useState} from 'react';\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nimport { Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  Container,\n  Select,\n  InputLabel ,\n  MenuItem,\n  TextField,\n  Divider,\n  FormLabel ,\n  makeStyles,\n  Card,\n  CardHeader,\n  Checkbox,\n  FormControlLabel ,\n  CardContent,\n  Snackbar,\n  FormControl\n} from '@material-ui/core';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    height: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  },\n  formControl: {\n    minWidth: 150,\n    maxWidth: 300,\n  }\n}));\n\n\nconst CreateTopicForm = props => {\n\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const [open, setOpen] = React.useState(false);\n  var [errorMessage,setErrorMessage]=useState(\"\");\n  var [successMessage,setSuccessMessage]=useState(\"\");\n  const [category, setCategory] = React.useState('');\n  const [state, setState] = React.useState({\n    checkedDecision: false,\n    checkedInfo: false,\n  });\n  const { checkedDecision, checkedInfo } = state;\n  const error = [checkedDecision, checkedInfo].filter((v) => v).length < 1;\n  \n  //Alert Function\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n//Close func for closing the alert\nconst handleClose = (event, reason) => {\n  if (reason === 'clickaway') {\n    return;\n  }\n  setOpen(false);\n};\nconst clearForm = () => {\n setCategory(\"\");\n setState(state.checkedDecision=false);\n setState(state.checkedInfo=false);\n};\n  // The function that handles the logic when submitting the form\n  const handleSubmit = async (values,{resetForm}) => {\n    setErrorMessage(\"\");\n    // This function received the values from the form\n    // The line below extract the two fields from the values object.\n       if(Object.keys(category).length == 0)\n     {\n      \n        setErrorMessage(\"Please select a category\");\n          setOpen(true); \n          \n     } \n     else if(error)\n     {\n      setErrorMessage(\"Please select at least one output type\");\n      setOpen(true); \n     }\n     else\n    {\n      \n    const { title, description,totalTime } = values;\n    var body = {\n        title: title,\n        description: description,\n        totalTime: totalTime,\n        category: category,\n        decision:checkedDecision,\n        information: checkedInfo\n    };\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify(body)\n    };\n    const url = \"http://localhost:81/topic/topicSave\";\n    try {\n      const response = await fetch(url, options);\n      const text = await response.json();\n      console.log(text)\n\n      if (text.status == \"success\") {\n        //console.log(\"success\")\n        setSuccessMessage(text.message);\n        setOpen(true);\n        //Form reset must be done!!!\n        resetForm({});\n        clearForm();\n      } else {\n        console.log(text.message);\n        setErrorMessage(text.message);\n        setOpen(true);\n      }\n    } catch (error) {\n      console.error(error);\n    } \n   }\n  }; \n\n  //For updating the selector -duration time-\n  \n  const updateCategory = (event) => {\n    setCategory(event.target.value);\n    console.log(category);\n  };\n  \n\n  const handleCB = (event,value) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    \n  };\n  \n  // Returning the part that should be rendered\n  // Just set handleSubmit as the handler for the onSubmit call.\n  return (\n    \n   <Container maxWidth={false}>\n    <Formik\n      initialValues={{\n        title: '',\n        description: '',\n        category:\"\",\n        totalTime:''\n      }}\n      onSubmit={handleSubmit}\n\n      //********Using Yup for validation********/\n\n      validationSchema={Yup.object().shape({\n        title: Yup.string().max(100).required('Title is required'),\n        description: Yup.string().max(255).required('Description is required'),\n       \n        totalTime: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only')\n        \n      })}\n      \n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        } = props;\n        return (\n          <>\n          \n            <form onSubmit={handleSubmit} noValidate>\n            <Card>\n            <CardContent>\n            <CardHeader\n          subheader=\"Please enter the necessary information for creating a topic\"\n          title=\"Create Topic\"\n        />\n        <Divider />\n                \n              <TextField\n                error={Boolean(touched.title && errors.title)}\n                fullWidth\n                helperText={touched.title && errors.title}\n                label=\"Title\"\n                margin=\"normal\"\n                name=\"title\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.title}\n                variant=\"outlined\"\n                \n              />\n              <TextField\n                error={Boolean(touched.description && errors.description)}\n                fullWidth\n                helperText={touched.description && errors.description}\n                label=\"Description\"\n                margin=\"normal\"\n                name=\"description\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.description}\n                variant=\"outlined\"\n                multiline\n                rows={5}\n              />\n              <TextField\n                error={Boolean(touched.totalTime && errors.totalTime)}\n                fullWidth\n                helperText={touched.totalTime && errors.totalTime}\n                label=\"Duration in minutes\"\n                margin=\"normal\"\n                name=\"totalTime\"\n                onBlur={handleBlur}\n                onChange={handleChange}\n                value={values.totalTime}\n                variant=\"outlined\"\n              />\n        \n        <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-outlined-label\"\n          id=\"demo-simple-select-outlined\"\n          value={category}\n          onChange={updateCategory}\n          label=\"Category\"\n          \n        > \n          <MenuItem value={\"\"}></MenuItem>  \n          <MenuItem value={\"Budget Meeting\"}>Budget Meeting</MenuItem>\n          <MenuItem value={\"HR Meeting\"}>HR Meeting</MenuItem>\n          <MenuItem value={\"Project Meeting\"}>Project Meeting</MenuItem>\n        </Select>\n      </FormControl>\n          <br/><br/>\n        <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\n          <FormLabel component=\"legend\">Select at least one meeting output</FormLabel>\n        <FormControlLabel\n          control={<Checkbox checked={state.checkedDecision} onChange={handleCB} name=\"checkedDecision\" value={checkedDecision}/>}\n          label=\"Decision\"\n        /> \n       <FormControlLabel\n          control={<Checkbox checked={state.checkedInfo} onChange={handleCB} name=\"checkedInfo\" value={checkedInfo} />}\n          label=\"Information \"\n        />\n        </FormControl>\n\n          </CardContent>\n          <Divider />\n          <Box\n            display=\"flex\"\n            justifyContent=\"flex-end\"\n            p={3}\n          >\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={isSubmitting}\n            type=\"submit\"\n            variant=\"contained\"\n          >\n           Create Topic\n          </Button>\n\n        </Box>\n        </Card>\n        </form>\n          </>\n        );\n      }}\n    </Formik>\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n    {!Object.keys(errorMessage).length == 0 ? \n     \n         (<Alert onClose={handleClose} severity=\"Error\">\n         {errorMessage}  \n     </Alert>)\n        :(<Alert onClose={handleClose} severity=\"success\">\n            {successMessage}  \n        </Alert>)}\n        \n        \n      </Snackbar>\n  </Container>\n  );\n};\n\nexport default CreateTopicForm;\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\index.js",[],["431","432"],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\App.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\reportWebVitals.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\routes.js",["433"],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\GlobalStyles.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\theme\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\auth\\LoginView.js",["434","435","436","437","438","439","440","441","442"],"import React, {useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  Snackbar,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Page from 'src/components/Page';\r\nimport linearGradient from 'src/components/linearGradient';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { login, userSlice } from 'src/features/userSlice';\r\nimport { useDispatch } from 'react-redux';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst LoginView = props => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n\r\n  //Alert Function \r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n//Close func for closing the alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async values => {\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n    const { email, password } = values;\r\n    var body = {\r\n      password: password,\r\n      email: email\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      xhrFields: {\r\n        withCredentials: true\r\n    },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/auth/login\";\r\n   \r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n\r\n      if (text.status == \"success\") {\r\n        console.log(\"success\")\r\n        dispatch(login({\r\n          text,\r\n          loggedIn:true\r\n        }))\r\n        navigate('/app/dashboard', { replace: true });\r\n        \r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message)\r\n        setOpen(true);    \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // Returning the part that should be rendered\r\n  // Just set handleSubmit as the handler for the onSubmit call.\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Login\"\r\n    >\r\n      \r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"sm\">\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        password: ''\r\n      }}\r\n      onSubmit={handleSubmit}\r\n\r\n      //********Using Yup for validation********/\r\n\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n        password: Yup.string().max(255).required('Password is required')\r\n      })}\r\n    >\r\n      {props => {\r\n        const {\r\n          email,\r\n          password,\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit\r\n        } = props;\r\n        return (\r\n          <>\r\n            <form onSubmit={handleSubmit} noValidate>\r\n                <Box mb={3}>\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"h2\"\r\n                  >\r\n                    Sign in\r\n                  </Typography>\r\n                  \r\n                </Box>\r\n              <TextField\r\n                error={Boolean(touched.email && errors.email)}\r\n                fullWidth\r\n                helperText={touched.email && errors.email}\r\n                label=\"Email Address\"\r\n                margin=\"normal\"\r\n                name=\"email\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                type=\"email\"\r\n                value={values.email}\r\n                variant=\"outlined\"\r\n                //className={errors.email && touched.email && \"error\"}\r\n              />\r\n              <TextField\r\n                error={Boolean(touched.password && errors.password)}\r\n                fullWidth\r\n                helperText={touched.password && errors.password}\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                name=\"password\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                type=\"password\"\r\n                value={values.password}\r\n                variant=\"outlined\"\r\n              />\r\n              \r\n              <Box my={2}>\r\n                <Button \r\n                className={linearGradient().root}\r\n                    disabled={isSubmitting}\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\" >\r\n                      Sign in now\r\n                </Button>\r\n              </Box>\r\n              <Typography\r\n                  color=\"textSecondary\"\r\n                  variant=\"body1\"\r\n                >\r\n                  Don&apos;t have an account?\r\n                  {' '}\r\n                  <Link\r\n                    component={RouterLink}\r\n                    to=\"/register\"\r\n                    variant=\"h6\"\r\n                  >\r\n                    Sign up\r\n                  </Link>\r\n                </Typography>\r\n            </form>\r\n          </>\r\n        );\r\n      }}\r\n    </Formik>\r\n  </Container>  \r\n</Box>\r\n<Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"Error\">\r\n            {errorMessage}  \r\n        </Alert>\r\n      </Snackbar>\r\n</Page>\r\n  );\r\n};\r\n\r\nexport default LoginView;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\auth\\RegisterView.js",["443","444","445"],"import React, {useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  Container,\r\n  FormHelperText,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n  Grid,\r\n  Snackbar,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport linearGradient from 'src/components/linearGradient';\r\nimport Image from 'src/imgs/meeting_register_img_2.jpg'; // Import using relative path\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst styles = {\r\n    root: {\r\n       \r\n    }\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3),\r\n    height: '100vh'\r\n  },\r\n  image:{\r\n    backgroundImage: `url(${Image})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundPosition: \"center\",\r\n    backgroundSize: \"cover\",\r\n    height: '100vh',\r\n    marginTop: '-24px',\r\n  }\r\n}));\r\n\r\nconst RegisterView = props => {\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n\r\n  //Alert Function \r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n//Close func for closing the alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async values => {\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n    const { email, password, firstName, lastName, companyName } = values;\r\n    var body = {\r\n      password: password,\r\n      email: email,\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      companyName: companyName\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/auth/signup\";\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        console.log(\"success\")\r\n        navigate('/login', { replace: true });\r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message)\r\n        setOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Register\"\r\n    >\r\n       \r\n        <Grid\r\n          container\r\n          spacing={0}\r\n        >\r\n            <CssBaseline />\r\n            <Grid\r\n            className={classes.image}\r\n          \r\n            lg={6}\r\n            md={2}\r\n            xl={6}\r\n            xs={0}\r\n          >\r\n            \r\n          </Grid>\r\n          <Grid\r\n         elevation={6} square\r\n            lg={6}\r\n            md={10}\r\n            xl={6}\r\n            xs={12}\r\n          >\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        height=\"100%\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Container maxWidth=\"sm\">\r\n          <Formik\r\n            initialValues={{\r\n              email: '',\r\n              firstName: '',\r\n              lastName: '',\r\n              password: '',\r\n              companyName: '',\r\n              policy: false\r\n            }}\r\n            onSubmit={handleSubmit}\r\n\r\n            validationSchema={\r\n              Yup.object().shape({\r\n                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                firstName: Yup.string().max(255).required('First name is required'),\r\n                lastName: Yup.string().max(255).required('Last name is required'),\r\n                password: Yup.string().max(255).required('password is required'),\r\n                companyName: Yup.string().max(255).required('company name is required'),\r\n                policy: Yup.boolean().oneOf([true], 'This field must be checked')\r\n              })\r\n            }\r\n          >\r\n            {props => {\r\n              const {\r\n              values,\r\n              touched,\r\n              errors,\r\n              isSubmitting,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit\r\n            } = props;\r\n            return (\r\n              <form onSubmit={handleSubmit}>\r\n                <Box mb={3}>\r\n                  <Typography\r\n                    color=\"textPrimary\"\r\n                    variant=\"h2\"\r\n                  >\r\n                    Create new account\r\n                  </Typography>\r\n                  <Typography\r\n                    color=\"textSecondary\"\r\n                    gutterBottom\r\n                    variant=\"body2\"\r\n                  >\r\n                    Use your email to create new account\r\n                  </Typography>\r\n                </Box>\r\n                <TextField\r\n                  error={Boolean(touched.firstName && errors.firstName)}\r\n                  fullWidth\r\n                  helperText={touched.firstName && errors.firstName}\r\n                  label=\"First name\"\r\n                  margin=\"normal\"\r\n                  name=\"firstName\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.firstName}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.lastName && errors.lastName)}\r\n                  fullWidth\r\n                  helperText={touched.lastName && errors.lastName}\r\n                  label=\"Last name\"\r\n                  margin=\"normal\"\r\n                  name=\"lastName\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.lastName}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.email && errors.email)}\r\n                  fullWidth\r\n                  helperText={touched.email && errors.email}\r\n                  label=\"Email Address\"\r\n                  margin=\"normal\"\r\n                  name=\"email\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.password && errors.password)}\r\n                  fullWidth\r\n                  helperText={touched.password && errors.password}\r\n                  label=\"Password\"\r\n                  margin=\"normal\"\r\n                  name=\"password\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  variant=\"outlined\"\r\n                />\r\n                <TextField\r\n                  error={Boolean(touched.companyName && errors.companyName)}\r\n                  fullWidth\r\n                  helperText={touched.companyName && errors.companyName}\r\n                  label=\"Company Name\"\r\n                  margin=\"normal\"\r\n                  name=\"companyName\"\r\n                  onBlur={handleBlur}\r\n                  onChange={handleChange}\r\n                  value={values.companyName}\r\n                  variant=\"outlined\"\r\n                />\r\n                <Box\r\n                  alignItems=\"center\"\r\n                  display=\"flex\"\r\n                  ml={-1}\r\n                >\r\n                  <Checkbox\r\n                    checked={values.policy}\r\n                    name=\"policy\"\r\n                    onChange={handleChange}\r\n                  />\r\n                  <Typography\r\n                    color=\"textSecondary\"\r\n                    variant=\"body1\"\r\n                  >\r\n                    I have read the\r\n                    {' '}\r\n                    <Link\r\n                      color=\"primary\"\r\n                      component={RouterLink}\r\n                      to=\"#\"\r\n                      underline=\"always\"\r\n                      variant=\"h6\"\r\n                    >\r\n                      Terms and Conditions\r\n                    </Link>\r\n                  </Typography>\r\n                </Box>\r\n                {Boolean(touched.policy && errors.policy) && (\r\n                  <FormHelperText error>\r\n                    {errors.policy}\r\n                  </FormHelperText>\r\n                )}\r\n                <Box my={2}>\r\n                  <Button\r\n                    className={linearGradient().root}\r\n                    disabled={isSubmitting}\r\n                    fullWidth\r\n                    size=\"large\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                  >\r\n                    Sign up now\r\n                  </Button>\r\n                </Box>\r\n                <Typography\r\n                  color=\"textSecondary\"\r\n                  variant=\"body1\"\r\n                >\r\n                  Have an account?\r\n                  {' '}\r\n                  <Link\r\n                    component={RouterLink}\r\n                    to=\"/login\"\r\n                    variant=\"h6\"\r\n                  >\r\n                    Sign in\r\n                  </Link>\r\n                </Typography>\r\n              </form>\r\n            )}}\r\n          </Formik>\r\n        </Container>\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"Error\">\r\n            {errorMessage}  \r\n        </Alert>\r\n      </Snackbar>\r\n      </Box>\r\n      </Grid>\r\n      \r\n      </Grid>\r\n    \r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default RegisterView;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\errors\\NotFoundView.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\theme\\shadows.js",["446"],"export default [\r\n  'none',\r\n  '0 0 0 1px rgba(63,63,68,0.05), 0 1px 2px 0 rgba(63,63,68,0.15)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 2px 2px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 3px 4px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 6px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 4px 8px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 5px 8px -2px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 12px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 12px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 6px 16px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 7px 16px -4px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 8px 18px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 9px 18px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 10px 20px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 11px 20px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 12px 22px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 13px 22px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 14px 24px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 16px 28px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 18px 30px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 20px 32px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 22px 34px -8px rgba(0,0,0,0.25)',\r\n  '0 0 1px 0 rgba(0,0,0,0.31), 0 24px 36px -8px rgba(0,0,0,0.25)'\r\n];\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\theme\\typography.js",["447"],"export default {\r\n  h1: {\r\n    fontWeight: 500,\r\n    fontSize: 35,\r\n    letterSpacing: '-0.24px'\r\n  },\r\n  h2: {\r\n    fontWeight: 500,\r\n    fontSize: 29,\r\n    letterSpacing: '-0.24px'\r\n  },\r\n  h3: {\r\n    fontWeight: 500,\r\n    fontSize: 24,\r\n    letterSpacing: '-0.06px'\r\n  },\r\n  h4: {\r\n    fontWeight: 500,\r\n    fontSize: 20,\r\n    letterSpacing: '-0.06px'\r\n  },\r\n  h5: {\r\n    fontWeight: 500,\r\n    fontSize: 16,\r\n    letterSpacing: '-0.05px'\r\n  },\r\n  h6: {\r\n    fontWeight: 500,\r\n    fontSize: 14,\r\n    letterSpacing: '-0.05px'\r\n  },\r\n  overline: {\r\n    fontWeight: 500\r\n  }\r\n};\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\topicPool\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createTopic\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createMeeting\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\MainLayout\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\index.js",["448","449"],"import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  InputAdornment,\r\n  SvgIcon,\r\n  Grid,\r\n  FormControlLabel,\r\n  Switch,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport Results from './Results';\r\nimport Toolbar from './Toolbar';\r\nimport CalendarView from './calendarView';\r\nimport { Search as SearchIcon } from 'react-feather';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst MeetingListView = () => {\r\n  const classes = useStyles();\r\n  const [meeting,setMeeting]=useState([]);\r\n    const [state, setState] = React.useState({\r\n        checkedA: true,\r\n        checkedB: false,\r\n      });\r\n    \r\n      const handleChange = (event) => {\r\n        setState({ ...state, [event.target.name]: event.target.checked });\r\n        console.log(state);\r\n      };\r\n      const getMeetings = async values => {\r\n        const url = \"http://localhost:81/meeting/getMeetings\";\r\n        try {\r\n          const result = await fetch(url);\r\n          const data = await result.json();\r\n          //console.log(data)\r\n      \r\n          if (data.status == \"success\") {\r\n            // console.log(\"success\");\r\n            setMeeting(data.data)\r\n           // console.log(meeting)\r\n            \r\n          } else {\r\n            console.log(\"error\");\r\n            \r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        } \r\n      };\r\n      getMeetings();\r\n      var meetingArr=[];\r\n      meetingArr.push(meeting);\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Meetings\"\r\n    >\r\n      <Container maxWidth={false}>\r\n      <div\r\n      \r\n    >\r\n      <Box mt={3}>\r\n        <Card>\r\n          <CardContent>\r\n          <Grid\r\n          container\r\n         direction=\"row\"\r\n        justify=\"space-between\"\r\n      alignItems=\"center\"\r\n>\r\n            <Box maxWidth={500} minWidth={400}>\r\n\r\n              <TextField\r\n                fullWidth\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SvgIcon\r\n                        fontSize=\"small\"\r\n                        color=\"action\"\r\n                      >\r\n                        <SearchIcon />\r\n                      </SvgIcon>\r\n                    </InputAdornment>\r\n                  )\r\n                }}\r\n                placeholder=\"Search meeting\"\r\n                variant=\"outlined\"\r\n              />\r\n            </Box>\r\n            \r\n            {/* switch component for calendar view */}\r\n            <Box>\r\n            <FormControlLabel\r\n            control={\r\n          <Switch\r\n            checked={state.checkedB}\r\n            onChange={handleChange}\r\n            name=\"checkedB\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n        label=\"Calendar View\"\r\n      />\r\n     {/*  <EventIcon></EventIcon> */}\r\n      </Box>\r\n      </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    </div>\r\n    <Box mt={3}>\r\n    {!state.checkedB ? ( \r\n          <Results meetings={meeting} />\r\n        ):(<CalendarView meetings={meeting}></CalendarView>)}\r\n </Box>\r\n      </Container>\r\n      \r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default MeetingListView;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\attendMeeting\\AttendMeetingtView\\index.js",["450","451","452"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport { v1 as uuid } from \"uuid\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n\r\nconst AttendMeeting = (props) => {\r\n  let navigate = useNavigate()\r\n  function create() {\r\n      const id = uuid();\r\n      navigate(`/app/room/${id}`, {id: id});\r\n  }\r\n\r\n  return (\r\n      <button onClick={create}>Create room</button>\r\n  );\r\n};\r\n\r\nexport default AttendMeeting;","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\attendMeeting\\Room\\index.js",["453","454","455"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport styled from \"styled-components\";\r\nimport {useParams} from 'react-router-dom';\r\nimport { id } from \"date-fns/esm/locale\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport VideocamRoundedIcon from '@material-ui/icons/VideocamRounded';\r\nimport VideocamOffRoundedIcon from '@material-ui/icons/VideocamOffRounded';\r\nimport MicRoundedIcon from '@material-ui/icons/MicRounded';\r\nimport MicOffRoundedIcon from '@material-ui/icons/MicOffRounded';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { fade } from '@material-ui/core/styles/colorManipulator';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nconst Container = styled.div`\r\n    padding: 20px;\r\n    display: flex;\r\n    height: 100vh;\r\n    width: 90%;\r\n    margin: auto;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nconst StyledVideo = styled.video`\r\n    height: 40%;\r\n    width: 50%;\r\n`;\r\n\r\nconst Video = (props) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        props.peer.on(\"stream\", stream => {\r\n            ref.current.srcObject = stream;\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <StyledVideo playsInline autoPlay ref={ref} />\r\n    );\r\n}\r\n\r\n\r\nconst videoConstraints = {\r\n    height: window.innerHeight / 2,\r\n    width: window.innerWidth / 2\r\n};\r\nconst useStyles = makeStyles((theme) => ({\r\n   button: { borderRadius: 50},\r\n   exitButton:{backgroundColor:\"#d32f2f\", \r\n   color:\"#ffebee\",\r\n   '&:hover': {\r\n    backgroundColor: '#b71c1c',\r\n    color: '#ffebee',\r\n},\r\n\r\n},\r\n   footerStyle: {\r\n    backgroundColor: fade('#262C29',0.2),\r\n    fontSize: \"20px\",\r\n    color: \"white\",\r\n    borderTop: \"1px solid #E7E7E7\",\r\n    textAlign: \"center\",\r\n    paddingLeft: \"0px\",\r\n    paddingRight: \"30px\",\r\n    paddingTop:\"10px\",\r\n    paddingBottom:\"10px\",\r\n    position: \"fixed\",\r\n    left: \"0\",\r\n    display:\"flex\",\r\n    justifyContent:\"flex-end\",\r\n    bottom: \"0\",\r\n    height: \"10%x\",\r\n    width: \"99%\"  \r\n   },\r\n   phantomStyle: {\r\n    display: \"block\",\r\n    padding: \"20px\",\r\n    height: \"1000px\",\r\n    width: \"100%\"\r\n   }\r\n  }));\r\nconst Room = (props) => {\r\n    const [peers, setPeers] = useState([]);\r\n    const [micStatus,setMicStatus]=useState(true)\r\n    const [camStatus,setCamStatus]=useState(true)\r\n    const [recordStatus,setRecordStatus]=useState(false)\r\n    const socketRef = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef([]);\r\n    const roomID = Room[id];\r\n    const classes = useStyles();\r\n\r\n  /*   function Footer({ children }) {\r\n        return (\r\n          \r\n            <div className={classes.phantomStyle} />\r\n            \r\n          \r\n        );\r\n      } */\r\n\r\n   \r\n    function muteButtonRender() {\r\n\r\n        if(micStatus)\r\n        {\r\n          return (\r\n            \r\n            <Button onClick={muteSelf}  className={classes.button} >\r\n                <MicRoundedIcon  style={{ fontSize: 40 }}/>\r\n            </Button>\r\n            \r\n          )\r\n        }\r\n        else\r\n        {\r\n          return(\r\n          \r\n            <Button onClick={muteSelf}  className={classes.button} > \r\n            <MicOffRoundedIcon style={{ fontSize: 40 }}/>\r\n            </Button>\r\n          \r\n          )\r\n        }\r\n      }\r\n      function camButtonRender() {\r\n        //console.log(id)\r\n        if(camStatus)\r\n        {\r\n          return (\r\n            \r\n            <Button onClick={closeCamera} className={classes.button}>\r\n                <VideocamRoundedIcon\r\n                 style={{ fontSize: 40 }}\r\n                />\r\n\r\n        </Button>\r\n            \r\n          )\r\n        }\r\n        else\r\n        {\r\n          return(\r\n          \r\n            <Button onClick={closeCamera} className={classes.button}>\r\n                <VideocamOffRoundedIcon\r\n                 style={{ fontSize: 40 }}\r\n                />\r\n        </Button>\r\n          \r\n          )\r\n        }\r\n      }\r\n      function recordButtonRender() {\r\n        //console.log(id)\r\n        if(recordStatus)\r\n        {\r\n          return (\r\n            \r\n            <Button onClick={startRecord} className={classes.button} style={{ color:\"#d32f2f\"}}>\r\n                <FiberManualRecordIcon\r\n                 style={{ fontSize: 40 }}\r\n                />\r\n\r\n        </Button>\r\n            \r\n          )\r\n        }\r\n        else\r\n        {\r\n          return(\r\n          \r\n            <Button onClick={startRecord} className={classes.button} style={{ alignItems:\"center\"}}  >\r\n                <FiberManualRecordIcon\r\n                 style={{ fontSize: 40  }}\r\n                />\r\n        </Button>\r\n          \r\n          )\r\n        }\r\n      }\r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"https://tbkmeet-videoserver.herokuapp.com/\");\r\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            socketRef.current.emit(\"join room\", roomID);\r\n            socketRef.current.on(\"all users\", users => {\r\n                const peers = [];\r\n                users.forEach(userID => {\r\n                    const peer = createPeer(userID, socketRef.current.id, stream);\r\n                    peersRef.current.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    })\r\n                    peers.push(peer);\r\n                })\r\n                setPeers(peers);\r\n            })\r\n\r\n            socketRef.current.on(\"user joined\", payload => {\r\n                const peer = addPeer(payload.signal, payload.callerID, stream);\r\n                peersRef.current.push({\r\n                    peerID: payload.callerID,\r\n                    peer,\r\n                })\r\n\r\n                setPeers(users => [...users, peer]);\r\n            });\r\n\r\n            socketRef.current.on(\"receiving returned signal\", payload => {\r\n                const item = peersRef.current.find(p => p.peerID === payload.id);\r\n                item.peer.signal(payload.signal);\r\n            });\r\n\r\n            //stream.getAudioTracks()[0].enabled = false;\r\n        })\r\n\r\n    }, []);\r\n\r\n    \r\n\r\n    function createPeer(userToSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream,\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\r\n        })\r\n\r\n        return peer;\r\n    }\r\n\r\n    function addPeer(incomingSignal, callerID, stream) {\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream,\r\n        })\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\r\n        })\r\n\r\n        peer.signal(incomingSignal);\r\n\r\n        return peer;\r\n    }\r\n    function startRecord(){\r\n        if(recordStatus)\r\n        setRecordStatus(false)\r\n        else\r\n        setRecordStatus(true)\r\n    }\r\n   function muteSelf()\r\n    {\r\n        if(micStatus)\r\n        setMicStatus(false)\r\n        else\r\n        setMicStatus(true)\r\n        userVideo.current.srcObject.getAudioTracks()[0].enabled = !userVideo.current.srcObject.getAudioTracks()[0].enabled;\r\n    }\r\n\r\n    function closeCamera()\r\n    {\r\n        if(camStatus)\r\n        setCamStatus(false)\r\n        else\r\n        setCamStatus(true)\r\n        userVideo.current.srcObject.getVideoTracks()[0].enabled = !userVideo.current.srcObject.getVideoTracks()[0].enabled;\r\n    }\r\n\r\n    return (\r\n        <Container style={{width:\"100%\"}}>\r\n            <StyledVideo muted ref={userVideo} autoPlay playsInline />\r\n            {peers.map((peer, index) => {\r\n                return (\r\n                    <Video key={index} peer={peer} />\r\n                );\r\n            })}\r\n    <div className={classes.footerStyle}>\r\n        {muteButtonRender()}\r\n        {camButtonRender()}\r\n        {recordButtonRender()}\r\n        <Button variant=\"contained\" className={classes.exitButton}> Exit</Button>\r\n    </div>\r\n        </Container>\r\n\r\n        \r\n    );\r\n};\r\n\r\nexport default Room;","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\Page.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\linearGradient.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\TopBar.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\settings\\SettingsView\\Notifications.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\calendarView.js",["456","457","458","459","460"],"import React, { Component, useState } from \"react\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Card, \r\n} from '@material-ui/core';\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport MeetingListView from \".\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { v1 as uuid } from \"uuid\";\r\nimport { useNavigate } from 'react-router-dom';\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 500\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n\r\n\r\nconst CalendarView = ({ className, meetings, ...rest }) => {\r\n  \r\n\r\nconst[events,setEvents]=useState([\r\n      {\r\n        start: moment().toDate(),\r\n        end: moment()\r\n          .add(0, \"days\")\r\n          .toDate(),\r\n        title: \"TBKmeet Meeting\"\r\n      }\r\n    ]);\r\n    const [open, setOpen] =useState(false);\r\n    const [eventState,setEventState]=useState( { start: moment().toDate(), end: moment().add(0, \"days\").toDate(), title: \"\", _id: \"\",\r\n    description:\"\", location: \"\", topic: \"\", members: \"\"})\r\n\r\n\r\n const handleClickOpen=() => {\r\n  setOpen(true);\r\n\r\n};\r\n const handleClose=() => {\r\n  setOpen(false);\r\n};\r\nlet navigate = useNavigate()\r\nfunction create() {\r\n    const id = uuid();\r\n    navigate(`/app/room/${id}`, {id: id});\r\n}\r\n    //const {meetings}= this.props.meetings;\r\n    // console.log(moment()\r\n    // .add(1, \"days\")\r\n    // .toDate())\r\n /*   for(let i=1;i<this.props.meetings.length-1;i++)\r\n  {\r\n    this.state.eventss[i].start=Date.parse(this.props.meetings[i].date);\r\n    this.state.eventss[i].end=Date.parse(this.props.meetings[i].date);\r\n    this.state.eventss[i].title=this.props.meetings[i].title;\r\n  }  */\r\n  const newEvents = meetings.map(event => ({\r\n    start:event.date,\r\n    end:event.date,\r\n    title: event.title,\r\n    id: event._id,\r\n    description: event.description,\r\n    topic: event.topic,\r\n    location: event.location,\r\n    members:event.members,\r\n    duration:event.duration,\r\n    isStarted:event.isStarted\r\n  }));\r\n  function MeetingButtonRender(status, meeting_id) {\r\n    //console.log(id)\r\n    if(status)\r\n    {\r\n      return (\r\n        \r\n                    <Button href=\"\" color=\"primary\" onClick={() => navigate(`/app/room/${meeting_id}`, {id: meeting_id})}>\r\n                      Attend Meeting\r\n                    </Button>\r\n        \r\n      )\r\n    }\r\n    else\r\n    {\r\n      return(\r\n      \r\n                  <Button href=\"\" color=\"primary\" onClick={() => navigate(`/app/room/${meeting_id}`, {id: meeting_id})}>\r\n                  Start Meeting </Button>\r\n      \r\n      )\r\n    }\r\n  }\r\n  console.log(eventState);\r\n    return (\r\n\r\n      <Card>\r\n      <div className=\"App\">\r\n      \r\n        <Calendar\r\n          localizer={localizer}\r\n          defaultDate={new Date()}\r\n          defaultView=\"month\"\r\n          events={newEvents}\r\n          views={['month']}\r\n          // onSelectEvent={()=>{\r\n          //   console.log(newEvents);\r\n          // }}\r\n          onSelectEvent={event => {\r\n            handleClickOpen()\r\n            setEventState( event);\r\n            }}\r\n          style={{ height: \"80vh\" , width:\"100%\"}}\r\n        />\r\n      </div>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n              Meeting Detail\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <p>Title: {eventState.title}</p>\r\n              <p>Description: {eventState.description}</p>\r\n              <p>Duration: {eventState.duration}</p>\r\n              <p>Date: {moment(eventState.start).format('DD MMM YYYY')}</p>\r\n              <p>Time: {moment(eventState.start).format('LT')}</p>\r\n              <p>Location: {eventState.location}</p>\r\n{/*               <p>Topics: {this.state.eventState.topic}</p>\r\n              <p>Participants: {this.state.eventState.members}</p> */}\r\n            </DialogContent>\r\n            <DialogActions>\r\n            {MeetingButtonRender(eventState.isStarted, eventState._id)}\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n      </Card>\r\n    );\r\n  \r\n};\r\n\r\nexport default CalendarView;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Toolbar.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meeting\\MeetingListView\\Results.js",["461","462"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport moment from \"moment\";\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { v1 as uuid } from \"uuid\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 500\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  avatar: {\r\n    marginRight: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Results = ({ className, meetings, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [limit, setLimit] = useState(10);\r\n  const [page, setPage] = useState(0);\r\n  const emptyRows = limit - Math.min(limit, meetings.length - page * limit);\r\n  const handleLimitChange = (event) => {\r\n    setLimit(event.target.value);\r\n  };\r\n  let navigate = useNavigate()\r\n  function create() {\r\n      const id = uuid();\r\n      navigate(`/app/room/${id}`, {id: id});\r\n  }\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const [open, setOpen] = React.useState(false);\r\n  const [meetingState, setMeetingState] = useState({date: moment().toDate(),  title: \"\", _id: \"\",\r\n  description:\"\", location: \"\", topic: \"\", members: \"\"});\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  function MeetingButtonRender(status, meeting_id) {\r\n    //console.log(id)\r\n    if(status)\r\n    {\r\n      return (\r\n        \r\n                    <Button href=\"\" color=\"primary\" onClick={() => navigate(`/app/room/${meeting_id}`, {id: meeting_id})}>\r\n                      Attend Meeting\r\n                    </Button>\r\n        \r\n      )\r\n    }\r\n    else\r\n    {\r\n      return(\r\n      \r\n                  <Button href=\"\" color=\"primary\" onClick={() => navigate(`/app/room/${meeting_id}`, {id: meeting_id})}>\r\n                  Start Meeting </Button>\r\n      \r\n      )\r\n    }\r\n  }\r\n  return (\r\n    <Card\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <PerfectScrollbar>\r\n        <Box minWidth={1050}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n               \r\n              <TableCell>\r\n                  Meeting Name \r\n                </TableCell>\r\n                <TableCell>\r\n                  Description\r\n                </TableCell>\r\n                <TableCell>\r\n                  Location\r\n                </TableCell>\r\n                <TableCell>\r\n                  Date\r\n                </TableCell>\r\n                <TableCell>\r\n                  Time\r\n                </TableCell>\r\n                <TableCell></TableCell>\r\n                <TableCell>\r\n                  Attend\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {meetings.slice(page* limit, page * limit + limit).map((meetings) => (\r\n                <TableRow\r\n                  hover\r\n                  key={meetings._id}\r\n                  \r\n                >\r\n                  <TableCell>\r\n                    <Box\r\n                      alignItems=\"center\"\r\n                      display=\"flex\"\r\n                    >\r\n                      \r\n                      <Typography\r\n                        color=\"textPrimary\"\r\n                        variant=\"body1\"\r\n\r\n                      >\r\n                        <a>{meetings.title}</a>\r\n                      </Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {meetings.description}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {meetings.location}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {moment(meetings.date).format('DD MMM YYYY')}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {moment(meetings.date).format('LT')}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                   {/*<Link to=\"ModifyMeeting\" params={{ meetingId: meetings._id }}>*/} \r\n                     <Link to={{pathname: `/app/modifyMeeting/${meetings._id}`}}\r\n                     style={{ textDecoration: 'none',color:\"initial\" }}\r\n                     > \r\n                    <EditIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    />\r\n                    </Link>\r\n                    <DeleteIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    />\r\n                    <InfoIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                     onClick={() => {\r\n                      handleClickOpen();\r\n                      console.log(meetings);\r\n                      setMeetingState(meetings);\r\n                      console.log(meetingState);\r\n                                            }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                  {MeetingButtonRender(meetings.isStarted, meetings._id)}\r\n\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n               {emptyRows > 0 && (\r\n                <TableRow style={{ height:  56 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n\r\n          <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n            <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n              Meeting Detail\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n              <p>Title: { meetingState.title}</p>\r\n              <p>Description: {meetingState.description}</p>\r\n              <p>Duration: { meetingState.duration}</p>\r\n              <p>Date: {moment( meetingState.date).format('DD MMM YYYY')}</p>\r\n              <p>Time: {moment( meetingState.date).format('LT')}</p>\r\n              <p>Location: {meetingState.location}</p>\r\n              {/* <p>Topics: {meetingState.topic}</p>\r\n              <p>Participants: {meetingState.members}</p> */}\r\n              \r\n            </DialogContent>\r\n            <DialogActions>\r\n            {MeetingButtonRender(meetingState.isStarted, meetingState._id)}\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n        </Box>\r\n      </PerfectScrollbar>\r\n      <TablePagination\r\n        component=\"div\"\r\n        count={meetings.length}\r\n        onChangePage={handlePageChange}\r\n        onChangeRowsPerPage={handleLimitChange}\r\n        page={page}\r\n        rowsPerPage={limit}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nResults.propTypes = {\r\n  className: PropTypes.string,\r\n  meetings: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Results;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\dashboard\\DashboardView\\upcomingMeetings.js",["463","464"],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\Password.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\ProfileDetails.js",["465"],"import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst cities = [\r\n  {\r\n    value: 'ankara',\r\n    label: 'Ankara'\r\n  },\r\n  {\r\n    value: 'izmir',\r\n    label: 'Izmir'\r\n  },\r\n  {\r\n    value: 'istanbul',\r\n    label: 'Istanbul'\r\n  }\r\n];\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst ProfileDetails = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const [values, setValues] = useState({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    city: '',\r\n    country: ''\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setValues({\r\n      ...values,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      autoComplete=\"off\"\r\n      noValidate\r\n      className={clsx(classes.root, className)}\r\n      {...rest}\r\n    >\r\n      <Card>\r\n        <CardHeader\r\n          subheader=\"The information can be edited\"\r\n          title=\"Profile\"\r\n        />\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n          >\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                helperText=\"Please specify the first name\"\r\n                label=\"First name\"\r\n                name=\"firstName\"\r\n                onChange={handleChange}\r\n                required\r\n                value={values.firstName}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                label=\"Last name\"\r\n                name=\"lastName\"\r\n                onChange={handleChange}\r\n                required\r\n                value={values.lastName}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                onChange={handleChange}\r\n                required\r\n                value={values.email}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              <TextField\r\n                fullWidth\r\n                label=\"Company\"\r\n                name=\"company\"\r\n                onChange={handleChange}\r\n                required\r\n                //value={values.email}\r\n                variant=\"outlined\"\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={6}\r\n              xs={12}\r\n            >\r\n              \r\n            </Grid>\r\n           \r\n          \r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"flex-end\"\r\n          p={2}\r\n        >\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n          >\r\n            Save details\r\n          </Button>\r\n        </Box>\r\n      </Card>\r\n    </form>\r\n  );\r\n};\r\n\r\nProfileDetails.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default ProfileDetails;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\index.js",["466","467"],"import React, { useEffect } from 'react';\r\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Divider,\r\n  Drawer,\r\n  Hidden,\r\n  List,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport {\r\n  BarChart as BarChartIcon,\r\n  Settings as SettingsIcon,\r\n  User as UserIcon,\r\n  Calendar as CheckMeetingIcon,\r\n  CheckCircle as CheckTopicPoolIcon,\r\n  Eye as CheckHistoryIcon,\r\n  FilePlus as CreateTopicIcon,\r\n  UserCheck as AttendMeetingIcon\r\n} from 'react-feather';\r\nimport NavItem from './NavItem';\r\nimport { connect } from 'react-redux'\r\nimport store from '../../../app/store'\r\n\r\n//const state = getState();\r\n\r\nconst staticInfo = {\r\n  avatar: '/static/images/avatars/default_profile_img',\r\n  //name: 'Syed Amish Alvi'\r\n};\r\n\r\nconst items = [\r\n  {\r\n    href: '/app/dashboard',\r\n    icon: BarChartIcon,\r\n    title: 'Dashboard'\r\n  },\r\n  {\r\n    href: '/app/createMeeting',\r\n    icon: CreateTopicIcon,\r\n    title: 'Create Meeting'\r\n  },\r\n  {\r\n    href: '/app/meetings',\r\n    icon: CheckMeetingIcon,\r\n    title: 'Check Meeting '\r\n  },\r\n  {\r\n    href: '/app/attendMeeting',\r\n    icon: AttendMeetingIcon,\r\n    title: 'Attend Meeting'\r\n  },\r\n  \r\n  {\r\n    href: '/app/createTopic',\r\n    icon: CreateTopicIcon,\r\n    title: 'Create Topic'\r\n  },\r\n  \r\n  {\r\n    href: '/app/topics',\r\n    icon: CheckTopicPoolIcon,\r\n    title: 'Check Topic Pool'\r\n  },\r\n  {\r\n    href: '/app/meetingHistory',\r\n    icon: CheckHistoryIcon,\r\n    title: 'Check Meeting History'\r\n  },\r\n  {\r\n    href: '/app/account',\r\n    icon: UserIcon,\r\n    title: 'Account'\r\n  },\r\n  {\r\n    href: '/app/settings',\r\n    icon: SettingsIcon,\r\n    title: 'Settings'\r\n  },\r\n\r\n];\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  mobileDrawer: {\r\n    width: 256\r\n  },\r\n  desktopDrawer: {\r\n    width: 256,\r\n    top: 64,\r\n    height: 'calc(100% - 64px)'\r\n  },\r\n  avatar: {\r\n    cursor: 'pointer',\r\n    width: 64,\r\n    height: 64\r\n  }\r\n}));\r\n\r\nconst state = store.getState();\r\n\r\n//const name = state.user.user.text.data.firstName + \" \" + state.user.user.text.data.lastName;\r\n\r\nconst NavBar = ({onMobileClose, openMobile}) => {\r\n  const classes = useStyles();\r\n  const location = useLocation();\r\n  //console.log(name)\r\n  \r\n\r\n  useEffect(() => {\r\n    if (openMobile && onMobileClose) {\r\n      onMobileClose();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [location.pathname]);\r\n\r\n  const content = (\r\n    <Box\r\n      height=\"100%\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n    >\r\n      <Box\r\n        alignItems=\"center\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        p={2}\r\n      >\r\n        <Avatar\r\n          className={classes.avatar}s\r\n          component={RouterLink}\r\n          src={staticInfo.avatar}\r\n          to=\"/app/account\"\r\n        />\r\n        <Typography\r\n          className={classes.name}\r\n          color=\"textPrimary\"\r\n          variant=\"h5\"\r\n        >\r\n          Welcome!\r\n        </Typography>\r\n        <Typography\r\n          color=\"textSecondary\"\r\n          variant=\"body2\"\r\n        >\r\n         {/*  {name} */}\r\n        </Typography>\r\n      </Box>\r\n      <Divider />\r\n      <Box p={2}>\r\n        <List>\r\n          {items.map((item) => (\r\n            <NavItem\r\n              href={item.href}\r\n              key={item.title}\r\n              title={item.title}\r\n              icon={item.icon}\r\n            />\r\n          ))}\r\n        </List>\r\n      </Box>\r\n      <Box flexGrow={1} />\r\n      \r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Hidden lgUp>\r\n        <Drawer\r\n          anchor=\"left\"\r\n          classes={{ paper: classes.mobileDrawer }}\r\n          onClose={onMobileClose}\r\n          open={openMobile}\r\n          variant=\"temporary\"\r\n        >\r\n          {content}\r\n        </Drawer>\r\n      </Hidden>\r\n      <Hidden mdDown>\r\n        <Drawer\r\n          anchor=\"left\"\r\n          classes={{ paper: classes.desktopDrawer }}\r\n          open\r\n          variant=\"persistent\"\r\n        >\r\n          {content}\r\n        </Drawer>\r\n      </Hidden>\r\n    </>\r\n  );\r\n};\r\n\r\nNavBar.propTypes = {\r\n  onMobileClose: PropTypes.func,\r\n  openMobile: PropTypes.bool\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  onMobileClose: () => {},\r\n  openMobile: false\r\n};\r\n\r\n/*function mapStateToProps(state) {\r\n  return {\r\n      user: state\r\n      }\r\n  }*/\r\n\r\n\r\nexport default NavBar;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\components\\Logo.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\DashboardLayout\\NavBar\\NavItem.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\account\\AccountView\\Profile.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\layouts\\MainLayout\\TopBar.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createMeeting\\createMeetingForm.js",["468","469","470","471","472","473","474","475","476","477","478","479"],"import React,{useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns'; //instal this version npm i @date-io/date-fns@1.3.13\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { Formik } from 'formik';\r\nimport Async from \"react-async\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  FormControl,\r\n  Snackbar\r\n\r\n} from '@material-ui/core';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  },\r\n  \r\n}));\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 600\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst topicColumns = [\r\n  \r\n  { field: 'title', headerName: 'Topic Title', width: 180},\r\n  { field: 'totalTime', headerName: 'Duration', width: 180 }\r\n  \r\n];\r\nconst columns = [\r\n  { field: 'firstName', headerName: 'First name', width: 120},\r\n  { field: 'lastName', headerName: 'Last name', width: 120 },\r\n  { field: 'email', headerName: 'Email', width: 220 }\r\n];\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n \r\nconst CreateMeetingForm = props => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [openTopic, setOpenTopic] = React.useState(false);\r\n  const [selectParticipats, setSelectionParticipants] = React.useState([]);\r\n  let dt = new Date();\r\n  const minDate = dt.setDate(dt.getDate() );\r\n  const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n  const [openAlert, setOpenAlert] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const[user,setUser]=useState([]);\r\n  const[member,setMember]=useState([]);\r\n  const[topic,setTopic]=useState([]);\r\n  const[selectedTopic,setSelectedTopic]=useState([]);\r\n  const[topicsArr,setTopicsArr]=useState([]);\r\n  const[participantsArr,setParticipantsArr]=useState([]);\r\n  const[selectionModelTopic,setSelectionModelTopic]=useState([]);\r\n  const[selectionModelParticipant,setSelectionModelParticipant]=useState([]);\r\n\r\n  const loadUser = async values => {\r\n    const url = \"http://localhost:81/meeting/getEmails\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n      console.log(data)\r\n\r\n      if (data.status == \"success\") {\r\n        console.log(\"success\");\r\n        setUser(data.data)\r\n        console.log(user)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  };\r\n  const loadTopic = async values => {\r\n    const url = \"http://localhost:81/topic/getTopic\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n      //console.log(data)\r\n\r\n      if (data.status == \"success\") {\r\n        console.log(\"success\");\r\n        setTopic(data.data)\r\n        //console.log(topic)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  };\r\n\r\n      //function for displaying alert\r\n      function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n      }\r\n//Open Participants Dialog\r\n  const handleClickOpen = () => {\r\n    loadUser();\r\n    setOpen(true);\r\n    \r\n  };\r\n  \r\n  const handleClickOpenTopic =()=>{\r\n    loadTopic();\r\n    console.log(topic);\r\n    setOpenTopic(true);\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleCloseTopic = () => {\r\n    setOpenTopic(false);\r\n    console.log(topicsArr);\r\n    // console.log(selectionModelTopic);\r\n  };\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenAlert(false);\r\n  };\r\n /*  const addId=(data)=>{\r\n    var ln = data.length;\r\n    console.log(\"add id starts\")\r\n    for(var i=0; i<ln;i++)\r\n    {\r\n      console.log(i);\r\n      data[i].id=i;\r\n    }\r\n    return data;\r\n  } */\r\n  const SaveParticipants=()=>\r\n  {\r\n    setParticipantsArr(member);\r\n    setSelectionModelParticipant(member.map((r) => r.id));\r\n    console.log(participantsArr);\r\n   console.log(member);\r\n    handleClose();\r\n  }\r\n  const SaveTopics=()=>\r\n  {\r\n    setTopicsArr(selectedTopic);\r\n    setSelectionModelTopic(selectedTopic.map((r) => r.id));\r\n     console.log(selectionModelTopic)\r\n     console.log(topicsArr)\r\n    handleCloseTopic();\r\n    //console.log(calculateTotalDuration())\r\n    \r\n  }\r\n  const calculateTotalDuration=()=>{\r\n    var totalDuration=0;\r\n    topicsArr.map((val) => \r\n    totalDuration+=parseInt(val.totalTime)\r\n    );\r\n    console.log(totalDuration);\r\n    return totalDuration;\r\n  }\r\n  const clearForm=()=>{\r\n   setTopicsArr([]);\r\n   setSelectedDate(new Date());\r\n   setLocation(\"\");\r\n   setParticipantsArr([]);\r\n  }\r\n  //Function that handles the form submission\r\n  const handleSubmit = async (values,{resetForm}) => {\r\n    setErrorMessage(\"\");\r\n    const {title, description, duration} = values;\r\n    var participantsTmp=[];\r\n    var topicsTmp=[];\r\n    participantsArr.map((val)=>\r\n    participantsTmp.push(val._id)\r\n    );\r\n    topicsArr.map((val)=>\r\n    topicsTmp.push(val._id)\r\n    );\r\n    //console.log(topicsTmp);\r\n    console.log(participantsTmp);\r\n     if (!topicsTmp.length)\r\n    {\r\n      setErrorMessage(\"Please select at least one topic\");\r\n         setOpenAlert(true); \r\n    }\r\n    else if(!participantsTmp.length)\r\n    {\r\n         setErrorMessage(\"Please select at least one participant\");\r\n         setOpenAlert(true); \r\n    }\r\n     else if (location.length==0)\r\n    {\r\n      setErrorMessage(\"Please select a meeting location\");\r\n      setOpenAlert(true); \r\n      console.log((location));\r\n    } \r\n    else{\r\n    \r\n    var body = {\r\n      title: title,\r\n      description: description,\r\n      topic: topicsTmp,\r\n      members:participantsTmp,\r\n      date: selectedDate,\r\n      //time: selectedDate.toLocaleTimeString(),\r\n      location: location,\r\n      duration: duration.toString()\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      xhrFields: {\r\n        withCredentials: true\r\n    },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/meeting/meetingSave\";\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        //console.log(\"success\")\r\n        setSuccessMessage(text.message);\r\n        setOpenAlert(true); \r\n        resetForm({});\r\n        clearForm();\r\n        setSelectionModelParticipant([]);\r\n        setSelectionModelTopic([]);\r\n  \r\n      } else {\r\n        console.log(text.message);\r\n         setErrorMessage(text.message);\r\n        setOpenAlert(true); \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n /*  console.log(selectedTime.toLocaleDateString());\r\n  console.log(selectedTime.toLocaleTimeString()); */\r\n  }  \r\n};\r\n\r\n  //update the location selection\r\n  const [location, setLocation] = React.useState('');\r\n  const updateLocation = (event) => {\r\n    setLocation(event.target.value);\r\n  }\r\n  //update date\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\nreturn (\r\n    \r\n<Container maxWidth={false}>\r\n  <Formik\r\n  initialValues={{\r\n    title: '',\r\n    topics: '',\r\n    description: '',\r\n    duration: '',\r\n    date: '',\r\n    location: ' '\r\n  }}\r\n  onSubmit={handleSubmit}\r\n\r\n  // Using Yup for validation\r\n\r\n  validationSchema={Yup.object().shape({\r\n    title: Yup.string().max(100).required('Title is required'),\r\n    description: Yup.string().max(255),\r\n    duration: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only').test(\r\n      \"DOB\",\r\n      \"Duration must be greater than total topic durations\",\r\n      value => {\r\n        return value >= calculateTotalDuration();\r\n      })\r\n      // location: Yup.string().ensure().required(\"Location is required\")\r\n  })}\r\n  >\r\n    {props => {\r\n      const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleReset,\r\n        handleSubmit\r\n      } = props;\r\n      return (\r\n        <>\r\n        \r\n        <form onSubmit={handleSubmit} noValidate>\r\n          <Card>\r\n            <CardContent>\r\n              <CardHeader title=\"Create A Meeting\">\r\n              </CardHeader>\r\n          {/* </Card> */}\r\n\r\n          <Divider/>\r\n\r\n          {/* Meeting Title */}\r\n          <TextField\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\"\r\n                \r\n              />\r\n        {/* Meeting Topic */}  \r\n      {/* Invite Topics Button */}\r\n       <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpenTopic}>\r\n            Select topic\r\n          </Button> \r\n      <Dialog onClose={handleCloseTopic} aria-labelledby=\"customized-dialog-title\" open={openTopic}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseTopic}>\r\n          Select Topics\r\n        </DialogTitle>\r\n        <DialogContent dividers> \r\n             <div style={{ height: 400, width: '100%' }}> \r\n             {/* {console.log(topicsArr)} */}\r\n                <DataGrid \r\n                  \r\n                  rows={topic}\r\n                  columns={topicColumns}\r\n                  pageSize={5} \r\n                  checkboxSelection\r\n                  selectionModel={selectionModelTopic} \r\n                  onSelectionModelChange={(e) => {\r\n                     \r\n                     const selectedIDs = new Set(e.selectionModel);\r\n                     console.log(selectedTopic)\r\n                     setSelectedTopic(topic.filter((r) =>\r\n                       selectedIDs.has(r.id))\r\n                       \r\n                     )} }\r\n                  \r\n                />   \r\n                      \r\n                    \r\n  \r\n            </div>\r\n            \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveTopics} color=\"primary\">\r\n            Save Topics\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    {/* </div>  */}\r\n\r\n\r\n        {/* Meeting Description */}\r\n        <TextField\r\n          error={Boolean(touched.description && errors.description)}\r\n          fullWidth\r\n          helperText={touched.description && errors.description}\r\n          label=\"Description\"\r\n          margin=\"normal\"\r\n          name=\"description\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.description}\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={3}\r\n        />\r\n\r\n\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"dd/MM/yyyy\"\r\n          margin=\"normal\"\r\n          minDate={minDate}\r\n          id=\"date-picker-inline\"\r\n          label=\"Meeting Date\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n        <br></br>\r\n        <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Meeting Time\"\r\n          minDate={minDate}\r\n          value={selectedDate}\r\n          keyboardIcon={<ScheduleIcon />}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}\r\n        />\r\n        </MuiPickersUtilsProvider>\r\n        \r\n        {/* Meeting Duration */}\r\n        <TextField\r\n          error={Boolean(touched.duration && errors.duration)}\r\n          fullWidth\r\n          helperText={touched.duration && errors.duration}\r\n          label=\"Duration in minutes\"\r\n          margin=\"normal\"\r\n          name=\"duration\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.duration}\r\n          variant=\"outlined\"\r\n        />\r\n\r\n        {/* Meeting Location */}\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"location-input-label\">Location</InputLabel>\r\n        <Select\r\n          labelId=\"topic-input-label\"\r\n          id=\"location-input\"\r\n          value={location}\r\n          onChange={updateLocation}\r\n          label=\"Topics\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          >\r\n            <MenuItem value=\"\"> <em>None</em></MenuItem>\r\n            <MenuItem value={1}>Meeting Room 1</MenuItem>\r\n            <MenuItem value={2}>Meeting Room 2</MenuItem>\r\n            <MenuItem value={3}>Meeting Room 3</MenuItem>\r\n            <MenuItem value={4}>Meeting Room 4</MenuItem>\r\n        </Select>\r\n        <br></br>\r\n        {/* Invite Participants Button */}\r\n        <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpen}>\r\n            Invite Participants\r\n          </Button>\r\n        </FormControl>\r\n\r\n        </CardContent>\r\n           \r\n        <Box\r\n          display=\"flex\"\r\n          flex=\"1\"\r\n          flexDirection=\"row\"\r\n          justifyContent=\"space-between\"\r\n          p={3}\r\n        >\r\n          \r\n     \r\n    <div>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Invite Participants\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n\r\n              <div style={{ height: 400, width: '100%' }}>\r\n            \r\n                <DataGrid \r\n                \r\n                 rows={user}\r\n                 columns={columns}\r\n                 pageSize={5} \r\n                 checkboxSelection \r\n                 selectionModel={selectionModelParticipant} \r\n                 onSelectionModelChange={(e) => {\r\n                    \r\n                    const selectedIDs = new Set(e.selectionModel);\r\n                    console.log(member)\r\n                    setMember(user.filter((r) =>\r\n                      selectedIDs.has(r.id))\r\n                      \r\n                    )} }            \r\n                      />  \r\n                      \r\n       \r\n  \r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveParticipants} color=\"primary\">\r\n            Save Participants\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    </div>\r\n\r\n        {/* Cretae Meeting button */}\r\n          <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-end\"\r\n          disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\">\r\n            Create Meeting\r\n          </Button>\r\n          </Box>\r\n\r\n        </Card>\r\n        </form>\r\n        </>\r\n      );\r\n    }}\r\n  \r\n  </Formik>\r\n\r\n     <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleCloseAlert} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleCloseAlert} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar> \r\n</Container>\r\n\r\n  );\r\n};\r\n\r\nexport default CreateMeetingForm;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\createTopic\\createTopicForm.js",["480","481","482","483","484","485"],"import React,{useState} from 'react';\r\nimport { Link as RouterLink, useNavigate } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  FormLabel ,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  Checkbox,\r\n  FormControlLabel ,\r\n  CardContent,\r\n  Snackbar,\r\n  FormControl\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  }\r\n}));\r\n\r\n\r\nconst CreateTopicForm = props => {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const [category, setCategory] = React.useState('');\r\n  const [state, setState] = React.useState({\r\n    checkedDecision: false,\r\n    checkedInfo: false,\r\n  });\r\n  const { checkedDecision, checkedInfo } = state;\r\n  const error = [checkedDecision, checkedInfo].filter((v) => v).length < 1;\r\n  \r\n  //Alert Function\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n//Close func for closing the alert\r\nconst handleClose = (event, reason) => {\r\n  if (reason === 'clickaway') {\r\n    return;\r\n  }\r\n  setOpen(false);\r\n};\r\nconst clearForm = () => {\r\n setCategory(\"\");\r\n setState(state.checkedDecision=false);\r\n setState(state.checkedInfo=false);\r\n};\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async (values,{resetForm}) => {\r\n    setErrorMessage(\"\");\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n       if(Object.keys(category).length == 0)\r\n     {\r\n      \r\n        setErrorMessage(\"Please select a category\");\r\n          setOpen(true); \r\n          \r\n     } \r\n     else if(error)\r\n     {\r\n      setErrorMessage(\"Please select at least one output type\");\r\n      setOpen(true); \r\n     }\r\n     else\r\n    {\r\n      \r\n    const { title, description,totalTime } = values;\r\n    var body = {\r\n        title: title,\r\n        description: description,\r\n        totalTime: totalTime,\r\n        category: category,\r\n        decision:checkedDecision,\r\n        information: checkedInfo\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      xhrFields: {\r\n        withCredentials: true\r\n    },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/topic/topicSave\";\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        //console.log(\"success\")\r\n        setSuccessMessage(text.message);\r\n        setOpen(true);\r\n        //Form reset must be done!!!\r\n        resetForm({});\r\n        clearForm();\r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message);\r\n        setOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n   }\r\n  }; \r\n\r\n  //For updating the selector -duration time-\r\n  \r\n  const updateCategory = (event) => {\r\n    setCategory(event.target.value);\r\n    console.log(category);\r\n  };\r\n  \r\n\r\n  const handleCB = (event,value) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n    \r\n  };\r\n  \r\n  // Returning the part that should be rendered\r\n  // Just set handleSubmit as the handler for the onSubmit call.\r\n  return (\r\n    \r\n   <Container maxWidth={false}>\r\n    <Formik\r\n      initialValues={{\r\n        title: '',\r\n        description: '',\r\n        category:\"\",\r\n        totalTime:''\r\n      }}\r\n      onSubmit={handleSubmit}\r\n\r\n      //********Using Yup for validation********/\r\n\r\n      validationSchema={Yup.object().shape({\r\n        title: Yup.string().max(100).required('Title is required'),\r\n        description: Yup.string().max(255).required('Description is required'),\r\n       \r\n        totalTime: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only')\r\n        \r\n      })}\r\n      \r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit\r\n        } = props;\r\n        return (\r\n          <>\r\n          \r\n            <form onSubmit={handleSubmit} noValidate>\r\n            <Card>\r\n            <CardContent>\r\n            <CardHeader\r\n          subheader=\"Please enter the necessary information for creating a topic\"\r\n          title=\"Create Topic\"\r\n        />\r\n        <Divider />\r\n                \r\n              <TextField\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\"\r\n                \r\n              />\r\n              <TextField\r\n                error={Boolean(touched.description && errors.description)}\r\n                fullWidth\r\n                helperText={touched.description && errors.description}\r\n                label=\"Description\"\r\n                margin=\"normal\"\r\n                name=\"description\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.description}\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={5}\r\n              />\r\n              <TextField\r\n                error={Boolean(touched.totalTime && errors.totalTime)}\r\n                fullWidth\r\n                helperText={touched.totalTime && errors.totalTime}\r\n                label=\"Duration in minutes\"\r\n                margin=\"normal\"\r\n                name=\"totalTime\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.totalTime}\r\n                variant=\"outlined\"\r\n              />\r\n        \r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          value={category}\r\n          onChange={updateCategory}\r\n          label=\"Category\"\r\n          \r\n        > \r\n          <MenuItem value={\"\"}></MenuItem>  \r\n          <MenuItem value={\"Budget Meeting\"}>Budget Meeting</MenuItem>\r\n          <MenuItem value={\"HR Meeting\"}>HR Meeting</MenuItem>\r\n          <MenuItem value={\"Project Meeting\"}>Project Meeting</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n          <br/><br/>\r\n        <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\r\n          <FormLabel component=\"legend\">Select at least one meeting output</FormLabel>\r\n        <FormControlLabel\r\n          control={<Checkbox checked={state.checkedDecision} onChange={handleCB} name=\"checkedDecision\" value={checkedDecision}/>}\r\n          label=\"Decision\"\r\n        /> \r\n       <FormControlLabel\r\n          control={<Checkbox checked={state.checkedInfo} onChange={handleCB} name=\"checkedInfo\" value={checkedInfo} />}\r\n          label=\"Information \"\r\n        />\r\n        </FormControl>\r\n\r\n          </CardContent>\r\n          <Divider />\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n          >\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n          >\r\n           Create Topic\r\n          </Button>\r\n\r\n        </Box>\r\n        </Card>\r\n        </form>\r\n          </>\r\n        );\r\n      }}\r\n    </Formik>\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleClose} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleClose} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar>\r\n  </Container>\r\n  );\r\n};\r\n\r\nexport default CreateTopicForm;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\topicPool\\topicList.js",["486","487"],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyTopic\\index.js",["488"],"import React from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport ModifyTopicForm from './modifyTopicForm';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  }\r\n}));\r\n\r\nconst ModifyTopic = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Create Topic\"\r\n    >\r\n      <Container maxWidth={false}>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n        >\r\n          <Grid\r\n            item\r\n            lg={8}\r\n            md={12}\r\n            xl={9}\r\n            xs={12}\r\n          >\r\n            <ModifyTopicForm />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default ModifyTopic;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyMeeting\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyTopic\\modifyTopicForm.js",["489","490","491","492","493","494","495","496","497","498"],"import React,{useState, useEffect} from 'react';\r\nimport { Link, useNavigate, useLocation,useHistory} from 'react-router-dom';\r\nimport { Redirect} from 'react-router';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\n\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  FormLabel ,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  Checkbox,\r\n  FormControlLabel ,\r\n  CardContent,\r\n  Snackbar,\r\n  FormControl\r\n} from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  }\r\n}));\r\n\r\n\r\nconst ModifyTopicForm = props => {\r\n\r\n  const classes = useStyles();\r\n  const navigate = useNavigate();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [topic, setTopic] = React.useState('');\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const [category, setCategory] = React.useState('');\r\n/*   const [category, setCategory] = React.useState();\r\n  const [category, setCategory] = React.useState(''); */\r\n  const [state, setState] = React.useState({\r\n    checkedDecision: false,\r\n    checkedInfo: false,\r\n  });\r\n  //const { checkedDecision, checkedInfo } = state;\r\n  const error = [state.checkedDecision, state.checkedInfo].filter((v) => v).length < 1;\r\n  \r\n  //Alert Function\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n//Close func for closing the alert\r\nconst handleClose = (event, reason) => {\r\n  if (reason === 'clickaway') {\r\n    return;\r\n  }\r\n  setOpen(false);\r\n};\r\n\r\n\r\n\r\n\r\n  // The function that handles the logic when submitting the form\r\n  const handleSubmit = async (values) => {\r\n    setErrorMessage(\"\");\r\n    // This function received the values from the form\r\n    // The line below extract the two fields from the values object.\r\n       if(Object.keys(category).length == 0)\r\n     {\r\n      \r\n        setErrorMessage(\"Please select a category\");\r\n          setOpen(true); \r\n          \r\n     } \r\n     else if(error)\r\n     {\r\n      setErrorMessage(\"Please select at least one output type\");\r\n      setOpen(true); \r\n     }\r\n     else\r\n    {\r\n      \r\n    const { title, description,totalTime } = values;\r\n    var body = {\r\n        title: title,\r\n        description: description,\r\n        totalTime: totalTime,\r\n        category: category,\r\n        decision:state.checkedDecision,\r\n        information: state.checkedInfo\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n      xhrFields: {\r\n        withCredentials: true\r\n    },\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/topic/modifyTopic/\"+topicId;\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n      console.log(text)\r\n\r\n      if (text.status == \"success\") {\r\n        setSuccessMessage(text.message);\r\n        setOpen(true);\r\n\r\n        //console.log(\"success\")\r\n        /* const history = useHistory()    \r\n        history.push('/app/topics') */\r\n       // <Redirect path to='/app/topics/'/>\r\n\r\n        \r\n      } else {\r\n        console.log(text.message);\r\n        setErrorMessage(text.message);\r\n        setOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n   }\r\n  };\r\n  \r\n  \r\n  useEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/topic/getTopic/\"+topicId,\r\n    );\r\n  \r\n  setTopic(result.data.data);\r\n  setCategory(result.data.data.category);\r\n  setState({checkedDecision:result.data.data.decision, checkedInfo:result.data.data.information});\r\n  },[]);\r\n  const urllocation = useLocation();\r\n  const getCurrentPathWithLastPart = () => {\r\n  \r\n    return urllocation.pathname.slice(urllocation.pathname.lastIndexOf('/')+1,urllocation.pathname.length );\r\n  }\r\n  const  topicId  = getCurrentPathWithLastPart();\r\n  console.log(topicId);\r\n  //For updating the selector -duration time-\r\n  \r\n  const updateCategory = (event) => {\r\n    setCategory(event.target.value);\r\n    console.log(category);\r\n  };\r\n  \r\n\r\n  const handleCB = (event,value) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n    \r\n  };\r\n  \r\n  // Returning the part that should be rendered\r\n  // Just set handleSubmit as the handler for the onSubmit call.\r\n  return (\r\n    \r\n   <Container maxWidth={false}>\r\n    <Formik\r\n      initialValues={topic}\r\n      enableReinitialize\r\n      onSubmit={handleSubmit}\r\n\r\n      //********Using Yup for validation********/\r\n\r\n      validationSchema={Yup.object().shape({\r\n        title: Yup.string().max(100).required('Title is required'),\r\n        description: Yup.string().max(255).required('Description is required'),\r\n       \r\n        totalTime: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only')\r\n        \r\n      })}\r\n      \r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit\r\n        } = props;\r\n        return (\r\n          <>\r\n          \r\n            <form onSubmit={handleSubmit} noValidate>\r\n            <Card>\r\n            <CardContent>\r\n            <CardHeader\r\n          subheader=\"Please enter the necessary information for modifying a topic\"\r\n          title=\"Modify Topic\"\r\n        />\r\n        <Divider />\r\n                \r\n              <TextField\r\n              InputLabelProps={{ shrink: true }}\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\"\r\n                \r\n              />\r\n              <TextField\r\n              InputLabelProps={{ shrink: true }}\r\n                error={Boolean(touched.description && errors.description)}\r\n                fullWidth\r\n                helperText={touched.description && errors.description}\r\n                label=\"Description\"\r\n                margin=\"normal\"\r\n                name=\"description\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.description}\r\n                variant=\"outlined\"\r\n                multiline\r\n                rows={5}\r\n              />\r\n              <TextField\r\n              InputLabelProps={{ shrink: true }}\r\n                error={Boolean(touched.totalTime && errors.totalTime)}\r\n                fullWidth\r\n                helperText={touched.totalTime && errors.totalTime}\r\n                label=\"Duration in minutes\"\r\n                margin=\"normal\"\r\n                name=\"totalTime\"\r\n                onBlur={handleBlur}\r\n                onChange={handleChange}\r\n                value={values.totalTime}\r\n                variant=\"outlined\"\r\n              />\r\n        \r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-outlined-label\"\r\n          id=\"demo-simple-select-outlined\"\r\n          value={category}\r\n          onChange={updateCategory}\r\n          label=\"Category\"\r\n          \r\n        > \r\n          <MenuItem value={\"\"}></MenuItem>  \r\n          <MenuItem value={\"Budget Meeting\"}>Budget Meeting</MenuItem>\r\n          <MenuItem value={\"HR Meeting\"}>HR Meeting</MenuItem>\r\n          <MenuItem value={\"Project Meeting\"}>Project Meeting</MenuItem>\r\n        </Select>\r\n      </FormControl>\r\n          <br/><br/>\r\n        <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\r\n          <FormLabel component=\"legend\">Select at least one meeting output</FormLabel>\r\n        <FormControlLabel\r\n          control={<Checkbox checked={state.checkedDecision} onChange={handleCB} name=\"checkedDecision\" value={state.checkedDecision}/>}\r\n          label=\"Decision\"\r\n        /> \r\n       <FormControlLabel\r\n          control={<Checkbox checked={state.checkedInfo} onChange={handleCB} name=\"checkedInfo\" value={state.checkedInfo} />}\r\n          label=\"Information \"\r\n        />\r\n        </FormControl>\r\n\r\n          </CardContent>\r\n          <Divider />\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n          >\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n          >\r\n           Modify Topic\r\n          </Button>\r\n\r\n        </Box>\r\n        </Card>\r\n        </form>\r\n          </>\r\n        );\r\n      }}\r\n    </Formik>\r\n    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleClose} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleClose} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar>\r\n  </Container>\r\n  );\r\n};\r\n\r\nexport default ModifyTopicForm;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\modifyMeeting\\ModifyMeetingForm.js",["499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518"],"import React,{useState, useEffect} from 'react';\r\nimport { Link as RouterLink, useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns'; //instal this version npm i @date-io/date-fns@1.3.13\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { Formik } from 'formik';\r\nimport Async from \"react-async\"\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Select,\r\n  InputLabel ,\r\n  MenuItem,\r\n  TextField,\r\n  Divider,\r\n  makeStyles,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  FormControl,\r\n  Snackbar\r\n\r\n} from '@material-ui/core';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    height: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n    paddingTop: theme.spacing(3)\r\n  },\r\n  formControl: {\r\n    minWidth: 150,\r\n    maxWidth: 300,\r\n  },\r\n  \r\n}));\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n    width: 600\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\nconst topicColumns = [\r\n  \r\n  { field: 'title', headerName: 'Topic Title', width: 180},\r\n  { field: 'totalTime', headerName: 'Duration', width: 180 }\r\n  \r\n];\r\nconst columns = [\r\n  { field: 'firstName', headerName: 'First name', width: 120},\r\n  { field: 'lastName', headerName: 'Last name', width: 120 },\r\n  { field: 'email', headerName: 'Email', width: 220 }\r\n];\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\n \r\nconst ModifyMeetingForm = props => {\r\n  const classes = useStyles();\r\n  const [location, setLocation] = React.useState('');\r\n  const [meeting, setMeeting] = React.useState('');\r\n  const [title, setTitle] = React.useState('');\r\n  const [open, setOpen] = React.useState(false);\r\n  const [openTopic, setOpenTopic] = React.useState(false);\r\n  const [selectParticipats, setSelectionParticipants] = React.useState([]);\r\n  let dt = new Date();\r\n  const minDate = dt.setDate(dt.getDate() );\r\n  const [selectedDate, setSelectedDate] = React.useState();\r\n  const [openAlert, setOpenAlert] = React.useState(false);\r\n  var [errorMessage,setErrorMessage]=useState(\"\");\r\n  var [successMessage,setSuccessMessage]=useState(\"\");\r\n  const[user,setUser]=useState([]);\r\n  const[member,setMember]=useState([]);\r\n  const[topic,setTopic]=useState([]);\r\n  const[selectedTopic,setSelectedTopic]=useState([]);\r\n  const[topicsArr,setTopicsArr]=useState([]);\r\n  const[participantsArr,setParticipantsArr]=useState([]);\r\n  const[selectionModelTopic,setSelectionModelTopic]=useState([]);\r\n  const[selectionModelParticipant,setSelectionModelParticipant]=useState([]);\r\n\r\n /*  const loadUser = async values => {\r\n    const url = \"http://localhost:81/meeting/getEmails\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n\r\n      if (data.status == \"success\") {\r\n        setUser(data.data)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  }; */\r\n  useEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/meeting/getEmails\",\r\n    );\r\n      setUser(result.data.data)\r\n  },[]);\r\n/*   const loadTopic = async values => {\r\n    const url = \"http://localhost:81/topic/getTopic\";\r\n    try {\r\n      const result = await fetch(url);\r\n      const data = await result.json();\r\n\r\n      if (data.status == \"success\") {\r\n        setTopic(data.data)\r\n        \r\n      } else {\r\n        console.log(\"error\");\r\n        \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n  }; */\r\n  useEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/topic/getTopic\",\r\n    );\r\n      setTopic(result.data.data)\r\n      topic.map((val)=>{\r\n        console.log(val._id)\r\n        selectedTopic.forEach(element => {\r\n          console.log(element[0]);\r\n      if (val._id==element[0])\r\n      {\r\n        setTopicsArr([val])\r\n      }});\r\n      });\r\n  },[]);\r\n\r\n      //function for displaying alert\r\n      function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n      }\r\n//Open Participants Dialog\r\n  const handleClickOpen = () => {\r\n    //loadUser();\r\n    setOpen(true);\r\n    \r\n  };\r\n  \r\n  const handleClickOpenTopic =()=>{\r\n    //loadTopic();\r\n    setOpenTopic(true);\r\n  }\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleCloseTopic = () => {\r\n    setOpenTopic(false);\r\n  };\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenAlert(false);\r\n  };\r\n\r\n\r\n  const calculateTotalDuration=()=>{\r\n    var totalDuration=0;\r\n    topicsArr.map((val) => \r\n    totalDuration+=parseInt(val.totalTime)\r\n    );\r\n    console.log(totalDuration);\r\n    console.log(topicsArr);\r\n    return totalDuration;\r\n  }\r\n  const clearForm=()=>{\r\n   setTopicsArr([]);\r\n   setSelectedDate(new Date());\r\n   setLocation(\"\");\r\n   setParticipantsArr([]);\r\n  }\r\n  //Function that handles the form submission\r\n  const handleSubmit = async (values,{resetForm}) => {\r\n    setErrorMessage(\"\");\r\n    const {title, description, duration} = values;\r\n    var participantsTmp=[];\r\n    var topicsTmp=[];\r\n\r\n    participantsArr.map((val)=>\r\n    participantsTmp.push(val._id)\r\n    );\r\n    topicsArr.map((val)=>\r\n    topicsTmp.push(val._id)\r\n    );\r\n   \r\n    if (!topicsTmp.length)\r\n    {\r\n      setErrorMessage(\"Please select at least one topic\");\r\n         setOpenAlert(true); \r\n    }\r\n    else if(!participantsTmp.length)\r\n    {\r\n         setErrorMessage(\"Please select at least one participant\");\r\n         setOpenAlert(true); \r\n    }\r\n     else if (location.length==0)\r\n    {\r\n      setErrorMessage(\"Please select a meeting location\");\r\n      setOpenAlert(true); \r\n    } \r\n    else{\r\n    \r\n    var body = {\r\n      title: title,\r\n      description: description,\r\n      topic: topicsTmp,\r\n      members:participantsTmp,\r\n      date: selectedDate,\r\n      //time: selectedDate.toLocaleTimeString(),\r\n      location: location,\r\n      duration: duration.toString()\r\n    };\r\n    const options = {\r\n      method: \"POST\",\r\n   \r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      },\r\n      body: JSON.stringify(body)\r\n    };\r\n    const url = \"http://localhost:81/meeting/modifyMeeting/\"+meetingId;\r\n    console.log(url)\r\n    try {\r\n      const response = await fetch(url, options);\r\n      const text = await response.json();\r\n\r\n      if (text.status == \"success\") {\r\n        setSuccessMessage(text.message);\r\n        setOpenAlert(true); \r\n        resetForm({});\r\n        clearForm();\r\n        setSelectionModelParticipant([]);\r\n        setSelectionModelTopic([]);\r\n  \r\n      } else {\r\n        console.log(text.message);\r\n         setErrorMessage(text.message);\r\n        setOpenAlert(true); \r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    } \r\n /*  console.log(selectedTime.toLocaleDateString());\r\n  console.log(selectedTime.toLocaleTimeString()); */\r\n  }   \r\n};\r\n\r\nuseEffect(async () => {\r\n    const result = await axios(\r\n        \"http://localhost:81/meeting/getMeetings/\"+meetingId,\r\n    );\r\n \r\nsetMeeting(result.data.data);\r\nsetSelectedDate(result.data.data.date)\r\nsetSelectionModelTopic(result.data.data.topic)\r\nsetSelectionModelParticipant(result.data.data.members)\r\nsetLocation(result.data.data.location)\r\nsetSelectedTopic([result.data.data.topic])\r\nsetParticipantsArr(result.data.data.members)\r\n  },[]);\r\n\r\n\r\n  \r\n\r\n\r\n //update date\r\n const handleDateChange = (date) => {\r\n  setSelectedDate(date);\r\n};\r\nconst urllocation = useLocation();\r\nconst getCurrentPathWithLastPart = () => {\r\n\r\n  return urllocation.pathname.slice(urllocation.pathname.lastIndexOf('/')+1,urllocation.pathname.length );\r\n}\r\nconst  meetingId  = getCurrentPathWithLastPart();\r\nconst SaveParticipants=()=>\r\n{\r\n  setParticipantsArr(member);\r\n  setSelectionModelParticipant(member.map((r) => r.id));\r\n  handleClose();\r\n}\r\nconst SaveTopics=()=>\r\n{\r\n  setTopicsArr(selectedTopic);\r\n  console.log(selectedTopic)\r\n  setSelectionModelTopic(selectedTopic.map((r) => r.id));\r\n  handleCloseTopic();\r\n  \r\n}  \r\n   //update the location selection\r\n  const updateLocation = (event) => {\r\n    setLocation(event.target.value);\r\n  }\r\n \r\n  return (\r\n    \r\n<Container maxWidth={false}>\r\n  <Formik\r\n   initialValues={meeting} \r\n  enableReinitialize\r\n  onSubmit={handleSubmit}\r\n\r\n  // Using Yup for validation\r\n\r\n  validationSchema={Yup.object().shape({\r\n    title: Yup.string().max(100).required('Title is required'),\r\n    description: Yup.string().max(255),\r\n    duration: Yup.string().required(\"Duration is required\").matches(/^\\d+$/, 'The field should have digits only').test(\r\n      \"DOB\",\r\n      \"Duration must be greater than total topic durations\",\r\n      value => {\r\n        return value >= calculateTotalDuration();\r\n      })\r\n      // location: Yup.string().ensure().required(\"Location is required\")\r\n  })}\r\n  >\r\n    \r\n    {props => {\r\n      const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleReset,\r\n        handleSubmit\r\n      } = props;\r\n      \r\n      return (\r\n        <>\r\n        \r\n        <form onSubmit={handleSubmit} noValidate>\r\n          <Card>\r\n            <CardContent>\r\n              <CardHeader title=\"Modify The Meeting\">\r\n              </CardHeader>\r\n          {/* </Card> */}\r\n\r\n          <Divider/>\r\n\r\n          {/* Meeting Title */}\r\n\r\n          <TextField\r\n                error={Boolean(touched.title && errors.title)}\r\n                fullWidth\r\n                helperText={touched.title && errors.title}\r\n                label=\"Title\"\r\n                InputLabelProps={{ shrink: true }}\r\n                /* initialValues={meeting.title} */\r\n                margin=\"normal\"\r\n                name=\"title\"\r\n                onBlur={handleBlur}\r\n                onChange={ /* (e) => setMeeting({title:e.target.value}) */ handleChange}\r\n                value={values.title}\r\n                variant=\"outlined\">\r\n              </TextField>\r\n             \r\n        {/* Meeting Topic */}  \r\n      {/* Invite Topics Button */}\r\n       <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpenTopic}>\r\n            Select topic\r\n          </Button> \r\n      <Dialog onClose={handleCloseTopic} aria-labelledby=\"customized-dialog-title\" open={openTopic}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleCloseTopic}>\r\n          Select Topics\r\n        </DialogTitle>\r\n        <DialogContent dividers> \r\n             <div style={{ height: 400, width: '100%' }}> \r\n                <DataGrid \r\n                  \r\n                  rows={topic}\r\n                  columns={topicColumns}\r\n                  pageSize={5} \r\n                  checkboxSelection\r\n                  selectionModel={selectionModelTopic} \r\n                  onSelectionModelChange={(e) => {\r\n                     \r\n                     const selectedIDs = new Set(e.selectionModel);\r\n                     setSelectedTopic(topic.filter((r) =>\r\n                       selectedIDs.has(r.id))\r\n                       \r\n                     )} }\r\n                  \r\n                />   \r\n                      \r\n                    \r\n  \r\n            </div>\r\n            \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveTopics} color=\"primary\">\r\n            Save Topics\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    {/* </div>  */}\r\n\r\n\r\n        {/* Meeting Description */}\r\n        <TextField\r\n          error={Boolean(touched.description && errors.description)}\r\n          fullWidth\r\n          helperText={touched.description && errors.description}\r\n          InputLabelProps={{ shrink: true }}\r\n          label=\"Description\"\r\n          margin=\"normal\"\r\n          name=\"description\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.description}\r\n          variant=\"outlined\"\r\n          multiline\r\n          rows={3}\r\n        />\r\n\r\n\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"dd/MM/yyyy\"\r\n          margin=\"normal\"\r\n          minDate={minDate}\r\n          id=\"date-picker-inline\"\r\n          label=\"Meeting Date\"\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n        <br></br>\r\n        <KeyboardTimePicker\r\n          margin=\"normal\"\r\n          id=\"time-picker\"\r\n          label=\"Meeting Time\"\r\n          minDate={minDate}\r\n          value={selectedDate}\r\n          keyboardIcon={<ScheduleIcon />}\r\n          onChange={handleDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change time',\r\n          }}\r\n        />\r\n        </MuiPickersUtilsProvider>\r\n        \r\n        {/* Meeting Duration */}\r\n        <TextField\r\n          error={Boolean(touched.duration && errors.duration)}\r\n          fullWidth\r\n          helperText={touched.duration && errors.duration}\r\n          InputLabelProps={{ shrink: true }}\r\n          label=\"Duration in minutes\"\r\n          margin=\"normal\"\r\n          name=\"duration\"\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values.duration}\r\n          variant=\"outlined\"\r\n        />\r\n\r\n        {/* Meeting Location */}\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n        <InputLabel id=\"location-input-label\">Location</InputLabel>\r\n        <Select\r\n          labelId=\"topic-input-label\"\r\n          id=\"location-input\"\r\n          value={location}\r\n          onChange={updateLocation}\r\n          label=\"Topics\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          >\r\n            <MenuItem value=\"\"> <em>None</em></MenuItem>\r\n            <MenuItem value={1}>Meeting Room 1</MenuItem>\r\n            <MenuItem value={2}>Meeting Room 2</MenuItem>\r\n            <MenuItem value={3}>Meeting Room 3</MenuItem>\r\n            <MenuItem value={4}>Meeting Room 4</MenuItem>\r\n        </Select>\r\n        <br></br>\r\n        {/* Invite Participants Button */}\r\n        <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-start\"\r\n          onClick={handleClickOpen}>\r\n            Invite Participants\r\n          </Button>\r\n        </FormControl>\r\n\r\n        </CardContent>\r\n           \r\n        <Box\r\n          display=\"flex\"\r\n          flex=\"1\"\r\n          flexDirection=\"row\"\r\n          justifyContent=\"space-between\"\r\n          p={3}\r\n        >\r\n          \r\n     \r\n    <div>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Invite Participants\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n\r\n              <div style={{ height: 400, width: '100%' }}>\r\n            \r\n                <DataGrid \r\n                \r\n                 rows={user}\r\n                 columns={columns}\r\n                 pageSize={5} \r\n                 checkboxSelection \r\n                 selectionModel={selectionModelParticipant} \r\n                 onSelectionModelChange={(e) => {\r\n                    \r\n                    const selectedIDs = new Set(e.selectionModel);\r\n                    setMember(user.filter((r) =>\r\n                      selectedIDs.has(r.id))\r\n                      \r\n                    )} }            \r\n                      />  \r\n                      \r\n       \r\n  \r\n            </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={SaveParticipants} color=\"primary\">\r\n            Save Participants\r\n          </Button>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    </div>\r\n\r\n        {/* Cretae Meeting button */}\r\n          <Button \r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          justifyContent=\"flex-end\"\r\n          disabled={isSubmitting}\r\n            type=\"submit\"\r\n            variant=\"contained\">\r\n            Modify Meeting\r\n          </Button>\r\n          </Box>\r\n\r\n        </Card>\r\n        </form>\r\n        </>\r\n      );\r\n    }}\r\n  \r\n  </Formik>\r\n\r\n     <Snackbar open={openAlert} autoHideDuration={6000} onClose={handleCloseAlert}>\r\n    {!Object.keys(errorMessage).length == 0 ? \r\n     \r\n         (<Alert onClose={handleCloseAlert} severity=\"Error\">\r\n         {errorMessage}  \r\n     </Alert>)\r\n        :(<Alert onClose={handleCloseAlert} severity=\"success\">\r\n            {successMessage}  \r\n        </Alert>)}\r\n        \r\n        \r\n      </Snackbar> \r\n</Container>\r\n\r\n  );\r\n};\r\n\r\nexport default ModifyMeetingForm;\r\n","F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\app\\store.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\features\\userSlice.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meetingHistory\\index.js",[],"F:\\final_final_senior\\final_senior\\TBKMeet\\client\\src\\views\\meetingHistory\\meetingHistoryList.js",["519","520","521","522","523","524"],{"ruleId":"525","replacedBy":"526"},{"ruleId":"527","replacedBy":"528"},{"ruleId":"529","severity":1,"message":"530","line":24,"column":7,"nodeType":"531","messageId":"532","endLine":24,"endColumn":13},{"ruleId":"533","severity":1,"message":"534","line":35,"column":5,"nodeType":"535","messageId":"536","endLine":35,"endColumn":11},{"ruleId":"537","severity":1,"message":"538","line":90,"column":23,"nodeType":"539","messageId":"536","endLine":90,"endColumn":25},{"ruleId":"529","severity":1,"message":"540","line":18,"column":10,"nodeType":"531","messageId":"532","endLine":18,"endColumn":15},{"ruleId":"537","severity":1,"message":"538","line":69,"column":23,"nodeType":"539","messageId":"536","endLine":69,"endColumn":25},{"ruleId":"541","severity":1,"message":"542","line":1,"column":1,"nodeType":"543","endLine":27,"endColumn":3},{"ruleId":"541","severity":1,"message":"544","line":1,"column":1,"nodeType":"543","endLine":35,"endColumn":3},{"ruleId":"529","severity":1,"message":"545","line":5,"column":9,"nodeType":"531","messageId":"532","endLine":5,"endColumn":18},{"ruleId":"546","severity":1,"message":"547","line":30,"column":8,"nodeType":"548","endLine":30,"endColumn":10,"suggestions":"549"},{"ruleId":"546","severity":1,"message":"550","line":86,"column":8,"nodeType":"548","endLine":86,"endColumn":10,"suggestions":"551"},{"ruleId":"529","severity":1,"message":"552","line":1,"column":17,"nodeType":"531","messageId":"532","endLine":1,"endColumn":26},{"ruleId":"529","severity":1,"message":"553","line":1,"column":28,"nodeType":"531","messageId":"532","endLine":1,"endColumn":36},{"ruleId":"529","severity":1,"message":"554","line":1,"column":38,"nodeType":"531","messageId":"532","endLine":1,"endColumn":44},{"ruleId":"529","severity":1,"message":"555","line":17,"column":8,"nodeType":"531","messageId":"532","endLine":17,"endColumn":15},{"ruleId":"529","severity":1,"message":"556","line":32,"column":10,"nodeType":"531","messageId":"532","endLine":32,"endColumn":18},{"ruleId":"537","severity":1,"message":"538","line":50,"column":27,"nodeType":"539","messageId":"536","endLine":50,"endColumn":29},{"ruleId":"529","severity":1,"message":"557","line":2,"column":18,"nodeType":"531","messageId":"532","endLine":2,"endColumn":28},{"ruleId":"529","severity":1,"message":"558","line":2,"column":30,"nodeType":"531","messageId":"532","endLine":2,"endColumn":41},{"ruleId":"529","severity":1,"message":"559","line":12,"column":8,"nodeType":"531","messageId":"532","endLine":12,"endColumn":13},{"ruleId":"529","severity":1,"message":"560","line":113,"column":10,"nodeType":"531","messageId":"532","endLine":113,"endColumn":27},{"ruleId":"529","severity":1,"message":"561","line":113,"column":29,"nodeType":"531","messageId":"532","endLine":113,"endColumn":53},{"ruleId":"537","severity":1,"message":"538","line":136,"column":23,"nodeType":"539","messageId":"536","endLine":136,"endColumn":25},{"ruleId":"537","severity":1,"message":"538","line":156,"column":23,"nodeType":"539","messageId":"536","endLine":156,"endColumn":25},{"ruleId":"537","severity":1,"message":"538","line":266,"column":43,"nodeType":"539","messageId":"536","endLine":266,"endColumn":45},{"ruleId":"537","severity":1,"message":"538","line":297,"column":23,"nodeType":"539","messageId":"536","endLine":297,"endColumn":25},{"ruleId":"529","severity":1,"message":"562","line":364,"column":9,"nodeType":"531","messageId":"532","endLine":364,"endColumn":20},{"ruleId":"563","severity":1,"message":"564","line":591,"column":13,"nodeType":"565","endLine":591,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":605,"column":40,"nodeType":"539","messageId":"536","endLine":605,"endColumn":42},{"ruleId":"529","severity":1,"message":"566","line":8,"column":8,"nodeType":"531","messageId":"532","endLine":8,"endColumn":23},{"ruleId":"529","severity":1,"message":"556","line":27,"column":12,"nodeType":"531","messageId":"532","endLine":27,"endColumn":20},{"ruleId":"541","severity":1,"message":"542","line":3,"column":1,"nodeType":"543","endLine":170,"endColumn":3},{"ruleId":"529","severity":1,"message":"567","line":16,"column":7,"nodeType":"531","messageId":"532","endLine":16,"endColumn":13},{"ruleId":"529","severity":1,"message":"568","line":18,"column":10,"nodeType":"531","messageId":"532","endLine":18,"endColumn":31},{"ruleId":"537","severity":1,"message":"538","line":55,"column":23,"nodeType":"539","messageId":"536","endLine":55,"endColumn":25},{"ruleId":"529","severity":1,"message":"557","line":2,"column":18,"nodeType":"531","messageId":"532","endLine":2,"endColumn":28},{"ruleId":"529","severity":1,"message":"569","line":44,"column":9,"nodeType":"531","messageId":"532","endLine":44,"endColumn":17},{"ruleId":"537","severity":1,"message":"538","line":77,"column":40,"nodeType":"539","messageId":"536","endLine":77,"endColumn":42},{"ruleId":"537","severity":1,"message":"538","line":115,"column":23,"nodeType":"539","messageId":"536","endLine":115,"endColumn":25},{"ruleId":"563","severity":1,"message":"564","line":274,"column":13,"nodeType":"565","endLine":274,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":287,"column":40,"nodeType":"539","messageId":"536","endLine":287,"endColumn":42},{"ruleId":"525","replacedBy":"570"},{"ruleId":"527","replacedBy":"571"},{"ruleId":"529","severity":1,"message":"572","line":2,"column":20,"nodeType":"531","messageId":"532","endLine":2,"endColumn":26},{"ruleId":"529","severity":1,"message":"540","line":18,"column":10,"nodeType":"531","messageId":"532","endLine":18,"endColumn":15},{"ruleId":"529","severity":1,"message":"573","line":19,"column":17,"nodeType":"531","messageId":"532","endLine":19,"endColumn":26},{"ruleId":"529","severity":1,"message":"574","line":34,"column":10,"nodeType":"531","messageId":"532","endLine":34,"endColumn":15},{"ruleId":"529","severity":1,"message":"575","line":34,"column":17,"nodeType":"531","messageId":"532","endLine":34,"endColumn":25},{"ruleId":"529","severity":1,"message":"576","line":35,"column":10,"nodeType":"531","messageId":"532","endLine":35,"endColumn":18},{"ruleId":"529","severity":1,"message":"577","line":35,"column":20,"nodeType":"531","messageId":"532","endLine":35,"endColumn":31},{"ruleId":"537","severity":1,"message":"538","line":78,"column":23,"nodeType":"539","messageId":"536","endLine":78,"endColumn":25},{"ruleId":"529","severity":1,"message":"574","line":127,"column":11,"nodeType":"531","messageId":"532","endLine":127,"endColumn":16},{"ruleId":"529","severity":1,"message":"576","line":128,"column":11,"nodeType":"531","messageId":"532","endLine":128,"endColumn":19},{"ruleId":"529","severity":1,"message":"530","line":24,"column":7,"nodeType":"531","messageId":"532","endLine":24,"endColumn":13},{"ruleId":"533","severity":1,"message":"534","line":35,"column":5,"nodeType":"535","messageId":"536","endLine":35,"endColumn":11},{"ruleId":"537","severity":1,"message":"538","line":90,"column":23,"nodeType":"539","messageId":"536","endLine":90,"endColumn":25},{"ruleId":"541","severity":1,"message":"542","line":1,"column":1,"nodeType":"543","endLine":27,"endColumn":3},{"ruleId":"541","severity":1,"message":"544","line":1,"column":1,"nodeType":"543","endLine":35,"endColumn":3},{"ruleId":"529","severity":1,"message":"555","line":17,"column":8,"nodeType":"531","messageId":"532","endLine":17,"endColumn":15},{"ruleId":"537","severity":1,"message":"538","line":48,"column":27,"nodeType":"539","messageId":"536","endLine":48,"endColumn":29},{"ruleId":"529","severity":1,"message":"552","line":1,"column":17,"nodeType":"531","messageId":"532","endLine":1,"endColumn":26},{"ruleId":"529","severity":1,"message":"553","line":1,"column":28,"nodeType":"531","messageId":"532","endLine":1,"endColumn":36},{"ruleId":"529","severity":1,"message":"554","line":1,"column":38,"nodeType":"531","messageId":"532","endLine":1,"endColumn":44},{"ruleId":"529","severity":1,"message":"545","line":5,"column":9,"nodeType":"531","messageId":"532","endLine":5,"endColumn":18},{"ruleId":"546","severity":1,"message":"547","line":36,"column":8,"nodeType":"548","endLine":36,"endColumn":10,"suggestions":"578"},{"ruleId":"546","severity":1,"message":"550","line":219,"column":8,"nodeType":"548","endLine":219,"endColumn":10,"suggestions":"579"},{"ruleId":"529","severity":1,"message":"580","line":1,"column":17,"nodeType":"531","messageId":"532","endLine":1,"endColumn":26},{"ruleId":"529","severity":1,"message":"566","line":8,"column":8,"nodeType":"531","messageId":"532","endLine":8,"endColumn":23},{"ruleId":"529","severity":1,"message":"581","line":68,"column":7,"nodeType":"531","messageId":"532","endLine":68,"endColumn":13},{"ruleId":"529","severity":1,"message":"582","line":68,"column":14,"nodeType":"531","messageId":"532","endLine":68,"endColumn":23},{"ruleId":"529","severity":1,"message":"583","line":90,"column":10,"nodeType":"531","messageId":"532","endLine":90,"endColumn":16},{"ruleId":"529","severity":1,"message":"583","line":89,"column":12,"nodeType":"531","messageId":"532","endLine":89,"endColumn":18},{"ruleId":"584","severity":1,"message":"585","line":180,"column":25,"nodeType":"586","endLine":180,"endColumn":28},{"ruleId":"529","severity":1,"message":"556","line":61,"column":10,"nodeType":"531","messageId":"532","endLine":61,"endColumn":18},{"ruleId":"546","severity":1,"message":"587","line":63,"column":13,"nodeType":"588","endLine":68,"endColumn":4},{"ruleId":"529","severity":1,"message":"567","line":16,"column":7,"nodeType":"531","messageId":"532","endLine":16,"endColumn":13},{"ruleId":"529","severity":1,"message":"589","line":25,"column":10,"nodeType":"531","messageId":"532","endLine":25,"endColumn":17},{"ruleId":"529","severity":1,"message":"590","line":102,"column":7,"nodeType":"531","messageId":"532","endLine":102,"endColumn":12},{"ruleId":"529","severity":1,"message":"557","line":2,"column":18,"nodeType":"531","messageId":"532","endLine":2,"endColumn":28},{"ruleId":"529","severity":1,"message":"558","line":2,"column":30,"nodeType":"531","messageId":"532","endLine":2,"endColumn":41},{"ruleId":"529","severity":1,"message":"559","line":12,"column":8,"nodeType":"531","messageId":"532","endLine":12,"endColumn":13},{"ruleId":"529","severity":1,"message":"560","line":113,"column":10,"nodeType":"531","messageId":"532","endLine":113,"endColumn":27},{"ruleId":"529","severity":1,"message":"561","line":113,"column":29,"nodeType":"531","messageId":"532","endLine":113,"endColumn":53},{"ruleId":"537","severity":1,"message":"538","line":136,"column":23,"nodeType":"539","messageId":"536","endLine":136,"endColumn":25},{"ruleId":"537","severity":1,"message":"538","line":156,"column":23,"nodeType":"539","messageId":"536","endLine":156,"endColumn":25},{"ruleId":"537","severity":1,"message":"538","line":266,"column":30,"nodeType":"539","messageId":"536","endLine":266,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":301,"column":23,"nodeType":"539","messageId":"536","endLine":301,"endColumn":25},{"ruleId":"529","severity":1,"message":"562","line":369,"column":9,"nodeType":"531","messageId":"532","endLine":369,"endColumn":20},{"ruleId":"563","severity":1,"message":"564","line":596,"column":13,"nodeType":"565","endLine":596,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":610,"column":40,"nodeType":"539","messageId":"536","endLine":610,"endColumn":42},{"ruleId":"529","severity":1,"message":"557","line":2,"column":18,"nodeType":"531","messageId":"532","endLine":2,"endColumn":28},{"ruleId":"529","severity":1,"message":"569","line":44,"column":9,"nodeType":"531","messageId":"532","endLine":44,"endColumn":17},{"ruleId":"537","severity":1,"message":"538","line":77,"column":40,"nodeType":"539","messageId":"536","endLine":77,"endColumn":42},{"ruleId":"537","severity":1,"message":"538","line":118,"column":23,"nodeType":"539","messageId":"536","endLine":118,"endColumn":25},{"ruleId":"563","severity":1,"message":"564","line":277,"column":13,"nodeType":"565","endLine":277,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":290,"column":40,"nodeType":"539","messageId":"536","endLine":290,"endColumn":42},{"ruleId":"529","severity":1,"message":"568","line":20,"column":10,"nodeType":"531","messageId":"532","endLine":20,"endColumn":31},{"ruleId":"537","severity":1,"message":"538","line":109,"column":23,"nodeType":"539","messageId":"536","endLine":109,"endColumn":25},{"ruleId":"529","severity":1,"message":"591","line":9,"column":10,"nodeType":"531","messageId":"532","endLine":9,"endColumn":14},{"ruleId":"529","severity":1,"message":"591","line":2,"column":10,"nodeType":"531","messageId":"532","endLine":2,"endColumn":14},{"ruleId":"529","severity":1,"message":"592","line":2,"column":41,"nodeType":"531","messageId":"532","endLine":2,"endColumn":51},{"ruleId":"529","severity":1,"message":"593","line":3,"column":10,"nodeType":"531","messageId":"532","endLine":3,"endColumn":18},{"ruleId":"529","severity":1,"message":"569","line":46,"column":9,"nodeType":"531","messageId":"532","endLine":46,"endColumn":17},{"ruleId":"537","severity":1,"message":"538","line":81,"column":40,"nodeType":"539","messageId":"536","endLine":81,"endColumn":42},{"ruleId":"537","severity":1,"message":"538","line":122,"column":23,"nodeType":"539","messageId":"536","endLine":122,"endColumn":25},{"ruleId":"546","severity":1,"message":"587","line":144,"column":13,"nodeType":"588","endLine":152,"endColumn":4},{"ruleId":"546","severity":1,"message":"594","line":152,"column":5,"nodeType":"548","endLine":152,"endColumn":7,"suggestions":"595"},{"ruleId":"563","severity":1,"message":"564","line":300,"column":13,"nodeType":"565","endLine":300,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":313,"column":40,"nodeType":"539","messageId":"536","endLine":313,"endColumn":42},{"ruleId":"529","severity":1,"message":"557","line":2,"column":18,"nodeType":"531","messageId":"532","endLine":2,"endColumn":28},{"ruleId":"529","severity":1,"message":"558","line":2,"column":30,"nodeType":"531","messageId":"532","endLine":2,"endColumn":41},{"ruleId":"529","severity":1,"message":"545","line":2,"column":43,"nodeType":"531","messageId":"532","endLine":2,"endColumn":52},{"ruleId":"529","severity":1,"message":"559","line":12,"column":8,"nodeType":"531","messageId":"532","endLine":12,"endColumn":13},{"ruleId":"529","severity":1,"message":"596","line":113,"column":10,"nodeType":"531","messageId":"532","endLine":113,"endColumn":15},{"ruleId":"529","severity":1,"message":"597","line":113,"column":17,"nodeType":"531","messageId":"532","endLine":113,"endColumn":25},{"ruleId":"529","severity":1,"message":"560","line":116,"column":10,"nodeType":"531","messageId":"532","endLine":116,"endColumn":27},{"ruleId":"529","severity":1,"message":"561","line":116,"column":29,"nodeType":"531","messageId":"532","endLine":116,"endColumn":53},{"ruleId":"546","severity":1,"message":"587","line":149,"column":13,"nodeType":"588","endLine":154,"endColumn":4},{"ruleId":"546","severity":1,"message":"587","line":172,"column":13,"nodeType":"588","endLine":186,"endColumn":4},{"ruleId":"598","severity":1,"message":"599","line":177,"column":22,"nodeType":"588","messageId":"600","endLine":177,"endColumn":24},{"ruleId":"537","severity":1,"message":"538","line":181,"column":18,"nodeType":"539","messageId":"536","endLine":181,"endColumn":20},{"ruleId":"546","severity":1,"message":"601","line":186,"column":5,"nodeType":"548","endLine":186,"endColumn":7,"suggestions":"602"},{"ruleId":"537","severity":1,"message":"538","line":256,"column":30,"nodeType":"539","messageId":"536","endLine":256,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":288,"column":23,"nodeType":"539","messageId":"536","endLine":288,"endColumn":25},{"ruleId":"546","severity":1,"message":"587","line":309,"column":11,"nodeType":"588","endLine":321,"endColumn":4},{"ruleId":"546","severity":1,"message":"603","line":321,"column":5,"nodeType":"548","endLine":321,"endColumn":7,"suggestions":"604"},{"ruleId":"529","severity":1,"message":"562","line":387,"column":9,"nodeType":"531","messageId":"532","endLine":387,"endColumn":20},{"ruleId":"563","severity":1,"message":"564","line":617,"column":13,"nodeType":"565","endLine":617,"endColumn":32},{"ruleId":"537","severity":1,"message":"538","line":631,"column":40,"nodeType":"539","messageId":"536","endLine":631,"endColumn":42},{"ruleId":"529","severity":1,"message":"568","line":21,"column":10,"nodeType":"531","messageId":"532","endLine":21,"endColumn":31},{"ruleId":"529","severity":1,"message":"591","line":22,"column":10,"nodeType":"531","messageId":"532","endLine":22,"endColumn":14},{"ruleId":"529","severity":1,"message":"605","line":23,"column":8,"nodeType":"531","messageId":"532","endLine":23,"endColumn":16},{"ruleId":"529","severity":1,"message":"606","line":24,"column":8,"nodeType":"531","messageId":"532","endLine":24,"endColumn":18},{"ruleId":"529","severity":1,"message":"607","line":25,"column":8,"nodeType":"531","messageId":"532","endLine":25,"endColumn":16},{"ruleId":"537","severity":1,"message":"538","line":65,"column":23,"nodeType":"539","messageId":"536","endLine":65,"endColumn":25},"no-native-reassign",["608"],"no-negated-in-lhs",["609"],"no-unused-vars","'styles' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'height'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Alert' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.","ArrayExpression",["610"],"React Hook useEffect has a missing dependency: 'roomID'. Either include it or remove the dependency array.",["611"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'Toolbar' is defined but never used.","'meetings' is assigned a value but never used.","'RouterLink' is defined but never used.","'useNavigate' is defined but never used.","'Async' is defined but never used.","'selectParticipats' is assigned a value but never used.","'setSelectionParticipants' is assigned a value but never used.","'handleReset' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'MeetingListView' is defined but never used.","'cities' is assigned a value but never used.","'CompareArrowsOutlined' is defined but never used.","'navigate' is assigned a value but never used.",["608"],["609"],"'Outlet' is defined but never used.","'userSlice' is defined but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.",["612"],["613"],"'Component' is defined but never used.","'events' is assigned a value but never used.","'setEvents' is assigned a value but never used.","'create' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'connect' is defined but never used.","'state' is assigned a value but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'topicId'. Either include it or remove the dependency array.",["614"],"'title' is assigned a value but never used.","'setTitle' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'selectedTopic' and 'topic'. Either include them or remove the dependency array.",["615"],"React Hook useEffect has a missing dependency: 'meetingId'. Either include it or remove the dependency array.",["616"],"'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'InfoIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"617","fix":"621"},{"desc":"619","fix":"622"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},"Update the dependencies array to be: [props.peer]",{"range":"629","text":"630"},"Update the dependencies array to be: [roomID]",{"range":"631","text":"632"},{"range":"633","text":"630"},{"range":"634","text":"632"},"Update the dependencies array to be: [topicId]",{"range":"635","text":"636"},"Update the dependencies array to be: [selectedTopic, topic]",{"range":"637","text":"638"},"Update the dependencies array to be: [meetingId]",{"range":"639","text":"640"},[726,728],"[props.peer]",[2585,2587],"[roomID]",[1198,1200],[6140,6142],[3979,3981],"[topicId]",[5476,5478],"[selectedTopic, topic]",[8979,8981],"[meetingId]"]