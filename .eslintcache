[{"E:\\BILKENT\\senior project\\TBKMeet\\tbkmeet\\src\\index.js":"1","E:\\BILKENT\\senior project\\TBKMeet\\tbkmeet\\src\\reportWebVitals.js":"2","E:\\BILKENT\\senior project\\TBKMeet\\tbkmeet\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":2441,"mtime":1608537654251,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"pvmf3r",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"16"},"E:\\BILKENT\\senior project\\TBKMeet\\tbkmeet\\src\\index.js",[],["17","18"],"E:\\BILKENT\\senior project\\TBKMeet\\tbkmeet\\src\\reportWebVitals.js",[],"E:\\BILKENT\\senior project\\TBKMeet\\tbkmeet\\src\\App.js",["19","20","21","22","23","24"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport './App.css';\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n`;\r\n\r\nconst Video = styled.video`\r\n  border: 1px solid blue;\r\n  width: 50%;\r\n  height: 50%;\r\n`;\r\n\r\nfunction App() {\r\n  const [yourID, setYourID] = useState(\"\");\r\n  const [users, setUsers] = useState({});\r\n  const [stream, setStream] = useState();\r\n  const [receivingCall, setReceivingCall] = useState(false);\r\n  const [caller, setCaller] = useState(\"\");\r\n  const [callerSignal, setCallerSignal] = useState();\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n\r\n  const userVideo = useRef();\r\n  const partnerVideo = useRef();\r\n  const socket = useRef();\r\n\r\n  useEffect(() => {\r\n    socket.current = io.connect(\"/\");\r\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {\r\n      setStream(stream);\r\n      if (userVideo.current) {\r\n        userVideo.current.srcObject = stream;\r\n      }\r\n    })\r\n\r\n    socket.current.on(\"yourID\", (id) => {\r\n      setYourID(id);\r\n    })\r\n    socket.current.on(\"allUsers\", (users) => {\r\n      setUsers(users);\r\n    })\r\n\r\n    socket.current.on(\"hey\", (data) => {\r\n     \r\n    })\r\n  }, []);\r\n\r\n  function callPeer(id) {\r\n    \r\n  }\r\n\r\n  function acceptCall() {\r\n    \r\n  }\r\n\r\n  let UserVideo;\r\n  if (stream) {\r\n    UserVideo = (\r\n      <Video playsInline muted ref={userVideo} autoPlay />\r\n    );\r\n  }\r\n\r\n  let PartnerVideo;\r\n  if (callAccepted) {\r\n    PartnerVideo = (\r\n      <Video playsInline ref={partnerVideo} autoPlay />\r\n    );\r\n  }\r\n\r\n  let incomingCall;\r\n  if (receivingCall) {\r\n    incomingCall = (\r\n      <div>\r\n        <h1>{caller} is calling you</h1>\r\n        <button onClick={acceptCall}>Accept</button>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {UserVideo}\r\n        {PartnerVideo}\r\n      </Row>\r\n      <Row>\r\n        {Object.keys(users).map(key => {\r\n          if (key === yourID) {\r\n            return null;\r\n          }\r\n          return (\r\n            <button onClick={() => callPeer(key)}>Call {key}</button>\r\n          );\r\n        })}\r\n      </Row>\r\n      <Row>\r\n        {incomingCall}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;",["25","26"],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":4,"column":8,"nodeType":"33","messageId":"34","endLine":4,"endColumn":12},{"ruleId":"31","severity":1,"message":"35","line":29,"column":25,"nodeType":"33","messageId":"34","endLine":29,"endColumn":41},{"ruleId":"31","severity":1,"message":"36","line":30,"column":18,"nodeType":"33","messageId":"34","endLine":30,"endColumn":27},{"ruleId":"31","severity":1,"message":"37","line":31,"column":10,"nodeType":"33","messageId":"34","endLine":31,"endColumn":22},{"ruleId":"31","severity":1,"message":"38","line":31,"column":24,"nodeType":"33","messageId":"34","endLine":31,"endColumn":39},{"ruleId":"31","severity":1,"message":"39","line":32,"column":24,"nodeType":"33","messageId":"34","endLine":32,"endColumn":39},{"ruleId":"27","replacedBy":"40"},{"ruleId":"29","replacedBy":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'Peer' is defined but never used.","Identifier","unusedVar","'setReceivingCall' is assigned a value but never used.","'setCaller' is assigned a value but never used.","'callerSignal' is assigned a value but never used.","'setCallerSignal' is assigned a value but never used.","'setCallAccepted' is assigned a value but never used.",["42"],["43"],"no-global-assign","no-unsafe-negation"]